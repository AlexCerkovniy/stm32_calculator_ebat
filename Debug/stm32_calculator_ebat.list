
stm32_calculator_ebat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003080  08003080  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003080  08003080  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003080  08003080  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08003088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000054  080030dc  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080030dc  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d3f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d7c  00000000  00000000  00028dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002ab80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000813  00000000  00000000  0002b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016dba  00000000  00000000  0002be2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bfda  00000000  00000000  00042be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084bab  00000000  00000000  0004ebbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002be8  00000000  00000000  000d376c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d6354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08003038 	.word	0x08003038

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08003038 	.word	0x08003038

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <seven_segment_init>:
	uint8_t symbol;
} digit[DIGITS_COUNT] = {0};

uint8_t digit_current_index = 0;

void seven_segment_init(void){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < DIGITS_COUNT; i++){
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	e00d      	b.n	800075c <seven_segment_init+0x28>
		digit[i].enabled = false;
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <seven_segment_init+0x3c>)
 8000744:	2100      	movs	r1, #0
 8000746:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		digit[i].symbol = 0;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	4a08      	ldr	r2, [pc, #32]	; (8000770 <seven_segment_init+0x3c>)
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	4413      	add	r3, r2
 8000752:	2200      	movs	r2, #0
 8000754:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 0; i < DIGITS_COUNT; i++){
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	3301      	adds	r3, #1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9ee      	bls.n	8000740 <seven_segment_init+0xc>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000070 	.word	0x20000070

08000774 <seven_segment_tick>:

void seven_segment_tick(void){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	/* Disable current digit */
	HAL_GPIO_WritePin(digit_hw[digit_current_index].GPIOx, digit_hw[digit_current_index].GPIO_Pin, RESET);
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <seven_segment_tick+0x94>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <seven_segment_tick+0x98>)
 8000780:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <seven_segment_tick+0x94>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <seven_segment_tick+0x98>)
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	4413      	add	r3, r2
 800078e:	889b      	ldrh	r3, [r3, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	f001 fc30 	bl	8001ff8 <HAL_GPIO_WritePin>
	digit_current_index++;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <seven_segment_tick+0x94>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <seven_segment_tick+0x94>)
 80007a2:	701a      	strb	r2, [r3, #0]
	if(digit_current_index >= DIGITS_COUNT){
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <seven_segment_tick+0x94>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	d902      	bls.n	80007b2 <seven_segment_tick+0x3e>
		digit_current_index = 0;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <seven_segment_tick+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
	}

	/* Clear segments pins */
	GPIOA->ODR |= A_Pin|B_Pin|C_Pin|D_Pin|E_Pin|F_Pin|G_Pin|DP_Pin;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <seven_segment_tick+0x9c>)
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	4a16      	ldr	r2, [pc, #88]	; (8000810 <seven_segment_tick+0x9c>)
 80007b8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80007bc:	60d3      	str	r3, [r2, #12]

	/* Set code for next digit on segments port */
	if(digit[digit_current_index].enabled){
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <seven_segment_tick+0x94>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <seven_segment_tick+0xa0>)
 80007c6:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <seven_segment_tick+0x70>
		GPIOA->ODR ^= digit[digit_current_index].symbol & (A_Pin|B_Pin|C_Pin|D_Pin|E_Pin|F_Pin|G_Pin|DP_Pin);
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <seven_segment_tick+0x9c>)
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <seven_segment_tick+0x94>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	490f      	ldr	r1, [pc, #60]	; (8000814 <seven_segment_tick+0xa0>)
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	440b      	add	r3, r1
 80007dc:	785b      	ldrb	r3, [r3, #1]
 80007de:	490c      	ldr	r1, [pc, #48]	; (8000810 <seven_segment_tick+0x9c>)
 80007e0:	4053      	eors	r3, r2
 80007e2:	60cb      	str	r3, [r1, #12]
	}

	/* Enable current digit */
	HAL_GPIO_WritePin(digit_hw[digit_current_index].GPIOx, digit_hw[digit_current_index].GPIO_Pin, SET);
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <seven_segment_tick+0x94>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <seven_segment_tick+0x98>)
 80007ec:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <seven_segment_tick+0x94>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4a05      	ldr	r2, [pc, #20]	; (800080c <seven_segment_tick+0x98>)
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4413      	add	r3, r2
 80007fa:	889b      	ldrh	r3, [r3, #4]
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	f001 fbfa 	bl	8001ff8 <HAL_GPIO_WritePin>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000080 	.word	0x20000080
 800080c:	20000000 	.word	0x20000000
 8000810:	40010800 	.word	0x40010800
 8000814:	20000070 	.word	0x20000070

08000818 <seven_segment_enable>:

void seven_segment_enable(uint8_t index, bool state){
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]
	digit[index].enabled = state;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4904      	ldr	r1, [pc, #16]	; (800083c <seven_segment_enable+0x24>)
 800082c:	79ba      	ldrb	r2, [r7, #6]
 800082e:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000070 	.word	0x20000070

08000840 <seven_segment_set_symbol>:

bool seven_segment_is_enabled(uint8_t index){
	return digit[index].enabled;
}

void seven_segment_set_symbol(uint8_t index, uint8_t symbol){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	460a      	mov	r2, r1
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	4613      	mov	r3, r2
 800084e:	71bb      	strb	r3, [r7, #6]
	digit[index].symbol &= ~0x7F;
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <seven_segment_set_symbol+0x54>)
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	785a      	ldrb	r2, [r3, #1]
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000860:	b2d1      	uxtb	r1, r2
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <seven_segment_set_symbol+0x54>)
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	4413      	add	r3, r2
 8000868:	460a      	mov	r2, r1
 800086a:	705a      	strb	r2, [r3, #1]
	digit[index].symbol |= symbol;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <seven_segment_set_symbol+0x54>)
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	7859      	ldrb	r1, [r3, #1]
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	430a      	orrs	r2, r1
 800087c:	b2d1      	uxtb	r1, r2
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <seven_segment_set_symbol+0x54>)
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	460a      	mov	r2, r1
 8000886:	705a      	strb	r2, [r3, #1]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000070 	.word	0x20000070

08000898 <seven_segment_set_dot>:

uint8_t seven_segment_get_symbol(uint8_t index){
	return digit[index].symbol;
}

void seven_segment_set_dot(uint8_t index, bool state){
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	460a      	mov	r2, r1
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71bb      	strb	r3, [r7, #6]
	if(state){
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00e      	beq.n	80008cc <seven_segment_set_dot+0x34>
		digit[index].symbol |= 0x80;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <seven_segment_set_dot+0x5c>)
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	785a      	ldrb	r2, [r3, #1]
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80008be:	b2d1      	uxtb	r1, r2
 80008c0:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <seven_segment_set_dot+0x5c>)
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	460a      	mov	r2, r1
 80008c8:	705a      	strb	r2, [r3, #1]
	}
	else{
		digit[index].symbol &= ~0x80;
	}
}
 80008ca:	e00d      	b.n	80008e8 <seven_segment_set_dot+0x50>
		digit[index].symbol &= ~0x80;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <seven_segment_set_dot+0x5c>)
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	785a      	ldrb	r2, [r3, #1]
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80008dc:	b2d1      	uxtb	r1, r2
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <seven_segment_set_dot+0x5c>)
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	460a      	mov	r2, r1
 80008e6:	705a      	strb	r2, [r3, #1]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000070 	.word	0x20000070

080008f8 <seven_segment_set_number>:

bool seven_segment_get_dot(uint8_t index){
	return (digit[index].symbol & 0x80)?(true):(false);
}

void seven_segment_set_number(uint8_t index, uint8_t number){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
	if(number > 9){
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b09      	cmp	r3, #9
 800090c:	d901      	bls.n	8000912 <seven_segment_set_number+0x1a>
		number = 9;
 800090e:	2309      	movs	r3, #9
 8000910:	71bb      	strb	r3, [r7, #6]
	}

	seven_segment_set_symbol(index, digits[number]);
 8000912:	79bb      	ldrb	r3, [r7, #6]
 8000914:	4a05      	ldr	r2, [pc, #20]	; (800092c <seven_segment_set_number+0x34>)
 8000916:	5cd2      	ldrb	r2, [r2, r3]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff8f 	bl	8000840 <seven_segment_set_symbol>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	08003050 	.word	0x08003050

08000930 <BTN_Init>:
#include "button.h"
#include "button_port.h"

void BTN_Init(button_t *button, uint16_t id, uint16_t debounce_ms, uint16_t long_press_ms){
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	4608      	mov	r0, r1
 800093a:	4611      	mov	r1, r2
 800093c:	461a      	mov	r2, r3
 800093e:	4603      	mov	r3, r0
 8000940:	817b      	strh	r3, [r7, #10]
 8000942:	460b      	mov	r3, r1
 8000944:	813b      	strh	r3, [r7, #8]
 8000946:	4613      	mov	r3, r2
 8000948:	80fb      	strh	r3, [r7, #6]
    button->id = id;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	897a      	ldrh	r2, [r7, #10]
 800094e:	801a      	strh	r2, [r3, #0]
    button->long_press_ms = long_press_ms;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	80da      	strh	r2, [r3, #6]
    button->debounce_ms = debounce_ms;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	893a      	ldrh	r2, [r7, #8]
 800095a:	809a      	strh	r2, [r3, #4]
    button->status = BTN_IDLE;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2200      	movs	r2, #0
 8000960:	70da      	strb	r2, [r3, #3]
    button->timer = 0;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]

    /* Set initial button state */
    button->pressed = BTN_PL_Read(button->id);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f8e1 	bl	8000b34 <BTN_PL_Read>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	709a      	strb	r2, [r3, #2]
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <BTN_Main>:

void BTN_Main(button_t *button){
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
    bool state;

    switch(button->status){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	78db      	ldrb	r3, [r3, #3]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d05f      	beq.n	8000a52 <BTN_Main+0xd0>
 8000992:	2b02      	cmp	r3, #2
 8000994:	f300 8096 	bgt.w	8000ac4 <BTN_Main+0x142>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <BTN_Main+0x20>
 800099c:	2b01      	cmp	r3, #1
 800099e:	d01b      	beq.n	80009d8 <BTN_Main+0x56>
 80009a0:	e090      	b.n	8000ac4 <BTN_Main+0x142>
        case BTN_IDLE:
            if(button->timer){
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <BTN_Main+0x14a>
                return;
            }

            state = BTN_PL_Read(button->id);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f8bf 	bl	8000b34 <BTN_PL_Read>
 80009b6:	4603      	mov	r3, r0
 80009b8:	73fb      	strb	r3, [r7, #15]
            if(state != button->pressed){
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	789b      	ldrb	r3, [r3, #2]
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	f000 8085 	beq.w	8000ad0 <BTN_Main+0x14e>
                button->status = BTN_DEBOUNCE;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	70da      	strb	r2, [r3, #3]
                button->timer = button->debounce_ms;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	889b      	ldrh	r3, [r3, #4]
 80009d0:	461a      	mov	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	609a      	str	r2, [r3, #8]
            }
            break;
 80009d6:	e07b      	b.n	8000ad0 <BTN_Main+0x14e>

        case BTN_DEBOUNCE:
            if(button->timer){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d179      	bne.n	8000ad4 <BTN_Main+0x152>
                return;
            }

            state = BTN_PL_Read(button->id);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 f8a5 	bl	8000b34 <BTN_PL_Read>
 80009ea:	4603      	mov	r3, r0
 80009ec:	73fb      	strb	r3, [r7, #15]
            if(state != button->pressed){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	789b      	ldrb	r3, [r3, #2]
 80009f2:	7bfa      	ldrb	r2, [r7, #15]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d023      	beq.n	8000a40 <BTN_Main+0xbe>
                button->pressed = state;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7bfa      	ldrb	r2, [r7, #15]
 80009fc:	709a      	strb	r2, [r3, #2]

                if(state){
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d008      	beq.n	8000a16 <BTN_Main+0x94>
                    button->status = BTN_WAIT_LONG_PRESS;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2202      	movs	r2, #2
 8000a08:	70da      	strb	r2, [r3, #3]
                    button->timer = button->long_press_ms;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	88db      	ldrh	r3, [r3, #6]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	e007      	b.n	8000a26 <BTN_Main+0xa4>
                }
                else{
                    button->status = BTN_IDLE;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	70da      	strb	r2, [r3, #3]
                    button->timer = button->debounce_ms;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	889b      	ldrh	r3, [r3, #4]
 8000a20:	461a      	mov	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	609a      	str	r2, [r3, #8]
                }

                if(button->callback){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d054      	beq.n	8000ad8 <BTN_Main+0x156>
                    button->callback(button->id, BTN_STATE_UPDATED);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	8812      	ldrh	r2, [r2, #0]
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4798      	blx	r3
            }
            else{
                button->status = BTN_IDLE;
                button->timer = button->debounce_ms;
            }
            break;
 8000a3e:	e04b      	b.n	8000ad8 <BTN_Main+0x156>
                button->status = BTN_IDLE;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	70da      	strb	r2, [r3, #3]
                button->timer = button->debounce_ms;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	889b      	ldrh	r3, [r3, #4]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
            break;
 8000a50:	e042      	b.n	8000ad8 <BTN_Main+0x156>

        case BTN_WAIT_LONG_PRESS:
            state = BTN_PL_Read(button->id);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f86c 	bl	8000b34 <BTN_PL_Read>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73fb      	strb	r3, [r7, #15]

            /* Check if button is still pressed */
            if(state != button->pressed){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	789b      	ldrb	r3, [r3, #2]
 8000a64:	7bfa      	ldrb	r2, [r7, #15]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d014      	beq.n	8000a94 <BTN_Main+0x112>
                button->status = BTN_DEBOUNCE;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	70da      	strb	r2, [r3, #3]
                button->timer = button->debounce_ms;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	889b      	ldrh	r3, [r3, #4]
 8000a74:	461a      	mov	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	609a      	str	r2, [r3, #8]

                if(button->callback){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d02c      	beq.n	8000adc <BTN_Main+0x15a>
                    button->callback(button->id, BTN_SHORT_PRESS);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	8812      	ldrh	r2, [r2, #0]
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4798      	blx	r3
                }
                break;
 8000a92:	e023      	b.n	8000adc <BTN_Main+0x15a>
            }

            if((button->timer == 0) && (button->long_press_ms > 0)){
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d121      	bne.n	8000ae0 <BTN_Main+0x15e>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	88db      	ldrh	r3, [r3, #6]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d01d      	beq.n	8000ae0 <BTN_Main+0x15e>
                button->status = BTN_IDLE;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	70da      	strb	r2, [r3, #3]

                if(button->callback){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d016      	beq.n	8000ae0 <BTN_Main+0x15e>
                    button->callback(button->id, BTN_LONG_PRESS);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	8812      	ldrh	r2, [r2, #0]
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	2102      	movs	r1, #2
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4798      	blx	r3
                }
            }
            break;
 8000ac2:	e00d      	b.n	8000ae0 <BTN_Main+0x15e>

        default:
            button->status = BTN_IDLE;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	70da      	strb	r2, [r3, #3]
            break;
 8000aca:	e00a      	b.n	8000ae2 <BTN_Main+0x160>
                return;
 8000acc:	bf00      	nop
 8000ace:	e008      	b.n	8000ae2 <BTN_Main+0x160>
            break;
 8000ad0:	bf00      	nop
 8000ad2:	e006      	b.n	8000ae2 <BTN_Main+0x160>
                return;
 8000ad4:	bf00      	nop
 8000ad6:	e004      	b.n	8000ae2 <BTN_Main+0x160>
            break;
 8000ad8:	bf00      	nop
 8000ada:	e002      	b.n	8000ae2 <BTN_Main+0x160>
                break;
 8000adc:	bf00      	nop
 8000ade:	e000      	b.n	8000ae2 <BTN_Main+0x160>
            break;
 8000ae0:	bf00      	nop
    }
}
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <BTN_Tick>:

void BTN_Tick(button_t *button, uint32_t period){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
    if(button->timer > period){
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d206      	bcs.n	8000b0a <BTN_Tick+0x22>
        button->timer -= period;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	1ad2      	subs	r2, r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	609a      	str	r2, [r3, #8]
    }
    else{
        button->timer = 0;
    }
}
 8000b08:	e002      	b.n	8000b10 <BTN_Tick+0x28>
        button->timer = 0;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <BTN_RegisterCallback>:
bool BTN_IsPressed(button_t *button){
    return button->pressed;
}

/* Callback register */
void BTN_RegisterCallback(button_t *button, void (*callback)(uint8_t button_id, button_callback_event_t event)){
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
    button->callback = callback;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	60da      	str	r2, [r3, #12]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <BTN_PL_Read>:

void BTN_PL_Init(uint16_t id){
	buttons_state = 0;	/* All buttons is not pressed */
}

bool BTN_PL_Read(uint16_t id){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
    switch(id){
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	f200 80d4 	bhi.w	8000cee <BTN_PL_Read+0x1ba>
 8000b46:	a201      	add	r2, pc, #4	; (adr r2, 8000b4c <BTN_PL_Read+0x18>)
 8000b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4c:	08000b8d 	.word	0x08000b8d
 8000b50:	08000ba1 	.word	0x08000ba1
 8000b54:	08000bb7 	.word	0x08000bb7
 8000b58:	08000bcd 	.word	0x08000bcd
 8000b5c:	08000be3 	.word	0x08000be3
 8000b60:	08000bf9 	.word	0x08000bf9
 8000b64:	08000c0f 	.word	0x08000c0f
 8000b68:	08000c25 	.word	0x08000c25
 8000b6c:	08000c3b 	.word	0x08000c3b
 8000b70:	08000c51 	.word	0x08000c51
 8000b74:	08000c67 	.word	0x08000c67
 8000b78:	08000c7d 	.word	0x08000c7d
 8000b7c:	08000c93 	.word	0x08000c93
 8000b80:	08000ca9 	.word	0x08000ca9
 8000b84:	08000cbf 	.word	0x08000cbf
 8000b88:	08000cd5 	.word	0x08000cd5
        case BTN_0_ID: return (buttons_state & BTN_0_MASK)?(true):(false);
 8000b8c:	4b5b      	ldr	r3, [pc, #364]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf14      	ite	ne
 8000b98:	2301      	movne	r3, #1
 8000b9a:	2300      	moveq	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	e0a7      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_1_ID: return (buttons_state & BTN_1_MASK)?(true):(false);
 8000ba0:	4b56      	ldr	r3, [pc, #344]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	105b      	asrs	r3, r3, #1
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf14      	ite	ne
 8000bae:	2301      	movne	r3, #1
 8000bb0:	2300      	moveq	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	e09c      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_2_ID: return (buttons_state & BTN_2_MASK)?(true):(false);
 8000bb6:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	115b      	asrs	r3, r3, #5
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf14      	ite	ne
 8000bc4:	2301      	movne	r3, #1
 8000bc6:	2300      	moveq	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	e091      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_3_ID: return (buttons_state & BTN_3_MASK)?(true):(false);
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	125b      	asrs	r3, r3, #9
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bf14      	ite	ne
 8000bda:	2301      	movne	r3, #1
 8000bdc:	2300      	moveq	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	e086      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_4_ID: return (buttons_state & BTN_4_MASK)?(true):(false);
 8000be2:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	109b      	asrs	r3, r3, #2
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	bf14      	ite	ne
 8000bf0:	2301      	movne	r3, #1
 8000bf2:	2300      	moveq	r3, #0
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	e07b      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_5_ID: return (buttons_state & BTN_5_MASK)?(true):(false);
 8000bf8:	4b40      	ldr	r3, [pc, #256]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	119b      	asrs	r3, r3, #6
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	e070      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_6_ID: return (buttons_state & BTN_6_MASK)?(true):(false);
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	129b      	asrs	r3, r3, #10
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bf14      	ite	ne
 8000c1c:	2301      	movne	r3, #1
 8000c1e:	2300      	moveq	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	e065      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_7_ID: return (buttons_state & BTN_7_MASK)?(true):(false);
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	10db      	asrs	r3, r3, #3
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf14      	ite	ne
 8000c32:	2301      	movne	r3, #1
 8000c34:	2300      	moveq	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	e05a      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_8_ID: return (buttons_state & BTN_8_MASK)?(true):(false);
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	11db      	asrs	r3, r3, #7
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf14      	ite	ne
 8000c48:	2301      	movne	r3, #1
 8000c4a:	2300      	moveq	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	e04f      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_9_ID: return (buttons_state & BTN_9_MASK)?(true):(false);
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	12db      	asrs	r3, r3, #11
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	bf14      	ite	ne
 8000c5e:	2301      	movne	r3, #1
 8000c60:	2300      	moveq	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	e044      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_DOT_ID: return (buttons_state & BTN_DOT_MASK)?(true):(false);
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	111b      	asrs	r3, r3, #4
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	bf14      	ite	ne
 8000c74:	2301      	movne	r3, #1
 8000c76:	2300      	moveq	r3, #0
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	e039      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_EQUAL_ID: return (buttons_state & BTN_EQUAL_MASK)?(true):(false);
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	121b      	asrs	r3, r3, #8
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	e02e      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_ADD_ID: return (buttons_state & BTN_ADD_MASK)?(true):(false);
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	131b      	asrs	r3, r3, #12
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bf14      	ite	ne
 8000ca0:	2301      	movne	r3, #1
 8000ca2:	2300      	moveq	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	e023      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_SUBSTRACT_ID: return (buttons_state & BTN_SUBSTRACT_MASK)?(true):(false);
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	135b      	asrs	r3, r3, #13
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf14      	ite	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	2300      	moveq	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	e018      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_MULTIPLY_ID: return (buttons_state & BTN_MULTIPLY_MASK)?(true):(false);
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	139b      	asrs	r3, r3, #14
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf14      	ite	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	2300      	moveq	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	e00d      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_DIVIDE_ID: return (buttons_state & BTN_DIVIDE_MASK)?(true):(false);
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	13db      	asrs	r3, r3, #15
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf14      	ite	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	2300      	moveq	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	e000      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        default:
            return false;
 8000cee:	2300      	movs	r3, #0
    }

    return false;
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000082 	.word	0x20000082

08000d00 <calculator_init>:
static void number_set_zero(calc_number_t *number);
static void number_show(calc_number_t *number);
static float number_convert_to_float(calc_number_t *number);
static void number_convert_from_float(float f, calc_number_t *number);

void calculator_init(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	number_set_zero(&display);
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <calculator_init+0x24>)
 8000d06:	f000 f985 	bl	8001014 <number_set_zero>
	result_float = 0;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <calculator_init+0x28>)
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
	operation = CALC_OP_NONE;
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <calculator_init+0x2c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
	update = true;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <calculator_init+0x30>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000084 	.word	0x20000084
 8000d28:	2000009c 	.word	0x2000009c
 8000d2c:	200000a0 	.word	0x200000a0
 8000d30:	200000a2 	.word	0x200000a2

08000d34 <calculator_main>:

void calculator_main(void){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
	if(update){
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <calculator_main+0x48>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d018      	beq.n	8000d74 <calculator_main+0x40>
		update = false;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <calculator_main+0x48>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

		/* Disable all segments */
		for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 8000d48:	2300      	movs	r3, #0
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	e00c      	b.n	8000d68 <calculator_main+0x34>
			seven_segment_enable(seg, false);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fd60 	bl	8000818 <seven_segment_enable>
			seven_segment_set_dot(seg, false);
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fd9b 	bl	8000898 <seven_segment_set_dot>
		for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	3301      	adds	r3, #1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b07      	cmp	r3, #7
 8000d6c:	d9ef      	bls.n	8000d4e <calculator_main+0x1a>
		}

		/* Display data on screen */
		number_show(&display);
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <calculator_main+0x4c>)
 8000d70:	f000 f968 	bl	8001044 <number_show>
	}
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200000a2 	.word	0x200000a2
 8000d80:	20000084 	.word	0x20000084

08000d84 <keyboard_callback>:

void keyboard_callback(keyboard_key_id key, keyboard_event_id event){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
	if(event == KEY_SHORT_PRESS){
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	f040 80fc 	bne.w	8000f94 <keyboard_callback+0x210>
		switch(key){
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	3b0a      	subs	r3, #10
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	f200 8092 	bhi.w	8000eca <keyboard_callback+0x146>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <keyboard_callback+0x28>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dc5 	.word	0x08000dc5
 8000db0:	08000dd7 	.word	0x08000dd7
 8000db4:	08000eab 	.word	0x08000eab
 8000db8:	08000eb3 	.word	0x08000eb3
 8000dbc:	08000ebb 	.word	0x08000ebb
 8000dc0:	08000ec3 	.word	0x08000ec3
			case KEY_DOT_ID:
				if(display.fraction_digits == 0){
 8000dc4:	4b8c      	ldr	r3, [pc, #560]	; (8000ff8 <keyboard_callback+0x274>)
 8000dc6:	7b1b      	ldrb	r3, [r3, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f040 8102 	bne.w	8000fd2 <keyboard_callback+0x24e>
					display.fraction_digits = 1;
 8000dce:	4b8a      	ldr	r3, [pc, #552]	; (8000ff8 <keyboard_callback+0x274>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	731a      	strb	r2, [r3, #12]
				}
				break;
 8000dd4:	e0fd      	b.n	8000fd2 <keyboard_callback+0x24e>

			case KEY_EQUAL_ID:
				if(operation == CALC_OP_NONE){
 8000dd6:	4b89      	ldr	r3, [pc, #548]	; (8000ffc <keyboard_callback+0x278>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8102 	beq.w	8000fe4 <keyboard_callback+0x260>
					return;
				}

				display_float = number_convert_to_float(&display);
 8000de0:	4885      	ldr	r0, [pc, #532]	; (8000ff8 <keyboard_callback+0x274>)
 8000de2:	f000 f9df 	bl	80011a4 <number_convert_to_float>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a85      	ldr	r2, [pc, #532]	; (8001000 <keyboard_callback+0x27c>)
 8000dea:	6013      	str	r3, [r2, #0]

				switch(operation){
 8000dec:	4b83      	ldr	r3, [pc, #524]	; (8000ffc <keyboard_callback+0x278>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	f200 80f8 	bhi.w	8000fe8 <keyboard_callback+0x264>
 8000df8:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <keyboard_callback+0x7c>)
 8000dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfe:	bf00      	nop
 8000e00:	08000e11 	.word	0x08000e11
 8000e04:	08000e2b 	.word	0x08000e2b
 8000e08:	08000e45 	.word	0x08000e45
 8000e0c:	08000e5f 	.word	0x08000e5f
					case CALC_OP_ADD: buffer_float += display_float; break;
 8000e10:	4b7c      	ldr	r3, [pc, #496]	; (8001004 <keyboard_callback+0x280>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a7a      	ldr	r2, [pc, #488]	; (8001000 <keyboard_callback+0x27c>)
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff f99c 	bl	8000158 <__addsf3>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b77      	ldr	r3, [pc, #476]	; (8001004 <keyboard_callback+0x280>)
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	e031      	b.n	8000e8e <keyboard_callback+0x10a>
					case CALC_OP_SUBSTRACT: buffer_float -= display_float; break;
 8000e2a:	4b76      	ldr	r3, [pc, #472]	; (8001004 <keyboard_callback+0x280>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a74      	ldr	r2, [pc, #464]	; (8001000 <keyboard_callback+0x27c>)
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff f98d 	bl	8000154 <__aeabi_fsub>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b71      	ldr	r3, [pc, #452]	; (8001004 <keyboard_callback+0x280>)
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e024      	b.n	8000e8e <keyboard_callback+0x10a>
					case CALC_OP_MULTIPLY: buffer_float *= display_float; break;
 8000e44:	4b6f      	ldr	r3, [pc, #444]	; (8001004 <keyboard_callback+0x280>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a6d      	ldr	r2, [pc, #436]	; (8001000 <keyboard_callback+0x27c>)
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fa8a 	bl	8000368 <__aeabi_fmul>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b6a      	ldr	r3, [pc, #424]	; (8001004 <keyboard_callback+0x280>)
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	e017      	b.n	8000e8e <keyboard_callback+0x10a>
					case CALC_OP_DIVIDE:
						if(display_float == 0){
 8000e5e:	4b68      	ldr	r3, [pc, #416]	; (8001000 <keyboard_callback+0x27c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f04f 0100 	mov.w	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fc12 	bl	8000690 <__aeabi_fcmpeq>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 80bc 	bne.w	8000fec <keyboard_callback+0x268>
							return;
						}

						buffer_float /= display_float;
 8000e74:	4b63      	ldr	r3, [pc, #396]	; (8001004 <keyboard_callback+0x280>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a61      	ldr	r2, [pc, #388]	; (8001000 <keyboard_callback+0x27c>)
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb26 	bl	80004d0 <__aeabi_fdiv>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b5e      	ldr	r3, [pc, #376]	; (8001004 <keyboard_callback+0x280>)
 8000e8a:	601a      	str	r2, [r3, #0]
						break;
 8000e8c:	bf00      	nop

					default:
						return;
				}

				wait_second_arg = false;
 8000e8e:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <keyboard_callback+0x284>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
				result_float = buffer_float;
 8000e94:	4b5b      	ldr	r3, [pc, #364]	; (8001004 <keyboard_callback+0x280>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a5c      	ldr	r2, [pc, #368]	; (800100c <keyboard_callback+0x288>)
 8000e9a:	6013      	str	r3, [r2, #0]
				number_convert_from_float(result_float, &display);
 8000e9c:	4b5b      	ldr	r3, [pc, #364]	; (800100c <keyboard_callback+0x288>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4955      	ldr	r1, [pc, #340]	; (8000ff8 <keyboard_callback+0x274>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f9ba 	bl	800121c <number_convert_from_float>
				break;
 8000ea8:	e098      	b.n	8000fdc <keyboard_callback+0x258>

			case KEY_ADD_ID:
				operation = CALC_OP_ADD;
 8000eaa:	4b54      	ldr	r3, [pc, #336]	; (8000ffc <keyboard_callback+0x278>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
				break;
 8000eb0:	e094      	b.n	8000fdc <keyboard_callback+0x258>

			case KEY_SUBSTRACT_ID:
				operation = CALC_OP_SUBSTRACT;
 8000eb2:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <keyboard_callback+0x278>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	701a      	strb	r2, [r3, #0]
				break;
 8000eb8:	e090      	b.n	8000fdc <keyboard_callback+0x258>

			case KEY_MULTIPLY_ID:
				operation = CALC_OP_MULTIPLY;
 8000eba:	4b50      	ldr	r3, [pc, #320]	; (8000ffc <keyboard_callback+0x278>)
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	701a      	strb	r2, [r3, #0]
				break;
 8000ec0:	e08c      	b.n	8000fdc <keyboard_callback+0x258>

			case KEY_DIVIDE_ID:
				operation = CALC_OP_DIVIDE;
 8000ec2:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <keyboard_callback+0x278>)
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	701a      	strb	r2, [r3, #0]
				break;
 8000ec8:	e088      	b.n	8000fdc <keyboard_callback+0x258>

			default:
				if(operation != CALC_OP_NONE && wait_second_arg == false){
 8000eca:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <keyboard_callback+0x278>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d012      	beq.n	8000ef8 <keyboard_callback+0x174>
 8000ed2:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <keyboard_callback+0x284>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	f083 0301 	eor.w	r3, r3, #1
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00b      	beq.n	8000ef8 <keyboard_callback+0x174>
					/* Save result on screen to buffer */
					buffer_float = number_convert_to_float(&display);
 8000ee0:	4845      	ldr	r0, [pc, #276]	; (8000ff8 <keyboard_callback+0x274>)
 8000ee2:	f000 f95f 	bl	80011a4 <number_convert_to_float>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a46      	ldr	r2, [pc, #280]	; (8001004 <keyboard_callback+0x280>)
 8000eea:	6013      	str	r3, [r2, #0]
					number_set_zero(&display);
 8000eec:	4842      	ldr	r0, [pc, #264]	; (8000ff8 <keyboard_callback+0x274>)
 8000eee:	f000 f891 	bl	8001014 <number_set_zero>
					wait_second_arg = true;
 8000ef2:	4b45      	ldr	r3, [pc, #276]	; (8001008 <keyboard_callback+0x284>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
				}

				if(display.fraction_digits){
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <keyboard_callback+0x274>)
 8000efa:	7b1b      	ldrb	r3, [r3, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d024      	beq.n	8000f4a <keyboard_callback+0x1c6>
					if(display.fraction){
 8000f00:	4b3d      	ldr	r3, [pc, #244]	; (8000ff8 <keyboard_callback+0x274>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d019      	beq.n	8000f3c <keyboard_callback+0x1b8>
						if(display.fraction_digits < DIGITS_COUNT){
 8000f08:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <keyboard_callback+0x274>)
 8000f0a:	7b1b      	ldrb	r3, [r3, #12]
 8000f0c:	2b07      	cmp	r3, #7
 8000f0e:	d862      	bhi.n	8000fd6 <keyboard_callback+0x252>
							display.fraction *= 10;
 8000f10:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <keyboard_callback+0x274>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <keyboard_callback+0x274>)
 8000f20:	609a      	str	r2, [r3, #8]
							display.fraction += key;
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <keyboard_callback+0x274>)
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a33      	ldr	r2, [pc, #204]	; (8000ff8 <keyboard_callback+0x274>)
 8000f2c:	6093      	str	r3, [r2, #8]
							display.fraction_digits++;
 8000f2e:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <keyboard_callback+0x274>)
 8000f30:	7b1b      	ldrb	r3, [r3, #12]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <keyboard_callback+0x274>)
 8000f38:	731a      	strb	r2, [r3, #12]
						display.absolute *= 10;
					}

					display.absolute += key;
				}
				break;
 8000f3a:	e04c      	b.n	8000fd6 <keyboard_callback+0x252>
						display.fraction += key;
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <keyboard_callback+0x274>)
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a2c      	ldr	r2, [pc, #176]	; (8000ff8 <keyboard_callback+0x274>)
 8000f46:	6093      	str	r3, [r2, #8]
				break;
 8000f48:	e045      	b.n	8000fd6 <keyboard_callback+0x252>
				else if(display.absolute_digits < DIGITS_COUNT){
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <keyboard_callback+0x274>)
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d841      	bhi.n	8000fd6 <keyboard_callback+0x252>
					if(display.absolute == 0 && key == KEY_0_ID){
 8000f52:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <keyboard_callback+0x274>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <keyboard_callback+0x1dc>
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d03c      	beq.n	8000fda <keyboard_callback+0x256>
					if(display.absolute){
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <keyboard_callback+0x274>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00e      	beq.n	8000f86 <keyboard_callback+0x202>
						display.absolute_digits++;
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <keyboard_callback+0x274>)
 8000f6a:	791b      	ldrb	r3, [r3, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <keyboard_callback+0x274>)
 8000f72:	711a      	strb	r2, [r3, #4]
						display.absolute *= 10;
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <keyboard_callback+0x274>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <keyboard_callback+0x274>)
 8000f84:	601a      	str	r2, [r3, #0]
					display.absolute += key;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <keyboard_callback+0x274>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <keyboard_callback+0x274>)
 8000f90:	6013      	str	r3, [r2, #0]
				break;
 8000f92:	e020      	b.n	8000fd6 <keyboard_callback+0x252>
		}
	}
	else if(event == KEY_LONG_PRESS){
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d12a      	bne.n	8000ff0 <keyboard_callback+0x26c>
		switch(key){
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b0b      	cmp	r3, #11
 8000f9e:	d002      	beq.n	8000fa6 <keyboard_callback+0x222>
 8000fa0:	2b0d      	cmp	r3, #13
 8000fa2:	d012      	beq.n	8000fca <keyboard_callback+0x246>
			case KEY_SUBSTRACT_ID:
				display.negative = true;
				break;

			default:
				return;
 8000fa4:	e025      	b.n	8000ff2 <keyboard_callback+0x26e>
				result_float = 0;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <keyboard_callback+0x288>)
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
				buffer_float = 0;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <keyboard_callback+0x280>)
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
				wait_second_arg = false;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <keyboard_callback+0x284>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
				number_set_zero(&display);
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <keyboard_callback+0x274>)
 8000fbe:	f000 f829 	bl	8001014 <number_set_zero>
				operation = CALC_OP_NONE;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <keyboard_callback+0x278>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
				break;
 8000fc8:	e008      	b.n	8000fdc <keyboard_callback+0x258>
				display.negative = true;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <keyboard_callback+0x274>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	735a      	strb	r2, [r3, #13]
				break;
 8000fd0:	e004      	b.n	8000fdc <keyboard_callback+0x258>
				break;
 8000fd2:	bf00      	nop
 8000fd4:	e002      	b.n	8000fdc <keyboard_callback+0x258>
				break;
 8000fd6:	bf00      	nop
 8000fd8:	e000      	b.n	8000fdc <keyboard_callback+0x258>
						break;
 8000fda:	bf00      	nop
	}
	else{
		return;
	}

	update = true;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <keyboard_callback+0x28c>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e006      	b.n	8000ff2 <keyboard_callback+0x26e>
					return;
 8000fe4:	bf00      	nop
 8000fe6:	e004      	b.n	8000ff2 <keyboard_callback+0x26e>
						return;
 8000fe8:	bf00      	nop
 8000fea:	e002      	b.n	8000ff2 <keyboard_callback+0x26e>
							return;
 8000fec:	bf00      	nop
 8000fee:	e000      	b.n	8000ff2 <keyboard_callback+0x26e>
		return;
 8000ff0:	bf00      	nop
}
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000084 	.word	0x20000084
 8000ffc:	200000a0 	.word	0x200000a0
 8001000:	20000094 	.word	0x20000094
 8001004:	20000098 	.word	0x20000098
 8001008:	200000a1 	.word	0x200000a1
 800100c:	2000009c 	.word	0x2000009c
 8001010:	200000a2 	.word	0x200000a2

08001014 <number_set_zero>:

static void number_set_zero(calc_number_t *number){
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	number->absolute = 0;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
	number->absolute_digits = 1;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	711a      	strb	r2, [r3, #4]
	number->fraction = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
	number->fraction_digits = 0;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	731a      	strb	r2, [r3, #12]
	number->negative = false;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	735a      	strb	r2, [r3, #13]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <number_show>:

static void number_show(calc_number_t *number){
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	uint8_t digits_absolute = number->absolute_digits;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	73bb      	strb	r3, [r7, #14]
	uint8_t digits_fraction = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	75fb      	strb	r3, [r7, #23]
	uint8_t digit_offset = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	75bb      	strb	r3, [r7, #22]
	uint32_t temp;
	uint8_t i;

	/* Calculate digit offset for fraction */
	if(number->fraction_digits){
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7b1b      	ldrb	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d026      	beq.n	80010b0 <number_show+0x6c>
		if(number->fraction > 0){
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01e      	beq.n	80010a8 <number_show+0x64>
			if(number->absolute_digits == DIGITS_COUNT){
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	791b      	ldrb	r3, [r3, #4]
 800106e:	2b08      	cmp	r3, #8
 8001070:	d104      	bne.n	800107c <number_show+0x38>
				/* Show only dot, we don't have space for fraction show */
				seven_segment_set_dot(0, true);
 8001072:	2101      	movs	r1, #1
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff fc0f 	bl	8000898 <seven_segment_set_dot>
 800107a:	e019      	b.n	80010b0 <number_show+0x6c>
			}
			else if(DIGITS_COUNT - number->absolute_digits > number->fraction_digits){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	791b      	ldrb	r3, [r3, #4]
 8001080:	f1c3 0308 	rsb	r3, r3, #8
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7b12      	ldrb	r2, [r2, #12]
 8001088:	4293      	cmp	r3, r2
 800108a:	dd05      	ble.n	8001098 <number_show+0x54>
				digits_fraction = number->fraction_digits;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7b1b      	ldrb	r3, [r3, #12]
 8001090:	75fb      	strb	r3, [r7, #23]
				digit_offset = digits_fraction;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	75bb      	strb	r3, [r7, #22]
 8001096:	e00b      	b.n	80010b0 <number_show+0x6c>
			}
			else{
				digits_fraction = DIGITS_COUNT - number->absolute_digits;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	f1c3 0308 	rsb	r3, r3, #8
 80010a0:	75fb      	strb	r3, [r7, #23]
				digit_offset = digits_fraction;
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	75bb      	strb	r3, [r7, #22]
 80010a6:	e003      	b.n	80010b0 <number_show+0x6c>
			}
		}
		else{
			/* Show only dot */
			seven_segment_set_dot(0, true);
 80010a8:	2101      	movs	r1, #1
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fbf4 	bl	8000898 <seven_segment_set_dot>
		}
	}

	/* Show absolute part */
	temp = number->absolute;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	613b      	str	r3, [r7, #16]
	for(i = 0; i < digits_absolute; i++){
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	e022      	b.n	8001102 <number_show+0xbe>
		seven_segment_enable(i + digit_offset, true);
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	7dbb      	ldrb	r3, [r7, #22]
 80010c0:	4413      	add	r3, r2
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2101      	movs	r1, #1
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fba6 	bl	8000818 <seven_segment_enable>
		seven_segment_set_number(i + digit_offset, temp % 10);
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	7dbb      	ldrb	r3, [r7, #22]
 80010d0:	4413      	add	r3, r2
 80010d2:	b2d8      	uxtb	r0, r3
 80010d4:	6939      	ldr	r1, [r7, #16]
 80010d6:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <number_show+0x15c>)
 80010d8:	fba3 2301 	umull	r2, r3, r3, r1
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	1aca      	subs	r2, r1, r3
 80010e8:	b2d3      	uxtb	r3, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fc04 	bl	80008f8 <seven_segment_set_number>
		temp /= 10;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <number_show+0x15c>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	08db      	lsrs	r3, r3, #3
 80010fa:	613b      	str	r3, [r7, #16]
	for(i = 0; i < digits_absolute; i++){
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	3301      	adds	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	429a      	cmp	r2, r3
 8001108:	d3d8      	bcc.n	80010bc <number_show+0x78>
	}

	/* Show absolute part */
	if(digits_fraction){
 800110a:	7dfb      	ldrb	r3, [r7, #23]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d043      	beq.n	8001198 <number_show+0x154>
		temp = number->fraction;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
		if(digits_fraction < number->fraction_digits){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7b1b      	ldrb	r3, [r3, #12]
 800111a:	7dfa      	ldrb	r2, [r7, #23]
 800111c:	429a      	cmp	r2, r3
 800111e:	d211      	bcs.n	8001144 <number_show+0x100>
			i = number->fraction_digits - digits_fraction;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7b1a      	ldrb	r2, [r3, #12]
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	73fb      	strb	r3, [r7, #15]
			while(i){
 800112a:	e008      	b.n	800113e <number_show+0xfa>
				temp /= 10;
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <number_show+0x15c>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	613b      	str	r3, [r7, #16]
				i--;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	3b01      	subs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
			while(i){
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f3      	bne.n	800112c <number_show+0xe8>
			}
		}

		seven_segment_set_dot(digit_offset, true);
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fba5 	bl	8000898 <seven_segment_set_dot>
		for(i = 0; i < digits_fraction; i++){
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e01d      	b.n	8001190 <number_show+0x14c>
			seven_segment_enable(i, true);
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2101      	movs	r1, #1
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fb5d 	bl	8000818 <seven_segment_enable>
			seven_segment_set_number(i, temp % 10);
 800115e:	6939      	ldr	r1, [r7, #16]
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <number_show+0x15c>)
 8001162:	fba3 2301 	umull	r2, r3, r3, r1
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	1aca      	subs	r2, r1, r3
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fbbd 	bl	80008f8 <seven_segment_set_number>
			temp /= 10;
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <number_show+0x15c>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	613b      	str	r3, [r7, #16]
		for(i = 0; i < digits_fraction; i++){
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	3301      	adds	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3dd      	bcc.n	8001154 <number_show+0x110>
		}
	}
}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	cccccccd 	.word	0xcccccccd

080011a4 <number_convert_to_float>:

static float number_convert_to_float(calc_number_t *number){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	float tmp = 0;
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]

	/* Fraction part */
	if(number->fraction_digits){
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7b1b      	ldrb	r3, [r3, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d01e      	beq.n	80011f8 <number_convert_to_float+0x54>
		uint32_t i = number->fraction_digits;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7b1b      	ldrb	r3, [r3, #12]
 80011be:	60bb      	str	r3, [r7, #8]
		tmp = 1;
 80011c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011c4:	60fb      	str	r3, [r7, #12]
		while(i){
 80011c6:	e008      	b.n	80011da <number_convert_to_float+0x36>
			tmp *= 10;
 80011c8:	4913      	ldr	r1, [pc, #76]	; (8001218 <number_convert_to_float+0x74>)
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff f8cc 	bl	8000368 <__aeabi_fmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	60fb      	str	r3, [r7, #12]
			i--;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
		while(i){
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f3      	bne.n	80011c8 <number_convert_to_float+0x24>
		}

		tmp = (float)number->fraction / tmp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f867 	bl	80002b8 <__aeabi_ui2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	68f9      	ldr	r1, [r7, #12]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f96e 	bl	80004d0 <__aeabi_fdiv>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]
	}

	return (float)number->absolute + tmp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f85b 	bl	80002b8 <__aeabi_ui2f>
 8001202:	4603      	mov	r3, r0
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffa6 	bl	8000158 <__addsf3>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	41200000 	.word	0x41200000

0800121c <number_convert_from_float>:

static void number_convert_from_float(float f, calc_number_t *number){
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	float ftemp;

	number_set_zero(number);
 8001226:	6838      	ldr	r0, [r7, #0]
 8001228:	f7ff fef4 	bl	8001014 <number_set_zero>

	/* Set sign */
	if(f < 0){
 800122c:	f04f 0100 	mov.w	r1, #0
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fa37 	bl	80006a4 <__aeabi_fcmplt>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <number_convert_from_float+0x26>
		number->negative = true;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2201      	movs	r2, #1
 8001240:	735a      	strb	r2, [r3, #13]
	}

	/* Check range for 8-digit display */
	if(f > 99999999){
 8001242:	494e      	ldr	r1, [pc, #312]	; (800137c <number_convert_from_float+0x160>)
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fa4b 	bl	80006e0 <__aeabi_fcmpgt>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <number_convert_from_float+0x3c>
		number->absolute = 99999999;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	4a4b      	ldr	r2, [pc, #300]	; (8001380 <number_convert_from_float+0x164>)
 8001254:	601a      	str	r2, [r3, #0]
		return;
 8001256:	e08d      	b.n	8001374 <number_convert_from_float+0x158>
	}
	else if(f < -9999999){
 8001258:	494a      	ldr	r1, [pc, #296]	; (8001384 <number_convert_from_float+0x168>)
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fa22 	bl	80006a4 <__aeabi_fcmplt>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <number_convert_from_float+0x52>
		number->absolute = 9999999;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	4a47      	ldr	r2, [pc, #284]	; (8001388 <number_convert_from_float+0x16c>)
 800126a:	601a      	str	r2, [r3, #0]
		return;
 800126c:	e082      	b.n	8001374 <number_convert_from_float+0x158>
	}

	/* Invert number, for negative sign clear */
	if(number->negative){
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	7b5b      	ldrb	r3, [r3, #13]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <number_convert_from_float+0x62>
		f = -f;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800127c:	607b      	str	r3, [r7, #4]
	}

	/* Convert absolute part */
	number->absolute = (uint32_t)f;
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fa38 	bl	80006f4 <__aeabi_f2uiz>
 8001284:	4602      	mov	r2, r0
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	601a      	str	r2, [r3, #0]
	tmp = number->absolute;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60fb      	str	r3, [r7, #12]

	while(tmp){
 8001290:	e00b      	b.n	80012aa <number_convert_from_float+0x8e>
		number->absolute_digits++;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	791b      	ldrb	r3, [r3, #4]
 8001296:	3301      	adds	r3, #1
 8001298:	b2da      	uxtb	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	711a      	strb	r2, [r3, #4]
		tmp /= 10;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4a3a      	ldr	r2, [pc, #232]	; (800138c <number_convert_from_float+0x170>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	08db      	lsrs	r3, r3, #3
 80012a8:	60fb      	str	r3, [r7, #12]
	while(tmp){
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f0      	bne.n	8001292 <number_convert_from_float+0x76>
	}

	number->absolute_digits -= 1;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	711a      	strb	r2, [r3, #4]

	/* Convert fraction part */
	tmp = DIGITS_COUNT - number->absolute_digits;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	791b      	ldrb	r3, [r3, #4]
 80012c0:	f1c3 0308 	rsb	r3, r3, #8
 80012c4:	60fb      	str	r3, [r7, #12]
	f = f - (float)number->absolute;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7fe fff4 	bl	80002b8 <__aeabi_ui2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4619      	mov	r1, r3
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7fe ff3d 	bl	8000154 <__aeabi_fsub>
 80012da:	4603      	mov	r3, r0
 80012dc:	607b      	str	r3, [r7, #4]

	if(tmp && (f > 0)){
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d047      	beq.n	8001374 <number_convert_from_float+0x158>
 80012e4:	f04f 0100 	mov.w	r1, #0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff f9f9 	bl	80006e0 <__aeabi_fcmpgt>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d03f      	beq.n	8001374 <number_convert_from_float+0x158>
		ftemp = 1;
 80012f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012f8:	60bb      	str	r3, [r7, #8]
		while(tmp){
 80012fa:	e00e      	b.n	800131a <number_convert_from_float+0xfe>
			number->fraction_digits++;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	7b1b      	ldrb	r3, [r3, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	731a      	strb	r2, [r3, #12]
			ftemp *= 10;
 8001308:	4921      	ldr	r1, [pc, #132]	; (8001390 <number_convert_from_float+0x174>)
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f7ff f82c 	bl	8000368 <__aeabi_fmul>
 8001310:	4603      	mov	r3, r0
 8001312:	60bb      	str	r3, [r7, #8]
			tmp--;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3b01      	subs	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
		while(tmp){
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1ed      	bne.n	80012fc <number_convert_from_float+0xe0>
		}

		number->fraction = f * ftemp;
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff f820 	bl	8000368 <__aeabi_fmul>
 8001328:	4603      	mov	r3, r0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f9e2 	bl	80006f4 <__aeabi_f2uiz>
 8001330:	4602      	mov	r2, r0
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	609a      	str	r2, [r3, #8]

		/* Remove trailing zeros */
		tmp = number->fraction;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	60fb      	str	r3, [r7, #12]
		while(tmp % 10 == 0){
 800133c:	e00b      	b.n	8001356 <number_convert_from_float+0x13a>
			tmp /= 10;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4a12      	ldr	r2, [pc, #72]	; (800138c <number_convert_from_float+0x170>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	60fb      	str	r3, [r7, #12]
			number->fraction_digits--;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	7b1b      	ldrb	r3, [r3, #12]
 800134e:	3b01      	subs	r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	731a      	strb	r2, [r3, #12]
		while(tmp % 10 == 0){
 8001356:	68f9      	ldr	r1, [r7, #12]
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <number_convert_from_float+0x170>)
 800135a:	fba3 2301 	umull	r2, r3, r3, r1
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	1aca      	subs	r2, r1, r3
 800136a:	2a00      	cmp	r2, #0
 800136c:	d0e7      	beq.n	800133e <number_convert_from_float+0x122>
		}

		number->fraction = tmp;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	609a      	str	r2, [r3, #8]
	}
}
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	4cbebc20 	.word	0x4cbebc20
 8001380:	05f5e0ff 	.word	0x05f5e0ff
 8001384:	cb18967f 	.word	0xcb18967f
 8001388:	0098967f 	.word	0x0098967f
 800138c:	cccccccd 	.word	0xcccccccd
 8001390:	41200000 	.word	0x41200000

08001394 <keyboard_init>:
extern uint16_t buttons_state;

static void button_callback(uint8_t button_id, button_callback_event_t event);
static void scan_buttons(void);

void keyboard_init(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	e014      	b.n	80013ca <keyboard_init+0x36>
		BTN_Init(&keyboard.button[btn], KEY_0_ID + btn, 50, 0 /* Disabled */);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	4a11      	ldr	r2, [pc, #68]	; (80013ec <keyboard_init+0x58>)
 80013a6:	1898      	adds	r0, r3, r2
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	b299      	uxth	r1, r3
 80013ac:	2300      	movs	r3, #0
 80013ae:	2232      	movs	r2, #50	; 0x32
 80013b0:	f7ff fabe 	bl	8000930 <BTN_Init>
		BTN_RegisterCallback(&keyboard.button[btn], button_callback);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <keyboard_init+0x58>)
 80013ba:	4413      	add	r3, r2
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <keyboard_init+0x5c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fbab 	bl	8000b1a <BTN_RegisterCallback>
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d9e7      	bls.n	80013a0 <keyboard_init+0xc>
	}

	/* Set long-press time for * and OK buttons */
	keyboard.button[KEY_EQUAL_ID].long_press_ms = 500;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <keyboard_init+0x58>)
 80013d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013d6:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	keyboard.button[KEY_SUBSTRACT_ID].long_press_ms = 500;
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <keyboard_init+0x58>)
 80013dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013e0:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200000a4 	.word	0x200000a4
 80013f0:	08001469 	.word	0x08001469

080013f4 <keyboard_main>:

void keyboard_main(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	e009      	b.n	8001414 <keyboard_main+0x20>
		BTN_Main(&keyboard.button[btn]);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <keyboard_main+0x30>)
 8001406:	4413      	add	r3, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff faba 	bl	8000982 <BTN_Main>
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	d9f2      	bls.n	8001400 <keyboard_main+0xc>
	}
}
 800141a:	bf00      	nop
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200000a4 	.word	0x200000a4

08001428 <keyboard_tick>:

void keyboard_tick(uint16_t period){
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
	/* Scan keyboard buttons */
	scan_buttons();
 8001432:	f000 f84d 	bl	80014d0 <scan_buttons>

	/* Update timings for buttons library */
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e00b      	b.n	8001454 <keyboard_tick+0x2c>
		BTN_Tick(&keyboard.button[btn], period);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	011b      	lsls	r3, r3, #4
 8001440:	4a08      	ldr	r2, [pc, #32]	; (8001464 <keyboard_tick+0x3c>)
 8001442:	4413      	add	r3, r2
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fb4d 	bl	8000ae8 <BTN_Tick>
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3301      	adds	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	d9f0      	bls.n	800143c <keyboard_tick+0x14>
	}
}
 800145a:	bf00      	nop
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200000a4 	.word	0x200000a4

08001468 <button_callback>:

static void button_callback(uint8_t button_id, button_callback_event_t event){
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	4613      	mov	r3, r2
 8001476:	71bb      	strb	r3, [r7, #6]
	keyboard_event_id kbd_event = KEY_RELEASED;
 8001478:	2302      	movs	r3, #2
 800147a:	73fb      	strb	r3, [r7, #15]

	switch(event){
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d014      	beq.n	80014ac <button_callback+0x44>
 8001482:	2b02      	cmp	r3, #2
 8001484:	dc15      	bgt.n	80014b2 <button_callback+0x4a>
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <button_callback+0x28>
 800148a:	2b01      	cmp	r3, #1
 800148c:	d00b      	beq.n	80014a6 <button_callback+0x3e>

		case BTN_SHORT_PRESS: kbd_event = KEY_SHORT_PRESS; break;
		case BTN_LONG_PRESS: kbd_event = KEY_LONG_PRESS; break;

		default:
			break;
 800148e:	e010      	b.n	80014b2 <button_callback+0x4a>
			if(keyboard.button[button_id].pressed){
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <button_callback+0x64>)
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	3302      	adds	r3, #2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00a      	beq.n	80014b6 <button_callback+0x4e>
				kbd_event = KEY_PRESSED;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
			break;
 80014a4:	e007      	b.n	80014b6 <button_callback+0x4e>
		case BTN_SHORT_PRESS: kbd_event = KEY_SHORT_PRESS; break;
 80014a6:	2304      	movs	r3, #4
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e005      	b.n	80014b8 <button_callback+0x50>
		case BTN_LONG_PRESS: kbd_event = KEY_LONG_PRESS; break;
 80014ac:	2308      	movs	r3, #8
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e002      	b.n	80014b8 <button_callback+0x50>
			break;
 80014b2:	bf00      	nop
 80014b4:	e000      	b.n	80014b8 <button_callback+0x50>
			break;
 80014b6:	bf00      	nop
	}

	keyboard_callback(button_id, kbd_event);
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fc60 	bl	8000d84 <keyboard_callback>
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000a4 	.word	0x200000a4

080014d0 <scan_buttons>:

/* Weak functions for user realization if needed */
__attribute__((weak)) void keyboard_callback(keyboard_key_id key, keyboard_event_id event){}

static void scan_buttons(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
	static uint8_t column_index = 0;
	static uint16_t column_pin[] = {KEY_C1_Pin, KEY_C2_Pin, KEY_C3_Pin, KEY_C4_Pin};
	uint16_t tmp = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	80fb      	strh	r3, [r7, #6]

	/* Read coulumn buttons */
	tmp |= (KEY_R1_GPIO_Port->IDR & KEY_R1_Pin)?(0):(1);
 80014da:	4b46      	ldr	r3, [pc, #280]	; (80015f4 <scan_buttons+0x124>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bf0c      	ite	eq
 80014e6:	2301      	moveq	r3, #1
 80014e8:	2300      	movne	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	80fb      	strh	r3, [r7, #6]
	tmp <<= 1;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	80fb      	strh	r3, [r7, #6]
	tmp |= (KEY_R2_GPIO_Port->IDR & KEY_R2_Pin)?(0):(1);
 80014fe:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <scan_buttons+0x124>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001506:	2b00      	cmp	r3, #0
 8001508:	bf0c      	ite	eq
 800150a:	2301      	moveq	r3, #1
 800150c:	2300      	movne	r3, #0
 800150e:	b2db      	uxtb	r3, r3
 8001510:	b21a      	sxth	r2, r3
 8001512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	80fb      	strh	r3, [r7, #6]
	tmp <<= 1;
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	80fb      	strh	r3, [r7, #6]
	tmp |= (KEY_R3_GPIO_Port->IDR & KEY_R3_Pin)?(0):(1);
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <scan_buttons+0x124>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf0c      	ite	eq
 800152e:	2301      	moveq	r3, #1
 8001530:	2300      	movne	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	b21a      	sxth	r2, r3
 8001536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153a:	4313      	orrs	r3, r2
 800153c:	b21b      	sxth	r3, r3
 800153e:	80fb      	strh	r3, [r7, #6]
	tmp <<= 1;
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	80fb      	strh	r3, [r7, #6]
	tmp |= (KEY_R4_GPIO_Port->IDR & KEY_R4_Pin)?(0):(1);
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <scan_buttons+0x124>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	b21a      	sxth	r2, r3
 800155a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155e:	4313      	orrs	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	80fb      	strh	r3, [r7, #6]

	/* Clear last buttons states */
	buttons_state &= ~(0x0F << (column_index * 4));
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <scan_buttons+0x128>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	b21b      	sxth	r3, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <scan_buttons+0x12c>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4013      	ands	r3, r2
 800157e:	b21b      	sxth	r3, r3
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <scan_buttons+0x12c>)
 8001584:	801a      	strh	r2, [r3, #0]

	/* Set new buttons states */
	buttons_state |= tmp << (column_index * 4);
 8001586:	88fa      	ldrh	r2, [r7, #6]
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <scan_buttons+0x128>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <scan_buttons+0x12c>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	b21b      	sxth	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b21b      	sxth	r3, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <scan_buttons+0x12c>)
 80015a2:	801a      	strh	r2, [r3, #0]

	/* Select column row */
	HAL_GPIO_WritePin(GPIOB, column_pin[column_index], SET);
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <scan_buttons+0x128>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <scan_buttons+0x130>)
 80015ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015b0:	2201      	movs	r2, #1
 80015b2:	4619      	mov	r1, r3
 80015b4:	480f      	ldr	r0, [pc, #60]	; (80015f4 <scan_buttons+0x124>)
 80015b6:	f000 fd1f 	bl	8001ff8 <HAL_GPIO_WritePin>
	column_index++;
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <scan_buttons+0x128>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <scan_buttons+0x128>)
 80015c4:	701a      	strb	r2, [r3, #0]
	if(column_index >= 4){
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <scan_buttons+0x128>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d902      	bls.n	80015d4 <scan_buttons+0x104>
		column_index = 0;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <scan_buttons+0x128>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOB, column_pin[column_index], RESET);
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <scan_buttons+0x128>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <scan_buttons+0x130>)
 80015dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <scan_buttons+0x124>)
 80015e6:	f000 fd07 	bl	8001ff8 <HAL_GPIO_WritePin>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	200001a4 	.word	0x200001a4
 80015fc:	20000082 	.word	0x20000082
 8001600:	20000040 	.word	0x20000040

08001604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001608:	f000 fa14 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160c:	f000 f817 	bl	800163e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001610:	f000 f8ac 	bl	800176c <MX_GPIO_Init>
  MX_TIM4_Init();
 8001614:	f000 f858 	bl	80016c8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  seven_segment_init();
 8001618:	f7ff f88c 	bl	8000734 <seven_segment_init>
  seven_segment_enable(0, true);
 800161c:	2101      	movs	r1, #1
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff f8fa 	bl	8000818 <seven_segment_enable>
  seven_segment_set_number(0, 0);
 8001624:	2100      	movs	r1, #0
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff f966 	bl	80008f8 <seven_segment_set_number>
  keyboard_init();
 800162c:	f7ff feb2 	bl	8001394 <keyboard_init>
  calculator_init();
 8001630:	f7ff fb66 	bl	8000d00 <calculator_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  keyboard_main();
 8001634:	f7ff fede 	bl	80013f4 <keyboard_main>
	  calculator_main();
 8001638:	f7ff fb7c 	bl	8000d34 <calculator_main>
	  keyboard_main();
 800163c:	e7fa      	b.n	8001634 <main+0x30>

0800163e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b090      	sub	sp, #64	; 0x40
 8001642:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001644:	f107 0318 	add.w	r3, r7, #24
 8001648:	2228      	movs	r2, #40	; 0x28
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f001 fcc7 	bl	8002fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001660:	2301      	movs	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001668:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166e:	2301      	movs	r3, #1
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001672:	2302      	movs	r3, #2
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800167a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800167c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001680:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001682:	f107 0318 	add.w	r3, r7, #24
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fcce 	bl	8002028 <HAL_RCC_OscConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001692:	f000 f913 	bl	80018bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001696:	230f      	movs	r3, #15
 8001698:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169a:	2302      	movs	r3, #2
 800169c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2101      	movs	r1, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 ff3b 	bl	800252c <HAL_RCC_ClockConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016bc:	f000 f8fe 	bl	80018bc <Error_Handler>
  }
}
 80016c0:	bf00      	nop
 80016c2:	3740      	adds	r7, #64	; 0x40
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MX_TIM4_Init+0x9c>)
 80016e6:	4a20      	ldr	r2, [pc, #128]	; (8001768 <MX_TIM4_Init+0xa0>)
 80016e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_TIM4_Init+0x9c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MX_TIM4_Init+0x9c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_TIM4_Init+0x9c>)
 80016f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_TIM4_Init+0x9c>)
 8001700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001704:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_TIM4_Init+0x9c>)
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800170c:	4815      	ldr	r0, [pc, #84]	; (8001764 <MX_TIM4_Init+0x9c>)
 800170e:	f001 f869 	bl	80027e4 <HAL_TIM_Base_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001718:	f000 f8d0 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001722:	f107 0308 	add.w	r3, r7, #8
 8001726:	4619      	mov	r1, r3
 8001728:	480e      	ldr	r0, [pc, #56]	; (8001764 <MX_TIM4_Init+0x9c>)
 800172a:	f001 fa05 	bl	8002b38 <HAL_TIM_ConfigClockSource>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001734:	f000 f8c2 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001740:	463b      	mov	r3, r7
 8001742:	4619      	mov	r1, r3
 8001744:	4807      	ldr	r0, [pc, #28]	; (8001764 <MX_TIM4_Init+0x9c>)
 8001746:	f001 fbdb 	bl	8002f00 <HAL_TIMEx_MasterConfigSynchronization>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001750:	f000 f8b4 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001754:	4803      	ldr	r0, [pc, #12]	; (8001764 <MX_TIM4_Init+0x9c>)
 8001756:	f001 f895 	bl	8002884 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200001a8 	.word	0x200001a8
 8001768:	40000800 	.word	0x40000800

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <MX_GPIO_Init+0xfc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a38      	ldr	r2, [pc, #224]	; (8001868 <MX_GPIO_Init+0xfc>)
 8001786:	f043 0320 	orr.w	r3, r3, #32
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <MX_GPIO_Init+0xfc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <MX_GPIO_Init+0xfc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a32      	ldr	r2, [pc, #200]	; (8001868 <MX_GPIO_Init+0xfc>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b30      	ldr	r3, [pc, #192]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a2c      	ldr	r2, [pc, #176]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <MX_GPIO_Init+0xfc>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin
 80017c8:	2200      	movs	r2, #0
 80017ca:	f249 01ff 	movw	r1, #37119	; 0x90ff
 80017ce:	4827      	ldr	r0, [pc, #156]	; (800186c <MX_GPIO_Init+0x100>)
 80017d0:	f000 fc12 	bl	8001ff8 <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin|DP_Pin
                          |D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEY_C1_Pin|KEY_C2_Pin|KEY_C3_Pin|KEY_C4_Pin, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80017da:	4825      	ldr	r0, [pc, #148]	; (8001870 <MX_GPIO_Init+0x104>)
 80017dc:	f000 fc0c 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin|D5_Pin|D6_Pin
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80017e6:	4822      	ldr	r0, [pc, #136]	; (8001870 <MX_GPIO_Init+0x104>)
 80017e8:	f000 fc06 	bl	8001ff8 <HAL_GPIO_WritePin>
                          |D7_Pin|D8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin DP_Pin
                           D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 80017ec:	f249 03ff 	movw	r3, #37119	; 0x90ff
 80017f0:	613b      	str	r3, [r7, #16]
                          |E_Pin|F_Pin|G_Pin|DP_Pin
                          |D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	4619      	mov	r1, r3
 8001804:	4819      	ldr	r0, [pc, #100]	; (800186c <MX_GPIO_Init+0x100>)
 8001806:	f000 fa73 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_R4_Pin KEY_R3_Pin KEY_R2_Pin KEY_R1_Pin */
  GPIO_InitStruct.Pin = KEY_R4_Pin|KEY_R3_Pin|KEY_R2_Pin|KEY_R1_Pin;
 800180a:	f640 4303 	movw	r3, #3075	; 0xc03
 800180e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001814:	2301      	movs	r3, #1
 8001816:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	4814      	ldr	r0, [pc, #80]	; (8001870 <MX_GPIO_Init+0x104>)
 8001820:	f000 fa66 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_C1_Pin KEY_C2_Pin KEY_C3_Pin KEY_C4_Pin */
  GPIO_InitStruct.Pin = KEY_C1_Pin|KEY_C2_Pin|KEY_C3_Pin|KEY_C4_Pin;
 8001824:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800182a:	2311      	movs	r3, #17
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2302      	movs	r3, #2
 8001834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4619      	mov	r1, r3
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <MX_GPIO_Init+0x104>)
 800183e:	f000 fa57 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8001842:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001846:	613b      	str	r3, [r7, #16]
                          |D7_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2302      	movs	r3, #2
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_GPIO_Init+0x104>)
 800185c:	f000 fa48 	bl	8001cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	40010800 	.word	0x40010800
 8001870:	40010c00 	.word	0x40010c00

08001874 <HAL_IncTick>:

/* USER CODE BEGIN 4 */
void HAL_IncTick(void){
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]

  keyboard_tick(1);
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff fdcd 	bl	8001428 <keyboard_tick>
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000050 	.word	0x20000050
 8001898:	200001f0 	.word	0x200001f0

0800189c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_TIM_PeriodElapsedCallback+0x14>
		seven_segment_tick();
 80018ac:	f7fe ff62 	bl	8000774 <seven_segment_tick>
	}
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200001a8 	.word	0x200001a8

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_MspInit+0x5c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <HAL_MspInit+0x5c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_MspInit+0x5c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_MspInit+0x5c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_MspInit+0x60>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_MspInit+0x60>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000

0800192c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_TIM_Base_MspInit+0x44>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d113      	bne.n	8001966 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_TIM_Base_MspInit+0x48>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <HAL_TIM_Base_MspInit+0x48>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	61d3      	str	r3, [r2, #28]
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_TIM_Base_MspInit+0x48>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	201e      	movs	r0, #30
 800195c:	f000 f991 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001960:	201e      	movs	r0, #30
 8001962:	f000 f9aa 	bl	8001cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40000800 	.word	0x40000800
 8001974:	40021000 	.word	0x40021000

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800197c:	e7fe      	b.n	800197c <NMI_Handler+0x4>

0800197e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler+0x4>

0800198a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <UsageFault_Handler+0x4>

08001996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019be:	f7ff ff59 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TIM4_IRQHandler+0x10>)
 80019ce:	f000 ffab 	bl	8002928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200001a8 	.word	0x200001a8

080019dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e8:	f7ff fff8 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ee:	490c      	ldr	r1, [pc, #48]	; (8001a20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a04:	4c09      	ldr	r4, [pc, #36]	; (8001a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a12:	f001 faed 	bl	8002ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a16:	f7ff fdf5 	bl	8001604 <main>
  bx lr
 8001a1a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001a24:	08003088 	.word	0x08003088
  ldr r2, =_sbss
 8001a28:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001a2c:	200001f4 	.word	0x200001f4

08001a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC1_2_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_Init+0x28>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_Init+0x28>)
 8001a3e:	f043 0310 	orr.w	r3, r3, #16
 8001a42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 f911 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4a:	200f      	movs	r0, #15
 8001a4c:	f000 f808 	bl	8001a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a50:	f7ff ff3a 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40022000 	.word	0x40022000

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x54>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x58>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f929 	bl	8001cd6 <HAL_SYSTICK_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00e      	b.n	8001aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d80a      	bhi.n	8001aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 f8f1 	bl	8001c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_InitTick+0x5c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000048 	.word	0x20000048
 8001ab8:	20000050 	.word	0x20000050
 8001abc:	2000004c 	.word	0x2000004c

08001ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_GetTick+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	200001f0 	.word	0x200001f0

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4906      	ldr	r1, [pc, #24]	; (8001b6c <__NVIC_EnableIRQ+0x34>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f7ff ff90 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff2d 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff42 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff90 	bl	8001bc4 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5f 	bl	8001b70 <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff35 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffa2 	bl	8001c28 <SysTick_Config>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	e169      	b.n	8001fd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d04:	2201      	movs	r2, #1
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	f040 8158 	bne.w	8001fd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4a9a      	ldr	r2, [pc, #616]	; (8001f90 <HAL_GPIO_Init+0x2a0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d05e      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
 8001d2c:	4a98      	ldr	r2, [pc, #608]	; (8001f90 <HAL_GPIO_Init+0x2a0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d875      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d32:	4a98      	ldr	r2, [pc, #608]	; (8001f94 <HAL_GPIO_Init+0x2a4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d058      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
 8001d38:	4a96      	ldr	r2, [pc, #600]	; (8001f94 <HAL_GPIO_Init+0x2a4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d86f      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d3e:	4a96      	ldr	r2, [pc, #600]	; (8001f98 <HAL_GPIO_Init+0x2a8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d052      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
 8001d44:	4a94      	ldr	r2, [pc, #592]	; (8001f98 <HAL_GPIO_Init+0x2a8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d869      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d4a:	4a94      	ldr	r2, [pc, #592]	; (8001f9c <HAL_GPIO_Init+0x2ac>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d04c      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
 8001d50:	4a92      	ldr	r2, [pc, #584]	; (8001f9c <HAL_GPIO_Init+0x2ac>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d863      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d56:	4a92      	ldr	r2, [pc, #584]	; (8001fa0 <HAL_GPIO_Init+0x2b0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d046      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
 8001d5c:	4a90      	ldr	r2, [pc, #576]	; (8001fa0 <HAL_GPIO_Init+0x2b0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d85d      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d62:	2b12      	cmp	r3, #18
 8001d64:	d82a      	bhi.n	8001dbc <HAL_GPIO_Init+0xcc>
 8001d66:	2b12      	cmp	r3, #18
 8001d68:	d859      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d6a:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <HAL_GPIO_Init+0x80>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08001deb 	.word	0x08001deb
 8001d74:	08001dc5 	.word	0x08001dc5
 8001d78:	08001dd7 	.word	0x08001dd7
 8001d7c:	08001e19 	.word	0x08001e19
 8001d80:	08001e1f 	.word	0x08001e1f
 8001d84:	08001e1f 	.word	0x08001e1f
 8001d88:	08001e1f 	.word	0x08001e1f
 8001d8c:	08001e1f 	.word	0x08001e1f
 8001d90:	08001e1f 	.word	0x08001e1f
 8001d94:	08001e1f 	.word	0x08001e1f
 8001d98:	08001e1f 	.word	0x08001e1f
 8001d9c:	08001e1f 	.word	0x08001e1f
 8001da0:	08001e1f 	.word	0x08001e1f
 8001da4:	08001e1f 	.word	0x08001e1f
 8001da8:	08001e1f 	.word	0x08001e1f
 8001dac:	08001e1f 	.word	0x08001e1f
 8001db0:	08001e1f 	.word	0x08001e1f
 8001db4:	08001dcd 	.word	0x08001dcd
 8001db8:	08001de1 	.word	0x08001de1
 8001dbc:	4a79      	ldr	r2, [pc, #484]	; (8001fa4 <HAL_GPIO_Init+0x2b4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dc2:	e02c      	b.n	8001e1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e029      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e024      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	3308      	adds	r3, #8
 8001ddc:	623b      	str	r3, [r7, #32]
          break;
 8001dde:	e01f      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	330c      	adds	r3, #12
 8001de6:	623b      	str	r3, [r7, #32]
          break;
 8001de8:	e01a      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001df2:	2304      	movs	r3, #4
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e013      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e00:	2308      	movs	r3, #8
 8001e02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	611a      	str	r2, [r3, #16]
          break;
 8001e0a:	e009      	b.n	8001e20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	615a      	str	r2, [r3, #20]
          break;
 8001e16:	e003      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          break;
 8001e1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d801      	bhi.n	8001e2a <HAL_GPIO_Init+0x13a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	e001      	b.n	8001e2e <HAL_GPIO_Init+0x13e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2bff      	cmp	r3, #255	; 0xff
 8001e34:	d802      	bhi.n	8001e3c <HAL_GPIO_Init+0x14c>
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_Init+0x152>
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	3b08      	subs	r3, #8
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	210f      	movs	r1, #15
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	401a      	ands	r2, r3
 8001e54:	6a39      	ldr	r1, [r7, #32]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80b1 	beq.w	8001fd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e70:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <HAL_GPIO_Init+0x2b8>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a4c      	ldr	r2, [pc, #304]	; (8001fa8 <HAL_GPIO_Init+0x2b8>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <HAL_GPIO_Init+0x2b8>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e88:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_GPIO_Init+0x2bc>)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a40      	ldr	r2, [pc, #256]	; (8001fb0 <HAL_GPIO_Init+0x2c0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d013      	beq.n	8001edc <HAL_GPIO_Init+0x1ec>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3f      	ldr	r2, [pc, #252]	; (8001fb4 <HAL_GPIO_Init+0x2c4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00d      	beq.n	8001ed8 <HAL_GPIO_Init+0x1e8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3e      	ldr	r2, [pc, #248]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d007      	beq.n	8001ed4 <HAL_GPIO_Init+0x1e4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3d      	ldr	r2, [pc, #244]	; (8001fbc <HAL_GPIO_Init+0x2cc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_GPIO_Init+0x1e0>
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e006      	b.n	8001ede <HAL_GPIO_Init+0x1ee>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e004      	b.n	8001ede <HAL_GPIO_Init+0x1ee>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e002      	b.n	8001ede <HAL_GPIO_Init+0x1ee>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_GPIO_Init+0x1ee>
 8001edc:	2300      	movs	r3, #0
 8001ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee0:	f002 0203 	and.w	r2, r2, #3
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	4093      	lsls	r3, r2
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eee:	492f      	ldr	r1, [pc, #188]	; (8001fac <HAL_GPIO_Init+0x2bc>)
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f08:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	492c      	ldr	r1, [pc, #176]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4928      	ldr	r1, [pc, #160]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f30:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	4922      	ldr	r1, [pc, #136]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	491e      	ldr	r1, [pc, #120]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4918      	ldr	r1, [pc, #96]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4914      	ldr	r1, [pc, #80]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d021      	beq.n	8001fc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <HAL_GPIO_Init+0x2d0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	e021      	b.n	8001fd2 <HAL_GPIO_Init+0x2e2>
 8001f8e:	bf00      	nop
 8001f90:	10320000 	.word	0x10320000
 8001f94:	10310000 	.word	0x10310000
 8001f98:	10220000 	.word	0x10220000
 8001f9c:	10210000 	.word	0x10210000
 8001fa0:	10120000 	.word	0x10120000
 8001fa4:	10110000 	.word	0x10110000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40010800 	.word	0x40010800
 8001fb4:	40010c00 	.word	0x40010c00
 8001fb8:	40011000 	.word	0x40011000
 8001fbc:	40011400 	.word	0x40011400
 8001fc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_GPIO_Init+0x304>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	4909      	ldr	r1, [pc, #36]	; (8001ff4 <HAL_GPIO_Init+0x304>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f47f ae8e 	bne.w	8001d04 <HAL_GPIO_Init+0x14>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	372c      	adds	r7, #44	; 0x2c
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
 8002004:	4613      	mov	r3, r2
 8002006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002008:	787b      	ldrb	r3, [r7, #1]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002014:	e003      	b.n	800201e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	041a      	lsls	r2, r3, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	611a      	str	r2, [r3, #16]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e272      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8087 	beq.w	8002156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002048:	4b92      	ldr	r3, [pc, #584]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	d00c      	beq.n	800206e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002054:	4b8f      	ldr	r3, [pc, #572]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d112      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
 8002060:	4b8c      	ldr	r3, [pc, #560]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d10b      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206e:	4b89      	ldr	r3, [pc, #548]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06c      	beq.n	8002154 <HAL_RCC_OscConfig+0x12c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d168      	bne.n	8002154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e24c      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x76>
 8002090:	4b80      	ldr	r3, [pc, #512]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a7f      	ldr	r2, [pc, #508]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e02e      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b7b      	ldr	r3, [pc, #492]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7a      	ldr	r2, [pc, #488]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b78      	ldr	r3, [pc, #480]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a77      	ldr	r2, [pc, #476]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0xbc>
 80020ca:	4b72      	ldr	r3, [pc, #456]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a71      	ldr	r2, [pc, #452]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b6f      	ldr	r3, [pc, #444]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6e      	ldr	r2, [pc, #440]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 80020e4:	4b6b      	ldr	r3, [pc, #428]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a6a      	ldr	r2, [pc, #424]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b68      	ldr	r3, [pc, #416]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a67      	ldr	r2, [pc, #412]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fcdc 	bl	8001ac0 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff fcd8 	bl	8001ac0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e200      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xe4>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fcc8 	bl	8001ac0 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fcc4 	bl	8001ac0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1ec      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x10c>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d063      	beq.n	800222a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800216e:	4b49      	ldr	r3, [pc, #292]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x18c>
 800217a:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1c0      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4939      	ldr	r1, [pc, #228]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e03a      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff fc7d 	bl	8001ac0 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff fc79 	bl	8001ac0 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1a1      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4927      	ldr	r1, [pc, #156]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fc5c 	bl	8001ac0 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220c:	f7ff fc58 	bl	8001ac0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e180      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d03a      	beq.n	80022ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d019      	beq.n	8002272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7ff fc3c 	bl	8001ac0 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff fc38 	bl	8001ac0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e160      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800226a:	2001      	movs	r0, #1
 800226c:	f000 fa9c 	bl	80027a8 <RCC_Delay>
 8002270:	e01c      	b.n	80022ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7ff fc22 	bl	8001ac0 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227e:	e00f      	b.n	80022a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff fc1e 	bl	8001ac0 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d908      	bls.n	80022a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e146      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	42420000 	.word	0x42420000
 800229c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	4b92      	ldr	r3, [pc, #584]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e9      	bne.n	8002280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80a6 	beq.w	8002406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	4b8b      	ldr	r3, [pc, #556]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b88      	ldr	r3, [pc, #544]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a87      	ldr	r2, [pc, #540]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b85      	ldr	r3, [pc, #532]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b82      	ldr	r3, [pc, #520]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b7f      	ldr	r3, [pc, #508]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7e      	ldr	r2, [pc, #504]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7ff fbdf 	bl	8001ac0 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7ff fbdb 	bl	8001ac0 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	; 0x64
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e103      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x312>
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	e02d      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x334>
 8002342:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4a69      	ldr	r2, [pc, #420]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6213      	str	r3, [r2, #32]
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a66      	ldr	r2, [pc, #408]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	e01c      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b05      	cmp	r3, #5
 8002362:	d10c      	bne.n	800237e <HAL_RCC_OscConfig+0x356>
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a60      	ldr	r2, [pc, #384]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6213      	str	r3, [r2, #32]
 8002370:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
 800237c:	e00b      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a5a      	ldr	r2, [pc, #360]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	4b58      	ldr	r3, [pc, #352]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a57      	ldr	r2, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d015      	beq.n	80023ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7ff fb8f 	bl	8001ac0 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7ff fb8b 	bl	8001ac0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0b1      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ee      	beq.n	80023a6 <HAL_RCC_OscConfig+0x37e>
 80023c8:	e014      	b.n	80023f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7ff fb79 	bl	8001ac0 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7ff fb75 	bl	8001ac0 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e09b      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	4b40      	ldr	r3, [pc, #256]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ee      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8087 	beq.w	800251e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d061      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d146      	bne.n	80024b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff fb49 	bl	8001ac0 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff fb45 	bl	8001ac0 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e06d      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d108      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4921      	ldr	r1, [pc, #132]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a19      	ldr	r1, [r3, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	430b      	orrs	r3, r1
 800247e:	491b      	ldr	r1, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7ff fb19 	bl	8001ac0 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7ff fb15 	bl	8001ac0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e03d      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x46a>
 80024b0:	e035      	b.n	800251e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff fb02 	bl	8001ac0 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7ff fafe 	bl	8001ac0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e026      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x498>
 80024de:	e01e      	b.n	800251e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e019      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
 80024f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_OscConfig+0x500>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000

0800252c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d0      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4965      	ldr	r1, [pc, #404]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d040      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d115      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e073      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06b      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4936      	ldr	r1, [pc, #216]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7ff fa50 	bl	8001ac0 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7ff fa4c 	bl	8001ac0 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e053      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d210      	bcs.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	4922      	ldr	r1, [pc, #136]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 f821 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490a      	ldr	r1, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1cc>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff f9c0 	bl	8001a60 <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	0800305c 	.word	0x0800305c
 80026f8:	20000048 	.word	0x20000048
 80026fc:	2000004c 	.word	0x2000004c

08002700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800271a:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <HAL_RCC_GetSysClockFreq+0x94>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b04      	cmp	r3, #4
 8002728:	d002      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x30>
 800272a:	2b08      	cmp	r3, #8
 800272c:	d003      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0x36>
 800272e:	e027      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_GetSysClockFreq+0x98>)
 8002732:	613b      	str	r3, [r7, #16]
      break;
 8002734:	e027      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	0c9b      	lsrs	r3, r3, #18
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	4a17      	ldr	r2, [pc, #92]	; (800279c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002740:	5cd3      	ldrb	r3, [r2, r3]
 8002742:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d010      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_RCC_GetSysClockFreq+0x94>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0c5b      	lsrs	r3, r3, #17
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	4a11      	ldr	r2, [pc, #68]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <HAL_RCC_GetSysClockFreq+0x98>)
 8002762:	fb03 f202 	mul.w	r2, r3, r2
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	e004      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a0c      	ldr	r2, [pc, #48]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	613b      	str	r3, [r7, #16]
      break;
 800277e:	e002      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetSysClockFreq+0x98>)
 8002782:	613b      	str	r3, [r7, #16]
      break;
 8002784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002786:	693b      	ldr	r3, [r7, #16]
}
 8002788:	4618      	mov	r0, r3
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	007a1200 	.word	0x007a1200
 800279c:	0800306c 	.word	0x0800306c
 80027a0:	0800307c 	.word	0x0800307c
 80027a4:	003d0900 	.word	0x003d0900

080027a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <RCC_Delay+0x34>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <RCC_Delay+0x38>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0a5b      	lsrs	r3, r3, #9
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c4:	bf00      	nop
  }
  while (Delay --);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1e5a      	subs	r2, r3, #1
 80027ca:	60fa      	str	r2, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f9      	bne.n	80027c4 <RCC_Delay+0x1c>
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	20000048 	.word	0x20000048
 80027e0:	10624dd3 	.word	0x10624dd3

080027e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e041      	b.n	800287a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff f88e 	bl	800192c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f000 fa74 	bl	8002d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d001      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e03a      	b.n	8002912 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_TIM_Base_Start_IT+0x98>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00e      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x58>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c6:	d009      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x58>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <HAL_TIM_Base_Start_IT+0x9c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x58>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a13      	ldr	r2, [pc, #76]	; (8002924 <HAL_TIM_Base_Start_IT+0xa0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d010      	beq.n	8002910 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fe:	e007      	b.n	8002910 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800

08002928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d122      	bne.n	8002984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d11b      	bne.n	8002984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0202 	mvn.w	r2, #2
 8002954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f9b4 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f9a7 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f9b6 	bl	8002cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b04      	cmp	r3, #4
 8002990:	d122      	bne.n	80029d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b04      	cmp	r3, #4
 800299e:	d11b      	bne.n	80029d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0204 	mvn.w	r2, #4
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f98a 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f97d 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f98c 	bl	8002cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d122      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0208 	mvn.w	r2, #8
 80029fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2204      	movs	r2, #4
 8002a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f960 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f953 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f962 	bl	8002cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d122      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f936 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f929 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f938 	bl	8002cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0201 	mvn.w	r2, #1
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe fef8 	bl	800189c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b80      	cmp	r3, #128	; 0x80
 8002ac6:	d107      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fa7b 	bl	8002fce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d107      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8fc 	bl	8002cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d107      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0220 	mvn.w	r2, #32
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fa46 	bl	8002fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIM_ConfigClockSource+0x1c>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e0b4      	b.n	8002cbe <HAL_TIM_ConfigClockSource+0x186>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8c:	d03e      	beq.n	8002c0c <HAL_TIM_ConfigClockSource+0xd4>
 8002b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b92:	f200 8087 	bhi.w	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	f000 8086 	beq.w	8002caa <HAL_TIM_ConfigClockSource+0x172>
 8002b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba2:	d87f      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba4:	2b70      	cmp	r3, #112	; 0x70
 8002ba6:	d01a      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0xa6>
 8002ba8:	2b70      	cmp	r3, #112	; 0x70
 8002baa:	d87b      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bac:	2b60      	cmp	r3, #96	; 0x60
 8002bae:	d050      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x11a>
 8002bb0:	2b60      	cmp	r3, #96	; 0x60
 8002bb2:	d877      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb4:	2b50      	cmp	r3, #80	; 0x50
 8002bb6:	d03c      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0xfa>
 8002bb8:	2b50      	cmp	r3, #80	; 0x50
 8002bba:	d873      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	d058      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x13a>
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d86f      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b30      	cmp	r3, #48	; 0x30
 8002bc6:	d064      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15a>
 8002bc8:	2b30      	cmp	r3, #48	; 0x30
 8002bca:	d86b      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d060      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15a>
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d867      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d05c      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15a>
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d05a      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15a>
 8002bdc:	e062      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bee:	f000 f968 	bl	8002ec2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	609a      	str	r2, [r3, #8]
      break;
 8002c0a:	e04f      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c1c:	f000 f951 	bl	8002ec2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c2e:	609a      	str	r2, [r3, #8]
      break;
 8002c30:	e03c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f000 f8c8 	bl	8002dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2150      	movs	r1, #80	; 0x50
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f91f 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002c50:	e02c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f000 f8e6 	bl	8002e30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2160      	movs	r1, #96	; 0x60
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f90f 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002c70:	e01c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f000 f8a8 	bl	8002dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2140      	movs	r1, #64	; 0x40
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f8ff 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002c90:	e00c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f000 f8f6 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002ca2:	e003      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca8:	e000      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
	...

08002d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <TIM_Base_SetConfig+0xb8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00b      	beq.n	8002d40 <TIM_Base_SetConfig+0x30>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2e:	d007      	beq.n	8002d40 <TIM_Base_SetConfig+0x30>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <TIM_Base_SetConfig+0xbc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0x30>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <TIM_Base_SetConfig+0xc0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d108      	bne.n	8002d52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <TIM_Base_SetConfig+0xb8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <TIM_Base_SetConfig+0x62>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d007      	beq.n	8002d72 <TIM_Base_SetConfig+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <TIM_Base_SetConfig+0xbc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_Base_SetConfig+0x62>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <TIM_Base_SetConfig+0xc0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d108      	bne.n	8002d84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <TIM_Base_SetConfig+0xb8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d103      	bne.n	8002db8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	615a      	str	r2, [r3, #20]
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800

08002dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f023 0201 	bic.w	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 030a 	bic.w	r3, r3, #10
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f023 0210 	bic.w	r2, r3, #16
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	031b      	lsls	r3, r3, #12
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	621a      	str	r2, [r3, #32]
}
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f043 0307 	orr.w	r3, r3, #7
 8002eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b087      	sub	sp, #28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002edc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	021a      	lsls	r2, r3, #8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	609a      	str	r2, [r3, #8]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e046      	b.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d009      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d004      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10c      	bne.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800

08002fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <memset>:
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4402      	add	r2, r0
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d100      	bne.n	8002fea <memset+0xa>
 8002fe8:	4770      	bx	lr
 8002fea:	f803 1b01 	strb.w	r1, [r3], #1
 8002fee:	e7f9      	b.n	8002fe4 <memset+0x4>

08002ff0 <__libc_init_array>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	4d0c      	ldr	r5, [pc, #48]	; (8003028 <__libc_init_array+0x38>)
 8002ff6:	4c0d      	ldr	r4, [pc, #52]	; (800302c <__libc_init_array+0x3c>)
 8002ff8:	1b64      	subs	r4, r4, r5
 8002ffa:	10a4      	asrs	r4, r4, #2
 8002ffc:	42a6      	cmp	r6, r4
 8002ffe:	d109      	bne.n	8003014 <__libc_init_array+0x24>
 8003000:	f000 f81a 	bl	8003038 <_init>
 8003004:	2600      	movs	r6, #0
 8003006:	4d0a      	ldr	r5, [pc, #40]	; (8003030 <__libc_init_array+0x40>)
 8003008:	4c0a      	ldr	r4, [pc, #40]	; (8003034 <__libc_init_array+0x44>)
 800300a:	1b64      	subs	r4, r4, r5
 800300c:	10a4      	asrs	r4, r4, #2
 800300e:	42a6      	cmp	r6, r4
 8003010:	d105      	bne.n	800301e <__libc_init_array+0x2e>
 8003012:	bd70      	pop	{r4, r5, r6, pc}
 8003014:	f855 3b04 	ldr.w	r3, [r5], #4
 8003018:	4798      	blx	r3
 800301a:	3601      	adds	r6, #1
 800301c:	e7ee      	b.n	8002ffc <__libc_init_array+0xc>
 800301e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003022:	4798      	blx	r3
 8003024:	3601      	adds	r6, #1
 8003026:	e7f2      	b.n	800300e <__libc_init_array+0x1e>
 8003028:	08003080 	.word	0x08003080
 800302c:	08003080 	.word	0x08003080
 8003030:	08003080 	.word	0x08003080
 8003034:	08003084 	.word	0x08003084

08003038 <_init>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	bf00      	nop
 800303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303e:	bc08      	pop	{r3}
 8003040:	469e      	mov	lr, r3
 8003042:	4770      	bx	lr

08003044 <_fini>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	bf00      	nop
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr
