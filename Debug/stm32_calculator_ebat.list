
stm32_calculator_ebat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000251c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002628  08002628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002658  08002658  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002658  08002658  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002658  08002658  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002658  08002658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800265c  0800265c  0001265c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000058  080026b8  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080026b8  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bf8  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d17  00000000  00000000  00028cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002a9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ff  00000000  00000000  0002b458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016dba  00000000  00000000  0002bc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bda8  00000000  00000000  00042a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084b24  00000000  00000000  0004e7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ad4  00000000  00000000  000d32e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d5db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002610 	.word	0x08002610

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002610 	.word	0x08002610

0800014c <__gesf2>:
 800014c:	f04f 3cff 	mov.w	ip, #4294967295
 8000150:	e006      	b.n	8000160 <__cmpsf2+0x4>
 8000152:	bf00      	nop

08000154 <__lesf2>:
 8000154:	f04f 0c01 	mov.w	ip, #1
 8000158:	e002      	b.n	8000160 <__cmpsf2+0x4>
 800015a:	bf00      	nop

0800015c <__cmpsf2>:
 800015c:	f04f 0c01 	mov.w	ip, #1
 8000160:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000164:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000168:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800016c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000170:	bf18      	it	ne
 8000172:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000176:	d011      	beq.n	800019c <__cmpsf2+0x40>
 8000178:	b001      	add	sp, #4
 800017a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800017e:	bf18      	it	ne
 8000180:	ea90 0f01 	teqne	r0, r1
 8000184:	bf58      	it	pl
 8000186:	ebb2 0003 	subspl.w	r0, r2, r3
 800018a:	bf88      	it	hi
 800018c:	17c8      	asrhi	r0, r1, #31
 800018e:	bf38      	it	cc
 8000190:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000194:	bf18      	it	ne
 8000196:	f040 0001 	orrne.w	r0, r0, #1
 800019a:	4770      	bx	lr
 800019c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001a0:	d102      	bne.n	80001a8 <__cmpsf2+0x4c>
 80001a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80001a6:	d105      	bne.n	80001b4 <__cmpsf2+0x58>
 80001a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80001ac:	d1e4      	bne.n	8000178 <__cmpsf2+0x1c>
 80001ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80001b2:	d0e1      	beq.n	8000178 <__cmpsf2+0x1c>
 80001b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__aeabi_cfrcmple>:
 80001bc:	4684      	mov	ip, r0
 80001be:	4608      	mov	r0, r1
 80001c0:	4661      	mov	r1, ip
 80001c2:	e7ff      	b.n	80001c4 <__aeabi_cfcmpeq>

080001c4 <__aeabi_cfcmpeq>:
 80001c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80001c6:	f7ff ffc9 	bl	800015c <__cmpsf2>
 80001ca:	2800      	cmp	r0, #0
 80001cc:	bf48      	it	mi
 80001ce:	f110 0f00 	cmnmi.w	r0, #0
 80001d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001d4 <__aeabi_fcmpeq>:
 80001d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001d8:	f7ff fff4 	bl	80001c4 <__aeabi_cfcmpeq>
 80001dc:	bf0c      	ite	eq
 80001de:	2001      	moveq	r0, #1
 80001e0:	2000      	movne	r0, #0
 80001e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80001e6:	bf00      	nop

080001e8 <__aeabi_fcmplt>:
 80001e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001ec:	f7ff ffea 	bl	80001c4 <__aeabi_cfcmpeq>
 80001f0:	bf34      	ite	cc
 80001f2:	2001      	movcc	r0, #1
 80001f4:	2000      	movcs	r0, #0
 80001f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80001fa:	bf00      	nop

080001fc <__aeabi_fcmple>:
 80001fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000200:	f7ff ffe0 	bl	80001c4 <__aeabi_cfcmpeq>
 8000204:	bf94      	ite	ls
 8000206:	2001      	movls	r0, #1
 8000208:	2000      	movhi	r0, #0
 800020a:	f85d fb08 	ldr.w	pc, [sp], #8
 800020e:	bf00      	nop

08000210 <__aeabi_fcmpge>:
 8000210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000214:	f7ff ffd2 	bl	80001bc <__aeabi_cfrcmple>
 8000218:	bf94      	ite	ls
 800021a:	2001      	movls	r0, #1
 800021c:	2000      	movhi	r0, #0
 800021e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000222:	bf00      	nop

08000224 <__aeabi_fcmpgt>:
 8000224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000228:	f7ff ffc8 	bl	80001bc <__aeabi_cfrcmple>
 800022c:	bf34      	ite	cc
 800022e:	2001      	movcc	r0, #1
 8000230:	2000      	movcs	r0, #0
 8000232:	f85d fb08 	ldr.w	pc, [sp], #8
 8000236:	bf00      	nop

08000238 <seven_segment_init>:
	uint8_t symbol;
} digit[DIGITS_COUNT] = {0};

uint8_t digit_current_index = 0;

void seven_segment_init(void){
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < DIGITS_COUNT; i++){
 800023e:	2300      	movs	r3, #0
 8000240:	71fb      	strb	r3, [r7, #7]
 8000242:	e00d      	b.n	8000260 <seven_segment_init+0x28>
		digit[i].enabled = false;
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <seven_segment_init+0x3c>)
 8000248:	2100      	movs	r1, #0
 800024a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		digit[i].symbol = 0;
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	4a08      	ldr	r2, [pc, #32]	; (8000274 <seven_segment_init+0x3c>)
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	4413      	add	r3, r2
 8000256:	2200      	movs	r2, #0
 8000258:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 0; i < DIGITS_COUNT; i++){
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	3301      	adds	r3, #1
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b07      	cmp	r3, #7
 8000264:	d9ee      	bls.n	8000244 <seven_segment_init+0xc>
	}
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000074 	.word	0x20000074

08000278 <seven_segment_tick>:

void seven_segment_tick(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	/* Disable current digit */
	HAL_GPIO_WritePin(digit_hw[digit_current_index].GPIOx, digit_hw[digit_current_index].GPIO_Pin, RESET);
 800027c:	4b23      	ldr	r3, [pc, #140]	; (800030c <seven_segment_tick+0x94>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	4b23      	ldr	r3, [pc, #140]	; (8000310 <seven_segment_tick+0x98>)
 8000284:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000288:	4b20      	ldr	r3, [pc, #128]	; (800030c <seven_segment_tick+0x94>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	4a20      	ldr	r2, [pc, #128]	; (8000310 <seven_segment_tick+0x98>)
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	4413      	add	r3, r2
 8000292:	889b      	ldrh	r3, [r3, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	4619      	mov	r1, r3
 8000298:	f001 f99a 	bl	80015d0 <HAL_GPIO_WritePin>
	digit_current_index++;
 800029c:	4b1b      	ldr	r3, [pc, #108]	; (800030c <seven_segment_tick+0x94>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b19      	ldr	r3, [pc, #100]	; (800030c <seven_segment_tick+0x94>)
 80002a6:	701a      	strb	r2, [r3, #0]
	if(digit_current_index >= DIGITS_COUNT){
 80002a8:	4b18      	ldr	r3, [pc, #96]	; (800030c <seven_segment_tick+0x94>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b07      	cmp	r3, #7
 80002ae:	d902      	bls.n	80002b6 <seven_segment_tick+0x3e>
		digit_current_index = 0;
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <seven_segment_tick+0x94>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
	}

	/* Clear segments pins */
	GPIOA->ODR |= A_Pin|B_Pin|C_Pin|D_Pin|E_Pin|F_Pin|G_Pin|DP_Pin;
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <seven_segment_tick+0x9c>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a16      	ldr	r2, [pc, #88]	; (8000314 <seven_segment_tick+0x9c>)
 80002bc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80002c0:	60d3      	str	r3, [r2, #12]

	/* Set code for next digit on segments port */
	if(digit[digit_current_index].enabled){
 80002c2:	4b12      	ldr	r3, [pc, #72]	; (800030c <seven_segment_tick+0x94>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	461a      	mov	r2, r3
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <seven_segment_tick+0xa0>)
 80002ca:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d00a      	beq.n	80002e8 <seven_segment_tick+0x70>
		GPIOA->ODR ^= digit[digit_current_index].symbol & (A_Pin|B_Pin|C_Pin|D_Pin|E_Pin|F_Pin|G_Pin|DP_Pin);
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <seven_segment_tick+0x9c>)
 80002d4:	68da      	ldr	r2, [r3, #12]
 80002d6:	4b0d      	ldr	r3, [pc, #52]	; (800030c <seven_segment_tick+0x94>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	490f      	ldr	r1, [pc, #60]	; (8000318 <seven_segment_tick+0xa0>)
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	440b      	add	r3, r1
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	490c      	ldr	r1, [pc, #48]	; (8000314 <seven_segment_tick+0x9c>)
 80002e4:	4053      	eors	r3, r2
 80002e6:	60cb      	str	r3, [r1, #12]
	}

	/* Enable current digit */
	HAL_GPIO_WritePin(digit_hw[digit_current_index].GPIOx, digit_hw[digit_current_index].GPIO_Pin, SET);
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <seven_segment_tick+0x94>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	461a      	mov	r2, r3
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <seven_segment_tick+0x98>)
 80002f0:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <seven_segment_tick+0x94>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <seven_segment_tick+0x98>)
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	4413      	add	r3, r2
 80002fe:	889b      	ldrh	r3, [r3, #4]
 8000300:	2201      	movs	r2, #1
 8000302:	4619      	mov	r1, r3
 8000304:	f001 f964 	bl	80015d0 <HAL_GPIO_WritePin>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000084 	.word	0x20000084
 8000310:	20000000 	.word	0x20000000
 8000314:	40010800 	.word	0x40010800
 8000318:	20000074 	.word	0x20000074

0800031c <seven_segment_enable>:

void seven_segment_enable(uint8_t index, bool state){
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	460a      	mov	r2, r1
 8000326:	71fb      	strb	r3, [r7, #7]
 8000328:	4613      	mov	r3, r2
 800032a:	71bb      	strb	r3, [r7, #6]
	digit[index].enabled = state;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	4904      	ldr	r1, [pc, #16]	; (8000340 <seven_segment_enable+0x24>)
 8000330:	79ba      	ldrb	r2, [r7, #6]
 8000332:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	20000074 	.word	0x20000074

08000344 <seven_segment_set_number>:

bool seven_segment_get_dot(uint8_t index){
	return (digit[index].symbol & 0x80)?(true):(false);
}

void seven_segment_set_number(uint8_t index, uint8_t number){
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	460a      	mov	r2, r1
 800034e:	71fb      	strb	r3, [r7, #7]
 8000350:	4613      	mov	r3, r2
 8000352:	71bb      	strb	r3, [r7, #6]
	if(number > 9){
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	2b09      	cmp	r3, #9
 8000358:	d901      	bls.n	800035e <seven_segment_set_number+0x1a>
		number = 9;
 800035a:	2309      	movs	r3, #9
 800035c:	71bb      	strb	r3, [r7, #6]
	}

	digit[index].symbol = digits[number];
 800035e:	79ba      	ldrb	r2, [r7, #6]
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	4906      	ldr	r1, [pc, #24]	; (800037c <seven_segment_set_number+0x38>)
 8000364:	5c89      	ldrb	r1, [r1, r2]
 8000366:	4a06      	ldr	r2, [pc, #24]	; (8000380 <seven_segment_set_number+0x3c>)
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	4413      	add	r3, r2
 800036c:	460a      	mov	r2, r1
 800036e:	705a      	strb	r2, [r3, #1]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	08002628 	.word	0x08002628
 8000380:	20000074 	.word	0x20000074

08000384 <BTN_Init>:
#include "button.h"
#include "button_port.h"

void BTN_Init(button_t *button, uint16_t id, uint16_t debounce_ms, uint16_t long_press_ms){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	4608      	mov	r0, r1
 800038e:	4611      	mov	r1, r2
 8000390:	461a      	mov	r2, r3
 8000392:	4603      	mov	r3, r0
 8000394:	817b      	strh	r3, [r7, #10]
 8000396:	460b      	mov	r3, r1
 8000398:	813b      	strh	r3, [r7, #8]
 800039a:	4613      	mov	r3, r2
 800039c:	80fb      	strh	r3, [r7, #6]
    button->id = id;
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	897a      	ldrh	r2, [r7, #10]
 80003a2:	801a      	strh	r2, [r3, #0]
    button->long_press_ms = long_press_ms;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	88fa      	ldrh	r2, [r7, #6]
 80003a8:	80da      	strh	r2, [r3, #6]
    button->debounce_ms = debounce_ms;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	893a      	ldrh	r2, [r7, #8]
 80003ae:	809a      	strh	r2, [r3, #4]
    button->status = BTN_IDLE;
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	2200      	movs	r2, #0
 80003b4:	70da      	strb	r2, [r3, #3]
    button->timer = 0;
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]

    /* Set initial button state */
    button->pressed = BTN_PL_Read(button->id);
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f8e1 	bl	8000588 <BTN_PL_Read>
 80003c6:	4603      	mov	r3, r0
 80003c8:	461a      	mov	r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	709a      	strb	r2, [r3, #2]
}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <BTN_Main>:

void BTN_Main(button_t *button){
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b084      	sub	sp, #16
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
    bool state;

    switch(button->status){
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	78db      	ldrb	r3, [r3, #3]
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	d05f      	beq.n	80004a6 <BTN_Main+0xd0>
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	f300 8096 	bgt.w	8000518 <BTN_Main+0x142>
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d002      	beq.n	80003f6 <BTN_Main+0x20>
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d01b      	beq.n	800042c <BTN_Main+0x56>
 80003f4:	e090      	b.n	8000518 <BTN_Main+0x142>
        case BTN_IDLE:
            if(button->timer){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <BTN_Main+0x14a>
                return;
            }

            state = BTN_PL_Read(button->id);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f000 f8bf 	bl	8000588 <BTN_PL_Read>
 800040a:	4603      	mov	r3, r0
 800040c:	73fb      	strb	r3, [r7, #15]
            if(state != button->pressed){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	789b      	ldrb	r3, [r3, #2]
 8000412:	7bfa      	ldrb	r2, [r7, #15]
 8000414:	429a      	cmp	r2, r3
 8000416:	f000 8085 	beq.w	8000524 <BTN_Main+0x14e>
                button->status = BTN_DEBOUNCE;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	70da      	strb	r2, [r3, #3]
                button->timer = button->debounce_ms;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	889b      	ldrh	r3, [r3, #4]
 8000424:	461a      	mov	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	609a      	str	r2, [r3, #8]
            }
            break;
 800042a:	e07b      	b.n	8000524 <BTN_Main+0x14e>

        case BTN_DEBOUNCE:
            if(button->timer){
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d179      	bne.n	8000528 <BTN_Main+0x152>
                return;
            }

            state = BTN_PL_Read(button->id);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f000 f8a5 	bl	8000588 <BTN_PL_Read>
 800043e:	4603      	mov	r3, r0
 8000440:	73fb      	strb	r3, [r7, #15]
            if(state != button->pressed){
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	789b      	ldrb	r3, [r3, #2]
 8000446:	7bfa      	ldrb	r2, [r7, #15]
 8000448:	429a      	cmp	r2, r3
 800044a:	d023      	beq.n	8000494 <BTN_Main+0xbe>
                button->pressed = state;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	7bfa      	ldrb	r2, [r7, #15]
 8000450:	709a      	strb	r2, [r3, #2]

                if(state){
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d008      	beq.n	800046a <BTN_Main+0x94>
                    button->status = BTN_WAIT_LONG_PRESS;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2202      	movs	r2, #2
 800045c:	70da      	strb	r2, [r3, #3]
                    button->timer = button->long_press_ms;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	88db      	ldrh	r3, [r3, #6]
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	e007      	b.n	800047a <BTN_Main+0xa4>
                }
                else{
                    button->status = BTN_IDLE;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2200      	movs	r2, #0
 800046e:	70da      	strb	r2, [r3, #3]
                    button->timer = button->debounce_ms;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	889b      	ldrh	r3, [r3, #4]
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	609a      	str	r2, [r3, #8]
                }

                if(button->callback){
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d054      	beq.n	800052c <BTN_Main+0x156>
                    button->callback(button->id, BTN_STATE_UPDATED);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	8812      	ldrh	r2, [r2, #0]
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	2100      	movs	r1, #0
 800048e:	4610      	mov	r0, r2
 8000490:	4798      	blx	r3
            }
            else{
                button->status = BTN_IDLE;
                button->timer = button->debounce_ms;
            }
            break;
 8000492:	e04b      	b.n	800052c <BTN_Main+0x156>
                button->status = BTN_IDLE;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2200      	movs	r2, #0
 8000498:	70da      	strb	r2, [r3, #3]
                button->timer = button->debounce_ms;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	889b      	ldrh	r3, [r3, #4]
 800049e:	461a      	mov	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	609a      	str	r2, [r3, #8]
            break;
 80004a4:	e042      	b.n	800052c <BTN_Main+0x156>

        case BTN_WAIT_LONG_PRESS:
            state = BTN_PL_Read(button->id);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f86c 	bl	8000588 <BTN_PL_Read>
 80004b0:	4603      	mov	r3, r0
 80004b2:	73fb      	strb	r3, [r7, #15]

            /* Check if button is still pressed */
            if(state != button->pressed){
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	789b      	ldrb	r3, [r3, #2]
 80004b8:	7bfa      	ldrb	r2, [r7, #15]
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d014      	beq.n	80004e8 <BTN_Main+0x112>
                button->status = BTN_DEBOUNCE;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	70da      	strb	r2, [r3, #3]
                button->timer = button->debounce_ms;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	889b      	ldrh	r3, [r3, #4]
 80004c8:	461a      	mov	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	609a      	str	r2, [r3, #8]

                if(button->callback){
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d02c      	beq.n	8000530 <BTN_Main+0x15a>
                    button->callback(button->id, BTN_SHORT_PRESS);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	8812      	ldrh	r2, [r2, #0]
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	2101      	movs	r1, #1
 80004e2:	4610      	mov	r0, r2
 80004e4:	4798      	blx	r3
                }
                break;
 80004e6:	e023      	b.n	8000530 <BTN_Main+0x15a>
            }

            if((button->timer == 0) && (button->long_press_ms > 0)){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d121      	bne.n	8000534 <BTN_Main+0x15e>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	88db      	ldrh	r3, [r3, #6]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d01d      	beq.n	8000534 <BTN_Main+0x15e>
                button->status = BTN_IDLE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	70da      	strb	r2, [r3, #3]

                if(button->callback){
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d016      	beq.n	8000534 <BTN_Main+0x15e>
                    button->callback(button->id, BTN_LONG_PRESS);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	8812      	ldrh	r2, [r2, #0]
 800050e:	b2d2      	uxtb	r2, r2
 8000510:	2102      	movs	r1, #2
 8000512:	4610      	mov	r0, r2
 8000514:	4798      	blx	r3
                }
            }
            break;
 8000516:	e00d      	b.n	8000534 <BTN_Main+0x15e>

        default:
            button->status = BTN_IDLE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	70da      	strb	r2, [r3, #3]
            break;
 800051e:	e00a      	b.n	8000536 <BTN_Main+0x160>
                return;
 8000520:	bf00      	nop
 8000522:	e008      	b.n	8000536 <BTN_Main+0x160>
            break;
 8000524:	bf00      	nop
 8000526:	e006      	b.n	8000536 <BTN_Main+0x160>
                return;
 8000528:	bf00      	nop
 800052a:	e004      	b.n	8000536 <BTN_Main+0x160>
            break;
 800052c:	bf00      	nop
 800052e:	e002      	b.n	8000536 <BTN_Main+0x160>
                break;
 8000530:	bf00      	nop
 8000532:	e000      	b.n	8000536 <BTN_Main+0x160>
            break;
 8000534:	bf00      	nop
    }
}
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <BTN_Tick>:

void BTN_Tick(button_t *button, uint32_t period){
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
    if(button->timer > period){
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	429a      	cmp	r2, r3
 800054e:	d206      	bcs.n	800055e <BTN_Tick+0x22>
        button->timer -= period;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689a      	ldr	r2, [r3, #8]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	1ad2      	subs	r2, r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	609a      	str	r2, [r3, #8]
    }
    else{
        button->timer = 0;
    }
}
 800055c:	e002      	b.n	8000564 <BTN_Tick+0x28>
        button->timer = 0;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <BTN_RegisterCallback>:
bool BTN_IsPressed(button_t *button){
    return button->pressed;
}

/* Callback register */
void BTN_RegisterCallback(button_t *button, void (*callback)(uint8_t button_id, button_callback_event_t event)){
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	6039      	str	r1, [r7, #0]
    button->callback = callback;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	683a      	ldr	r2, [r7, #0]
 800057c:	60da      	str	r2, [r3, #12]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <BTN_PL_Read>:

void BTN_PL_Init(uint16_t id){
	buttons_state = 0;	/* All buttons is not pressed */
}

bool BTN_PL_Read(uint16_t id){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
    switch(id){
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	f200 80d4 	bhi.w	8000742 <BTN_PL_Read+0x1ba>
 800059a:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <BTN_PL_Read+0x18>)
 800059c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a0:	080005e1 	.word	0x080005e1
 80005a4:	080005f5 	.word	0x080005f5
 80005a8:	0800060b 	.word	0x0800060b
 80005ac:	08000621 	.word	0x08000621
 80005b0:	08000637 	.word	0x08000637
 80005b4:	0800064d 	.word	0x0800064d
 80005b8:	08000663 	.word	0x08000663
 80005bc:	08000679 	.word	0x08000679
 80005c0:	0800068f 	.word	0x0800068f
 80005c4:	080006a5 	.word	0x080006a5
 80005c8:	080006bb 	.word	0x080006bb
 80005cc:	080006d1 	.word	0x080006d1
 80005d0:	080006e7 	.word	0x080006e7
 80005d4:	080006fd 	.word	0x080006fd
 80005d8:	08000713 	.word	0x08000713
 80005dc:	08000729 	.word	0x08000729
        case BTN_0_ID: return (buttons_state & BTN_0_MASK)?(true):(false);
 80005e0:	4b5b      	ldr	r3, [pc, #364]	; (8000750 <BTN_PL_Read+0x1c8>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	e0a7      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_1_ID: return (buttons_state & BTN_1_MASK)?(true):(false);
 80005f4:	4b56      	ldr	r3, [pc, #344]	; (8000750 <BTN_PL_Read+0x1c8>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	105b      	asrs	r3, r3, #1
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bf14      	ite	ne
 8000602:	2301      	movne	r3, #1
 8000604:	2300      	moveq	r3, #0
 8000606:	b2db      	uxtb	r3, r3
 8000608:	e09c      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_2_ID: return (buttons_state & BTN_2_MASK)?(true):(false);
 800060a:	4b51      	ldr	r3, [pc, #324]	; (8000750 <BTN_PL_Read+0x1c8>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	115b      	asrs	r3, r3, #5
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf14      	ite	ne
 8000618:	2301      	movne	r3, #1
 800061a:	2300      	moveq	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	e091      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_3_ID: return (buttons_state & BTN_3_MASK)?(true):(false);
 8000620:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <BTN_PL_Read+0x1c8>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	125b      	asrs	r3, r3, #9
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	2b00      	cmp	r3, #0
 800062c:	bf14      	ite	ne
 800062e:	2301      	movne	r3, #1
 8000630:	2300      	moveq	r3, #0
 8000632:	b2db      	uxtb	r3, r3
 8000634:	e086      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_4_ID: return (buttons_state & BTN_4_MASK)?(true):(false);
 8000636:	4b46      	ldr	r3, [pc, #280]	; (8000750 <BTN_PL_Read+0x1c8>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	109b      	asrs	r3, r3, #2
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf14      	ite	ne
 8000644:	2301      	movne	r3, #1
 8000646:	2300      	moveq	r3, #0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	e07b      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_5_ID: return (buttons_state & BTN_5_MASK)?(true):(false);
 800064c:	4b40      	ldr	r3, [pc, #256]	; (8000750 <BTN_PL_Read+0x1c8>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	119b      	asrs	r3, r3, #6
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	e070      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_6_ID: return (buttons_state & BTN_6_MASK)?(true):(false);
 8000662:	4b3b      	ldr	r3, [pc, #236]	; (8000750 <BTN_PL_Read+0x1c8>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	129b      	asrs	r3, r3, #10
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	2b00      	cmp	r3, #0
 800066e:	bf14      	ite	ne
 8000670:	2301      	movne	r3, #1
 8000672:	2300      	moveq	r3, #0
 8000674:	b2db      	uxtb	r3, r3
 8000676:	e065      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_7_ID: return (buttons_state & BTN_7_MASK)?(true):(false);
 8000678:	4b35      	ldr	r3, [pc, #212]	; (8000750 <BTN_PL_Read+0x1c8>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	10db      	asrs	r3, r3, #3
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf14      	ite	ne
 8000686:	2301      	movne	r3, #1
 8000688:	2300      	moveq	r3, #0
 800068a:	b2db      	uxtb	r3, r3
 800068c:	e05a      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_8_ID: return (buttons_state & BTN_8_MASK)?(true):(false);
 800068e:	4b30      	ldr	r3, [pc, #192]	; (8000750 <BTN_PL_Read+0x1c8>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	11db      	asrs	r3, r3, #7
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	bf14      	ite	ne
 800069c:	2301      	movne	r3, #1
 800069e:	2300      	moveq	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	e04f      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_9_ID: return (buttons_state & BTN_9_MASK)?(true):(false);
 80006a4:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <BTN_PL_Read+0x1c8>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	12db      	asrs	r3, r3, #11
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	bf14      	ite	ne
 80006b2:	2301      	movne	r3, #1
 80006b4:	2300      	moveq	r3, #0
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	e044      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_DOT_ID: return (buttons_state & BTN_DOT_MASK)?(true):(false);
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <BTN_PL_Read+0x1c8>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	111b      	asrs	r3, r3, #4
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	bf14      	ite	ne
 80006c8:	2301      	movne	r3, #1
 80006ca:	2300      	moveq	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	e039      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_EQUAL_ID: return (buttons_state & BTN_EQUAL_MASK)?(true):(false);
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <BTN_PL_Read+0x1c8>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	121b      	asrs	r3, r3, #8
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	e02e      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_ADD_ID: return (buttons_state & BTN_ADD_MASK)?(true):(false);
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <BTN_PL_Read+0x1c8>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	131b      	asrs	r3, r3, #12
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	bf14      	ite	ne
 80006f4:	2301      	movne	r3, #1
 80006f6:	2300      	moveq	r3, #0
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	e023      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_SUBSTRACT_ID: return (buttons_state & BTN_SUBSTRACT_MASK)?(true):(false);
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <BTN_PL_Read+0x1c8>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	135b      	asrs	r3, r3, #13
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	e018      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_MULTIPLY_ID: return (buttons_state & BTN_MULTIPLY_MASK)?(true):(false);
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <BTN_PL_Read+0x1c8>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	139b      	asrs	r3, r3, #14
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf14      	ite	ne
 8000720:	2301      	movne	r3, #1
 8000722:	2300      	moveq	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	e00d      	b.n	8000744 <BTN_PL_Read+0x1bc>
        case BTN_DIVIDE_ID: return (buttons_state & BTN_DIVIDE_MASK)?(true):(false);
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <BTN_PL_Read+0x1c8>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	b21b      	sxth	r3, r3
 800072e:	13db      	asrs	r3, r3, #15
 8000730:	b21b      	sxth	r3, r3
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	2b00      	cmp	r3, #0
 8000738:	bf14      	ite	ne
 800073a:	2301      	movne	r3, #1
 800073c:	2300      	moveq	r3, #0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	e000      	b.n	8000744 <BTN_PL_Read+0x1bc>
        default:
            return false;
 8000742:	2300      	movs	r3, #0
    }

    return false;
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000086 	.word	0x20000086

08000754 <calculator_init>:
bool show_result = true;
bool update = false;

static void number_set_zero(calc_number_t *number);

void calculator_init(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	number_set_zero(&display);
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <calculator_init+0x24>)
 800075a:	f000 f8ef 	bl	800093c <number_set_zero>
	result = 0;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <calculator_init+0x28>)
 8000760:	f04f 0200 	mov.w	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
	operation = CALC_OP_NONE;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <calculator_init+0x2c>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
	update = true;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <calculator_init+0x30>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000088 	.word	0x20000088
 800077c:	20000098 	.word	0x20000098
 8000780:	2000009c 	.word	0x2000009c
 8000784:	2000009d 	.word	0x2000009d

08000788 <calculator_main>:

void calculator_main(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
	if(update){
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <calculator_main+0x68>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d027      	beq.n	80007e6 <calculator_main+0x5e>
		update = false;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <calculator_main+0x68>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]

		/* Disable all segments */
		for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 800079c:	2300      	movs	r3, #0
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	e007      	b.n	80007b2 <calculator_main+0x2a>
			seven_segment_enable(seg, false);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fdb8 	bl	800031c <seven_segment_enable>
		for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	3301      	adds	r3, #1
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b07      	cmp	r3, #7
 80007b6:	d9f4      	bls.n	80007a2 <calculator_main+0x1a>
		}

		/* Show numbers */
		if(show_result){
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <calculator_main+0x6c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d012      	beq.n	80007e6 <calculator_main+0x5e>
			if(result == 0){
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <calculator_main+0x70>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd03 	bl	80001d4 <__aeabi_fcmpeq>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d100      	bne.n	80007d6 <calculator_main+0x4e>
				seven_segment_enable(0, true);
				seven_segment_set_number(0, 0);
			}
		}
	}
}
 80007d4:	e007      	b.n	80007e6 <calculator_main+0x5e>
				seven_segment_enable(0, true);
 80007d6:	2101      	movs	r1, #1
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff fd9f 	bl	800031c <seven_segment_enable>
				seven_segment_set_number(0, 0);
 80007de:	2100      	movs	r1, #0
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff fdaf 	bl	8000344 <seven_segment_set_number>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000009d 	.word	0x2000009d
 80007f4:	20000040 	.word	0x20000040
 80007f8:	20000098 	.word	0x20000098

080007fc <keyboard_callback>:

void keyboard_callback(keyboard_key_id key, keyboard_event_id event){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	460a      	mov	r2, r1
 8000806:	71fb      	strb	r3, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	71bb      	strb	r3, [r7, #6]
	if(event == KEY_SHORT_PRESS){
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d168      	bne.n	80008e4 <keyboard_callback+0xe8>
		switch(key){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	3b0a      	subs	r3, #10
 8000816:	2b05      	cmp	r3, #5
 8000818:	d81d      	bhi.n	8000856 <keyboard_callback+0x5a>
 800081a:	a201      	add	r2, pc, #4	; (adr r2, 8000820 <keyboard_callback+0x24>)
 800081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000820:	08000839 	.word	0x08000839
 8000824:	08000915 	.word	0x08000915
 8000828:	08000915 	.word	0x08000915
 800082c:	08000915 	.word	0x08000915
 8000830:	08000915 	.word	0x08000915
 8000834:	08000915 	.word	0x08000915
			case KEY_DOT_ID:
				if(display.fraction_digits){
 8000838:	4b3b      	ldr	r3, [pc, #236]	; (8000928 <keyboard_callback+0x12c>)
 800083a:	7b1b      	ldrb	r3, [r3, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d006      	beq.n	800084e <keyboard_callback+0x52>
					display.fraction_digits++;
 8000840:	4b39      	ldr	r3, [pc, #228]	; (8000928 <keyboard_callback+0x12c>)
 8000842:	7b1b      	ldrb	r3, [r3, #12]
 8000844:	3301      	adds	r3, #1
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b37      	ldr	r3, [pc, #220]	; (8000928 <keyboard_callback+0x12c>)
 800084a:	731a      	strb	r2, [r3, #12]
				}
				else{
					display.fraction_digits = 1;
				}
				break;
 800084c:	e063      	b.n	8000916 <keyboard_callback+0x11a>
					display.fraction_digits = 1;
 800084e:	4b36      	ldr	r3, [pc, #216]	; (8000928 <keyboard_callback+0x12c>)
 8000850:	2201      	movs	r2, #1
 8000852:	731a      	strb	r2, [r3, #12]
				break;
 8000854:	e05f      	b.n	8000916 <keyboard_callback+0x11a>

			case KEY_DIVIDE_ID:
				break;

			default:
				if(show_result){
 8000856:	4b35      	ldr	r3, [pc, #212]	; (800092c <keyboard_callback+0x130>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d009      	beq.n	8000872 <keyboard_callback+0x76>
					show_result = false;
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <keyboard_callback+0x130>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]

					/* Set-up display number */
					number_set_zero(&display);
 8000864:	4830      	ldr	r0, [pc, #192]	; (8000928 <keyboard_callback+0x12c>)
 8000866:	f000 f869 	bl	800093c <number_set_zero>
					display.absolute = key;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <keyboard_callback+0x12c>)
 800086e:	6013      	str	r3, [r2, #0]
						display.absolute *= 10;
						display.absolute += key;
						display.absolute_digits++;
					}
				}
				return;
 8000870:	e055      	b.n	800091e <keyboard_callback+0x122>
					if(display.fraction_digits){
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <keyboard_callback+0x12c>)
 8000874:	7b1b      	ldrb	r3, [r3, #12]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d01a      	beq.n	80008b0 <keyboard_callback+0xb4>
						if(display.fraction){
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <keyboard_callback+0x12c>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d00f      	beq.n	80008a2 <keyboard_callback+0xa6>
							display.fraction *= 10;
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <keyboard_callback+0x12c>)
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	461a      	mov	r2, r3
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <keyboard_callback+0x12c>)
 8000892:	609a      	str	r2, [r3, #8]
							display.fraction += key;
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <keyboard_callback+0x12c>)
 8000896:	689a      	ldr	r2, [r3, #8]
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4413      	add	r3, r2
 800089c:	4a22      	ldr	r2, [pc, #136]	; (8000928 <keyboard_callback+0x12c>)
 800089e:	6093      	str	r3, [r2, #8]
				return;
 80008a0:	e03d      	b.n	800091e <keyboard_callback+0x122>
							display.fraction += key;
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <keyboard_callback+0x12c>)
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a1f      	ldr	r2, [pc, #124]	; (8000928 <keyboard_callback+0x12c>)
 80008ac:	6093      	str	r3, [r2, #8]
				return;
 80008ae:	e036      	b.n	800091e <keyboard_callback+0x122>
					else if(display.absolute_digits < DIGITS_COUNT){
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <keyboard_callback+0x12c>)
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	2b07      	cmp	r3, #7
 80008b6:	d832      	bhi.n	800091e <keyboard_callback+0x122>
						display.absolute *= 10;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <keyboard_callback+0x12c>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4613      	mov	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <keyboard_callback+0x12c>)
 80008c8:	601a      	str	r2, [r3, #0]
						display.absolute += key;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <keyboard_callback+0x12c>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <keyboard_callback+0x12c>)
 80008d4:	6013      	str	r3, [r2, #0]
						display.absolute_digits++;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <keyboard_callback+0x12c>)
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	3301      	adds	r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <keyboard_callback+0x12c>)
 80008e0:	711a      	strb	r2, [r3, #4]
				return;
 80008e2:	e01c      	b.n	800091e <keyboard_callback+0x122>
		}
	}
	else if(event == KEY_LONG_PRESS){
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	2b08      	cmp	r3, #8
 80008e8:	d115      	bne.n	8000916 <keyboard_callback+0x11a>
		switch(key){
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	d002      	beq.n	80008f6 <keyboard_callback+0xfa>
 80008f0:	2b0d      	cmp	r3, #13
 80008f2:	d00b      	beq.n	800090c <keyboard_callback+0x110>
			case KEY_SUBSTRACT_ID:
				display.negative = true;
				break;

			default:
				return;
 80008f4:	e014      	b.n	8000920 <keyboard_callback+0x124>
				result = 0;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <keyboard_callback+0x134>)
 80008f8:	f04f 0200 	mov.w	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
				number_set_zero(&display);
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <keyboard_callback+0x12c>)
 8000900:	f000 f81c 	bl	800093c <number_set_zero>
				operation = CALC_OP_NONE;
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <keyboard_callback+0x138>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
				break;
 800090a:	e004      	b.n	8000916 <keyboard_callback+0x11a>
				display.negative = true;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <keyboard_callback+0x12c>)
 800090e:	2201      	movs	r2, #1
 8000910:	735a      	strb	r2, [r3, #13]
				break;
 8000912:	e000      	b.n	8000916 <keyboard_callback+0x11a>
				break;
 8000914:	bf00      	nop
		}
	}

	update = true;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <keyboard_callback+0x13c>)
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	e000      	b.n	8000920 <keyboard_callback+0x124>
				return;
 800091e:	bf00      	nop
}
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000088 	.word	0x20000088
 800092c:	20000040 	.word	0x20000040
 8000930:	20000098 	.word	0x20000098
 8000934:	2000009c 	.word	0x2000009c
 8000938:	2000009d 	.word	0x2000009d

0800093c <number_set_zero>:

static void number_set_zero(calc_number_t *number){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	number->absolute = 0;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
	number->absolute_digits = 1;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	711a      	strb	r2, [r3, #4]
	number->fraction = 0;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
	number->fraction_digits = 0;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	731a      	strb	r2, [r3, #12]
	number->negative = false;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	735a      	strb	r2, [r3, #13]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <keyboard_init>:
extern uint16_t buttons_state;

static void button_callback(uint8_t button_id, button_callback_event_t event);
static void scan_buttons(void);

void keyboard_init(void){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	e014      	b.n	80009a2 <keyboard_init+0x36>
		BTN_Init(&keyboard.button[btn], KEY_0_ID + btn, 50, 0 /* Disabled */);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <keyboard_init+0x58>)
 800097e:	1898      	adds	r0, r3, r2
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	b299      	uxth	r1, r3
 8000984:	2300      	movs	r3, #0
 8000986:	2232      	movs	r2, #50	; 0x32
 8000988:	f7ff fcfc 	bl	8000384 <BTN_Init>
		BTN_RegisterCallback(&keyboard.button[btn], button_callback);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <keyboard_init+0x58>)
 8000992:	4413      	add	r3, r2
 8000994:	490c      	ldr	r1, [pc, #48]	; (80009c8 <keyboard_init+0x5c>)
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fde9 	bl	800056e <BTN_RegisterCallback>
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3301      	adds	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d9e7      	bls.n	8000978 <keyboard_init+0xc>
	}

	/* Set long-press time for * and OK buttons */
	keyboard.button[KEY_EQUAL_ID].long_press_ms = 500;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <keyboard_init+0x58>)
 80009aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009ae:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	keyboard.button[KEY_SUBSTRACT_ID].long_press_ms = 500;
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <keyboard_init+0x58>)
 80009b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009b8:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000a0 	.word	0x200000a0
 80009c8:	08000a41 	.word	0x08000a41

080009cc <keyboard_main>:

void keyboard_main(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	e009      	b.n	80009ec <keyboard_main+0x20>
		BTN_Main(&keyboard.button[btn]);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <keyboard_main+0x30>)
 80009de:	4413      	add	r3, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fcf8 	bl	80003d6 <BTN_Main>
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3301      	adds	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b0f      	cmp	r3, #15
 80009f0:	d9f2      	bls.n	80009d8 <keyboard_main+0xc>
	}
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000a0 	.word	0x200000a0

08000a00 <keyboard_tick>:

void keyboard_tick(uint16_t period){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
	/* Scan keyboard buttons */
	scan_buttons();
 8000a0a:	f000 f84d 	bl	8000aa8 <scan_buttons>

	/* Update timings for buttons library */
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e00b      	b.n	8000a2c <keyboard_tick+0x2c>
		BTN_Tick(&keyboard.button[btn], period);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <keyboard_tick+0x3c>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	88fa      	ldrh	r2, [r7, #6]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fd8b 	bl	800053c <BTN_Tick>
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b0f      	cmp	r3, #15
 8000a30:	d9f0      	bls.n	8000a14 <keyboard_tick+0x14>
	}
}
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000a0 	.word	0x200000a0

08000a40 <button_callback>:

static void button_callback(uint8_t button_id, button_callback_event_t event){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	71bb      	strb	r3, [r7, #6]
	keyboard_event_id kbd_event = KEY_RELEASED;
 8000a50:	2302      	movs	r3, #2
 8000a52:	73fb      	strb	r3, [r7, #15]

	switch(event){
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d014      	beq.n	8000a84 <button_callback+0x44>
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	dc15      	bgt.n	8000a8a <button_callback+0x4a>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <button_callback+0x28>
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d00b      	beq.n	8000a7e <button_callback+0x3e>

		case BTN_SHORT_PRESS: kbd_event = KEY_SHORT_PRESS; break;
		case BTN_LONG_PRESS: kbd_event = KEY_LONG_PRESS; break;

		default:
			break;
 8000a66:	e010      	b.n	8000a8a <button_callback+0x4a>
			if(keyboard.button[button_id].pressed){
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <button_callback+0x64>)
 8000a6c:	011b      	lsls	r3, r3, #4
 8000a6e:	4413      	add	r3, r2
 8000a70:	3302      	adds	r3, #2
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00a      	beq.n	8000a8e <button_callback+0x4e>
				kbd_event = KEY_PRESSED;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
			break;
 8000a7c:	e007      	b.n	8000a8e <button_callback+0x4e>
		case BTN_SHORT_PRESS: kbd_event = KEY_SHORT_PRESS; break;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	73fb      	strb	r3, [r7, #15]
 8000a82:	e005      	b.n	8000a90 <button_callback+0x50>
		case BTN_LONG_PRESS: kbd_event = KEY_LONG_PRESS; break;
 8000a84:	2308      	movs	r3, #8
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e002      	b.n	8000a90 <button_callback+0x50>
			break;
 8000a8a:	bf00      	nop
 8000a8c:	e000      	b.n	8000a90 <button_callback+0x50>
			break;
 8000a8e:	bf00      	nop
	}

	keyboard_callback(button_id, kbd_event);
 8000a90:	7bfa      	ldrb	r2, [r7, #15]
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff feb0 	bl	80007fc <keyboard_callback>
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000a0 	.word	0x200000a0

08000aa8 <scan_buttons>:

/* Weak functions for user realization if needed */
__attribute__((weak)) void keyboard_callback(keyboard_key_id key, keyboard_event_id event){}

static void scan_buttons(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	static uint8_t column_index = 0;
	static uint16_t column_pin[] = {KEY_C1_Pin, KEY_C2_Pin, KEY_C3_Pin, KEY_C4_Pin};
	uint16_t tmp = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	80fb      	strh	r3, [r7, #6]

	/* Read coulumn buttons */
	tmp |= (KEY_R1_GPIO_Port->IDR & KEY_R1_Pin)?(0):(1);
 8000ab2:	4b46      	ldr	r3, [pc, #280]	; (8000bcc <scan_buttons+0x124>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	bf0c      	ite	eq
 8000abe:	2301      	moveq	r3, #1
 8000ac0:	2300      	movne	r3, #0
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	80fb      	strh	r3, [r7, #6]
	tmp <<= 1;
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	80fb      	strh	r3, [r7, #6]
	tmp |= (KEY_R2_GPIO_Port->IDR & KEY_R2_Pin)?(0):(1);
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <scan_buttons+0x124>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2301      	moveq	r3, #1
 8000ae4:	2300      	movne	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	80fb      	strh	r3, [r7, #6]
	tmp <<= 1;
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	80fb      	strh	r3, [r7, #6]
	tmp |= (KEY_R3_GPIO_Port->IDR & KEY_R3_Pin)?(0):(1);
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <scan_buttons+0x124>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bf0c      	ite	eq
 8000b06:	2301      	moveq	r3, #1
 8000b08:	2300      	movne	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	80fb      	strh	r3, [r7, #6]
	tmp <<= 1;
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	80fb      	strh	r3, [r7, #6]
	tmp |= (KEY_R4_GPIO_Port->IDR & KEY_R4_Pin)?(0):(1);
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <scan_buttons+0x124>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf0c      	ite	eq
 8000b2a:	2301      	moveq	r3, #1
 8000b2c:	2300      	movne	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	80fb      	strh	r3, [r7, #6]

	/* Clear last buttons states */
	buttons_state &= ~(0x0F << (column_index * 4));
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <scan_buttons+0x128>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	220f      	movs	r2, #15
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <scan_buttons+0x12c>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	4013      	ands	r3, r2
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <scan_buttons+0x12c>)
 8000b5c:	801a      	strh	r2, [r3, #0]

	/* Set new buttons states */
	buttons_state |= tmp << (column_index * 4);
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <scan_buttons+0x128>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <scan_buttons+0x12c>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <scan_buttons+0x12c>)
 8000b7a:	801a      	strh	r2, [r3, #0]

	/* Select column row */
	HAL_GPIO_WritePin(GPIOB, column_pin[column_index], SET);
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <scan_buttons+0x128>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <scan_buttons+0x130>)
 8000b84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480f      	ldr	r0, [pc, #60]	; (8000bcc <scan_buttons+0x124>)
 8000b8e:	f000 fd1f 	bl	80015d0 <HAL_GPIO_WritePin>
	column_index++;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <scan_buttons+0x128>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <scan_buttons+0x128>)
 8000b9c:	701a      	strb	r2, [r3, #0]
	if(column_index >= 4){
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <scan_buttons+0x128>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d902      	bls.n	8000bac <scan_buttons+0x104>
		column_index = 0;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <scan_buttons+0x128>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOB, column_pin[column_index], RESET);
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <scan_buttons+0x128>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <scan_buttons+0x130>)
 8000bb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <scan_buttons+0x124>)
 8000bbe:	f000 fd07 	bl	80015d0 <HAL_GPIO_WritePin>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	200001a0 	.word	0x200001a0
 8000bd4:	20000086 	.word	0x20000086
 8000bd8:	20000044 	.word	0x20000044

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f000 fa14 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f817 	bl	8000c16 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f000 f8ac 	bl	8000d44 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000bec:	f000 f858 	bl	8000ca0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  seven_segment_init();
 8000bf0:	f7ff fb22 	bl	8000238 <seven_segment_init>
  seven_segment_enable(0, true);
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fb90 	bl	800031c <seven_segment_enable>
  seven_segment_set_number(0, 0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff fba0 	bl	8000344 <seven_segment_set_number>
  keyboard_init();
 8000c04:	f7ff feb2 	bl	800096c <keyboard_init>
  calculator_init();
 8000c08:	f7ff fda4 	bl	8000754 <calculator_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  keyboard_main();
 8000c0c:	f7ff fede 	bl	80009cc <keyboard_main>
	  calculator_main();
 8000c10:	f7ff fdba 	bl	8000788 <calculator_main>
	  keyboard_main();
 8000c14:	e7fa      	b.n	8000c0c <main+0x30>

08000c16 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b090      	sub	sp, #64	; 0x40
 8000c1a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	2228      	movs	r2, #40	; 0x28
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fcc7 	bl	80025b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c40:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c46:	2301      	movs	r3, #1
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fcce 	bl	8001600 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c6a:	f000 f913 	bl	8000e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2302      	movs	r3, #2
 8000c74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2101      	movs	r1, #1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 ff3b 	bl	8001b04 <HAL_RCC_ClockConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c94:	f000 f8fe 	bl	8000e94 <Error_Handler>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3740      	adds	r7, #64	; 0x40
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_TIM4_Init+0x9c>)
 8000cbe:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <MX_TIM4_Init+0xa0>)
 8000cc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_TIM4_Init+0x9c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_TIM4_Init+0x9c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_TIM4_Init+0x9c>)
 8000cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_TIM4_Init+0x9c>)
 8000cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_TIM4_Init+0x9c>)
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ce4:	4815      	ldr	r0, [pc, #84]	; (8000d3c <MX_TIM4_Init+0x9c>)
 8000ce6:	f001 f869 	bl	8001dbc <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000cf0:	f000 f8d0 	bl	8000e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480e      	ldr	r0, [pc, #56]	; (8000d3c <MX_TIM4_Init+0x9c>)
 8000d02:	f001 fa05 	bl	8002110 <HAL_TIM_ConfigClockSource>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d0c:	f000 f8c2 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	; (8000d3c <MX_TIM4_Init+0x9c>)
 8000d1e:	f001 fbdb 	bl	80024d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d28:	f000 f8b4 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <MX_TIM4_Init+0x9c>)
 8000d2e:	f001 f895 	bl	8001e5c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200001a4 	.word	0x200001a4
 8000d40:	40000800 	.word	0x40000800

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d58:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <MX_GPIO_Init+0xfc>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a38      	ldr	r2, [pc, #224]	; (8000e40 <MX_GPIO_Init+0xfc>)
 8000d5e:	f043 0320 	orr.w	r3, r3, #32
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <MX_GPIO_Init+0xfc>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0320 	and.w	r3, r3, #32
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <MX_GPIO_Init+0xfc>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a32      	ldr	r2, [pc, #200]	; (8000e40 <MX_GPIO_Init+0xfc>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <MX_GPIO_Init+0xfc>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <MX_GPIO_Init+0xfc>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <MX_GPIO_Init+0xfc>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <MX_GPIO_Init+0xfc>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin
 8000da0:	2200      	movs	r2, #0
 8000da2:	f249 01ff 	movw	r1, #37119	; 0x90ff
 8000da6:	4827      	ldr	r0, [pc, #156]	; (8000e44 <MX_GPIO_Init+0x100>)
 8000da8:	f000 fc12 	bl	80015d0 <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin|DP_Pin
                          |D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEY_C1_Pin|KEY_C2_Pin|KEY_C3_Pin|KEY_C4_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000db2:	4825      	ldr	r0, [pc, #148]	; (8000e48 <MX_GPIO_Init+0x104>)
 8000db4:	f000 fc0c 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000dbe:	4822      	ldr	r0, [pc, #136]	; (8000e48 <MX_GPIO_Init+0x104>)
 8000dc0:	f000 fc06 	bl	80015d0 <HAL_GPIO_WritePin>
                          |D7_Pin|D8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin DP_Pin
                           D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 8000dc4:	f249 03ff 	movw	r3, #37119	; 0x90ff
 8000dc8:	613b      	str	r3, [r7, #16]
                          |E_Pin|F_Pin|G_Pin|DP_Pin
                          |D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4819      	ldr	r0, [pc, #100]	; (8000e44 <MX_GPIO_Init+0x100>)
 8000dde:	f000 fa73 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_R4_Pin KEY_R3_Pin KEY_R2_Pin KEY_R1_Pin */
  GPIO_InitStruct.Pin = KEY_R4_Pin|KEY_R3_Pin|KEY_R2_Pin|KEY_R1_Pin;
 8000de2:	f640 4303 	movw	r3, #3075	; 0xc03
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	4814      	ldr	r0, [pc, #80]	; (8000e48 <MX_GPIO_Init+0x104>)
 8000df8:	f000 fa66 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_C1_Pin KEY_C2_Pin KEY_C3_Pin KEY_C4_Pin */
  GPIO_InitStruct.Pin = KEY_C1_Pin|KEY_C2_Pin|KEY_C3_Pin|KEY_C4_Pin;
 8000dfc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e02:	2311      	movs	r3, #17
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_GPIO_Init+0x104>)
 8000e16:	f000 fa57 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8000e1a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000e1e:	613b      	str	r3, [r7, #16]
                          |D7_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_GPIO_Init+0x104>)
 8000e34:	f000 fa48 	bl	80012c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010800 	.word	0x40010800
 8000e48:	40010c00 	.word	0x40010c00

08000e4c <HAL_IncTick>:

/* USER CODE BEGIN 4 */
void HAL_IncTick(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]

  keyboard_tick(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff fdcd 	bl	8000a00 <keyboard_tick>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000054 	.word	0x20000054
 8000e70:	200001ec 	.word	0x200001ec

08000e74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d101      	bne.n	8000e88 <HAL_TIM_PeriodElapsedCallback+0x14>
		seven_segment_tick();
 8000e84:	f7ff f9f8 	bl	8000278 <seven_segment_tick>
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200001a4 	.word	0x200001a4

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>
	...

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_MspInit+0x5c>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_MspInit+0x5c>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6193      	str	r3, [r2, #24]
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_MspInit+0x5c>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_MspInit+0x5c>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_MspInit+0x5c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_MspInit+0x5c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_MspInit+0x60>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_MspInit+0x60>)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010000 	.word	0x40010000

08000f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d113      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_TIM_Base_MspInit+0x48>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <HAL_TIM_Base_MspInit+0x48>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_TIM_Base_MspInit+0x48>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	201e      	movs	r0, #30
 8000f34:	f000 f991 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f38:	201e      	movs	r0, #30
 8000f3a:	f000 f9aa 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40000800 	.word	0x40000800
 8000f4c:	40021000 	.word	0x40021000

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f96:	f7ff ff59 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <TIM4_IRQHandler+0x10>)
 8000fa6:	f000 ffab 	bl	8001f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001a4 	.word	0x200001a4

08000fb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff fff8 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fc6:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a09      	ldr	r2, [pc, #36]	; (8001000 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fdc:	4c09      	ldr	r4, [pc, #36]	; (8001004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f001 faed 	bl	80025c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fdf5 	bl	8000bdc <main>
  bx lr
 8000ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000ffc:	08002660 	.word	0x08002660
  ldr r2, =_sbss
 8001000:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001004:	200001f0 	.word	0x200001f0

08001008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_2_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x28>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x28>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f911 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff ff3a 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40022000 	.word	0x40022000

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f929 	bl	80012ae <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f8f1 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000004c 	.word	0x2000004c
 8001090:	20000054 	.word	0x20000054
 8001094:	20000050 	.word	0x20000050

08001098 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <HAL_GetTick+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	200001ec 	.word	0x200001ec

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4906      	ldr	r1, [pc, #24]	; (8001144 <__NVIC_EnableIRQ+0x34>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff90 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff2d 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff42 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff90 	bl	800119c <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5f 	bl	8001148 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff35 	bl	8001110 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b08b      	sub	sp, #44	; 0x2c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	e169      	b.n	80015b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012dc:	2201      	movs	r2, #1
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8158 	bne.w	80015aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4a9a      	ldr	r2, [pc, #616]	; (8001568 <HAL_GPIO_Init+0x2a0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d05e      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001304:	4a98      	ldr	r2, [pc, #608]	; (8001568 <HAL_GPIO_Init+0x2a0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d875      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800130a:	4a98      	ldr	r2, [pc, #608]	; (800156c <HAL_GPIO_Init+0x2a4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d058      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001310:	4a96      	ldr	r2, [pc, #600]	; (800156c <HAL_GPIO_Init+0x2a4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d86f      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001316:	4a96      	ldr	r2, [pc, #600]	; (8001570 <HAL_GPIO_Init+0x2a8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d052      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 800131c:	4a94      	ldr	r2, [pc, #592]	; (8001570 <HAL_GPIO_Init+0x2a8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d869      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001322:	4a94      	ldr	r2, [pc, #592]	; (8001574 <HAL_GPIO_Init+0x2ac>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d04c      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001328:	4a92      	ldr	r2, [pc, #584]	; (8001574 <HAL_GPIO_Init+0x2ac>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d863      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800132e:	4a92      	ldr	r2, [pc, #584]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d046      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001334:	4a90      	ldr	r2, [pc, #576]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d85d      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800133a:	2b12      	cmp	r3, #18
 800133c:	d82a      	bhi.n	8001394 <HAL_GPIO_Init+0xcc>
 800133e:	2b12      	cmp	r3, #18
 8001340:	d859      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <HAL_GPIO_Init+0x80>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	080013c3 	.word	0x080013c3
 800134c:	0800139d 	.word	0x0800139d
 8001350:	080013af 	.word	0x080013af
 8001354:	080013f1 	.word	0x080013f1
 8001358:	080013f7 	.word	0x080013f7
 800135c:	080013f7 	.word	0x080013f7
 8001360:	080013f7 	.word	0x080013f7
 8001364:	080013f7 	.word	0x080013f7
 8001368:	080013f7 	.word	0x080013f7
 800136c:	080013f7 	.word	0x080013f7
 8001370:	080013f7 	.word	0x080013f7
 8001374:	080013f7 	.word	0x080013f7
 8001378:	080013f7 	.word	0x080013f7
 800137c:	080013f7 	.word	0x080013f7
 8001380:	080013f7 	.word	0x080013f7
 8001384:	080013f7 	.word	0x080013f7
 8001388:	080013f7 	.word	0x080013f7
 800138c:	080013a5 	.word	0x080013a5
 8001390:	080013b9 	.word	0x080013b9
 8001394:	4a79      	ldr	r2, [pc, #484]	; (800157c <HAL_GPIO_Init+0x2b4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800139a:	e02c      	b.n	80013f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	623b      	str	r3, [r7, #32]
          break;
 80013a2:	e029      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	3304      	adds	r3, #4
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e024      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	3308      	adds	r3, #8
 80013b4:	623b      	str	r3, [r7, #32]
          break;
 80013b6:	e01f      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	330c      	adds	r3, #12
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e01a      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ca:	2304      	movs	r3, #4
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e013      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d8:	2308      	movs	r3, #8
 80013da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	611a      	str	r2, [r3, #16]
          break;
 80013e2:	e009      	b.n	80013f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	615a      	str	r2, [r3, #20]
          break;
 80013ee:	e003      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
          break;
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          break;
 80013f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d801      	bhi.n	8001402 <HAL_GPIO_Init+0x13a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	e001      	b.n	8001406 <HAL_GPIO_Init+0x13e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d802      	bhi.n	8001414 <HAL_GPIO_Init+0x14c>
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x152>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	3b08      	subs	r3, #8
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	210f      	movs	r1, #15
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	6a39      	ldr	r1, [r7, #32]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	431a      	orrs	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80b1 	beq.w	80015aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a4c      	ldr	r2, [pc, #304]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001460:	4a48      	ldr	r2, [pc, #288]	; (8001584 <HAL_GPIO_Init+0x2bc>)
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a40      	ldr	r2, [pc, #256]	; (8001588 <HAL_GPIO_Init+0x2c0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d013      	beq.n	80014b4 <HAL_GPIO_Init+0x1ec>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a3f      	ldr	r2, [pc, #252]	; (800158c <HAL_GPIO_Init+0x2c4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d00d      	beq.n	80014b0 <HAL_GPIO_Init+0x1e8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <HAL_GPIO_Init+0x2c8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d007      	beq.n	80014ac <HAL_GPIO_Init+0x1e4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3d      	ldr	r2, [pc, #244]	; (8001594 <HAL_GPIO_Init+0x2cc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d101      	bne.n	80014a8 <HAL_GPIO_Init+0x1e0>
 80014a4:	2303      	movs	r3, #3
 80014a6:	e006      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e004      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014b4:	2300      	movs	r3, #0
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	f002 0203 	and.w	r2, r2, #3
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	4093      	lsls	r3, r2
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c6:	492f      	ldr	r1, [pc, #188]	; (8001584 <HAL_GPIO_Init+0x2bc>)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	492c      	ldr	r1, [pc, #176]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4928      	ldr	r1, [pc, #160]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	4922      	ldr	r1, [pc, #136]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	491e      	ldr	r1, [pc, #120]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001520:	4013      	ands	r3, r2
 8001522:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4918      	ldr	r1, [pc, #96]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4914      	ldr	r1, [pc, #80]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d021      	beq.n	800159c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	490e      	ldr	r1, [pc, #56]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
 8001564:	e021      	b.n	80015aa <HAL_GPIO_Init+0x2e2>
 8001566:	bf00      	nop
 8001568:	10320000 	.word	0x10320000
 800156c:	10310000 	.word	0x10310000
 8001570:	10220000 	.word	0x10220000
 8001574:	10210000 	.word	0x10210000
 8001578:	10120000 	.word	0x10120000
 800157c:	10110000 	.word	0x10110000
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000
 8001588:	40010800 	.word	0x40010800
 800158c:	40010c00 	.word	0x40010c00
 8001590:	40011000 	.word	0x40011000
 8001594:	40011400 	.word	0x40011400
 8001598:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_GPIO_Init+0x304>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	4909      	ldr	r1, [pc, #36]	; (80015cc <HAL_GPIO_Init+0x304>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	3301      	adds	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f47f ae8e 	bne.w	80012dc <HAL_GPIO_Init+0x14>
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	372c      	adds	r7, #44	; 0x2c
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40010400 	.word	0x40010400

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015ec:	e003      	b.n	80015f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	611a      	str	r2, [r3, #16]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e272      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8087 	beq.w	800172e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001620:	4b92      	ldr	r3, [pc, #584]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b04      	cmp	r3, #4
 800162a:	d00c      	beq.n	8001646 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800162c:	4b8f      	ldr	r3, [pc, #572]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b08      	cmp	r3, #8
 8001636:	d112      	bne.n	800165e <HAL_RCC_OscConfig+0x5e>
 8001638:	4b8c      	ldr	r3, [pc, #560]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d10b      	bne.n	800165e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001646:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d06c      	beq.n	800172c <HAL_RCC_OscConfig+0x12c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d168      	bne.n	800172c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e24c      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x76>
 8001668:	4b80      	ldr	r3, [pc, #512]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a7f      	ldr	r2, [pc, #508]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 800166e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e02e      	b.n	80016d4 <HAL_RCC_OscConfig+0xd4>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x98>
 800167e:	4b7b      	ldr	r3, [pc, #492]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a7a      	ldr	r2, [pc, #488]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b78      	ldr	r3, [pc, #480]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a77      	ldr	r2, [pc, #476]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e01d      	b.n	80016d4 <HAL_RCC_OscConfig+0xd4>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0xbc>
 80016a2:	4b72      	ldr	r3, [pc, #456]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a71      	ldr	r2, [pc, #452]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b6f      	ldr	r3, [pc, #444]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a6e      	ldr	r2, [pc, #440]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0xd4>
 80016bc:	4b6b      	ldr	r3, [pc, #428]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a6a      	ldr	r2, [pc, #424]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b68      	ldr	r3, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a67      	ldr	r2, [pc, #412]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fcdc 	bl	8001098 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fcd8 	bl	8001098 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e200      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0xe4>
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fcc8 	bl	8001098 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fcc4 	bl	8001098 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1ec      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171e:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x10c>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d063      	beq.n	8001802 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800173a:	4b4c      	ldr	r3, [pc, #304]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001746:	4b49      	ldr	r3, [pc, #292]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b08      	cmp	r3, #8
 8001750:	d11c      	bne.n	800178c <HAL_RCC_OscConfig+0x18c>
 8001752:	4b46      	ldr	r3, [pc, #280]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d116      	bne.n	800178c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_RCC_OscConfig+0x176>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e1c0      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4939      	ldr	r1, [pc, #228]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001786:	4313      	orrs	r3, r2
 8001788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	e03a      	b.n	8001802 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff fc7d 	bl	8001098 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a2:	f7ff fc79 	bl	8001098 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e1a1      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c0:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4927      	ldr	r1, [pc, #156]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
 80017d4:	e015      	b.n	8001802 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fc5c 	bl	8001098 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff fc58 	bl	8001098 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e180      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d03a      	beq.n	8001884 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d019      	beq.n	800184a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_RCC_OscConfig+0x274>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7ff fc3c 	bl	8001098 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff fc38 	bl	8001098 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e160      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_RCC_OscConfig+0x26c>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001842:	2001      	movs	r0, #1
 8001844:	f000 fa9c 	bl	8001d80 <RCC_Delay>
 8001848:	e01c      	b.n	8001884 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_RCC_OscConfig+0x274>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff fc22 	bl	8001098 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001856:	e00f      	b.n	8001878 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001858:	f7ff fc1e 	bl	8001098 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d908      	bls.n	8001878 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e146      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	42420000 	.word	0x42420000
 8001874:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1e9      	bne.n	8001858 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80a6 	beq.w	80019de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10d      	bne.n	80018be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b88      	ldr	r3, [pc, #544]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a87      	ldr	r2, [pc, #540]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b85      	ldr	r3, [pc, #532]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	4b82      	ldr	r3, [pc, #520]	; (8001ac8 <HAL_RCC_OscConfig+0x4c8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d118      	bne.n	80018fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ca:	4b7f      	ldr	r3, [pc, #508]	; (8001ac8 <HAL_RCC_OscConfig+0x4c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a7e      	ldr	r2, [pc, #504]	; (8001ac8 <HAL_RCC_OscConfig+0x4c8>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fbdf 	bl	8001098 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018de:	f7ff fbdb 	bl	8001098 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b64      	cmp	r3, #100	; 0x64
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e103      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	4b75      	ldr	r3, [pc, #468]	; (8001ac8 <HAL_RCC_OscConfig+0x4c8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x312>
 8001904:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	e02d      	b.n	800196e <HAL_RCC_OscConfig+0x36e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x334>
 800191a:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a69      	ldr	r2, [pc, #420]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6213      	str	r3, [r2, #32]
 8001926:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a66      	ldr	r2, [pc, #408]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	f023 0304 	bic.w	r3, r3, #4
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	e01c      	b.n	800196e <HAL_RCC_OscConfig+0x36e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b05      	cmp	r3, #5
 800193a:	d10c      	bne.n	8001956 <HAL_RCC_OscConfig+0x356>
 800193c:	4b61      	ldr	r3, [pc, #388]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4a60      	ldr	r2, [pc, #384]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	6213      	str	r3, [r2, #32]
 8001948:	4b5e      	ldr	r3, [pc, #376]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a5d      	ldr	r2, [pc, #372]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	e00b      	b.n	800196e <HAL_RCC_OscConfig+0x36e>
 8001956:	4b5b      	ldr	r3, [pc, #364]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4a5a      	ldr	r2, [pc, #360]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	6213      	str	r3, [r2, #32]
 8001962:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4a57      	ldr	r2, [pc, #348]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d015      	beq.n	80019a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001976:	f7ff fb8f 	bl	8001098 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197c:	e00a      	b.n	8001994 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f7ff fb8b 	bl	8001098 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f241 3288 	movw	r2, #5000	; 0x1388
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0b1      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001994:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0ee      	beq.n	800197e <HAL_RCC_OscConfig+0x37e>
 80019a0:	e014      	b.n	80019cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fb79 	bl	8001098 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff fb75 	bl	8001098 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e09b      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c0:	4b40      	ldr	r3, [pc, #256]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1ee      	bne.n	80019aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d105      	bne.n	80019de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d2:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a3b      	ldr	r2, [pc, #236]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8087 	beq.w	8001af6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d061      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d146      	bne.n	8001a8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fc:	4b33      	ldr	r3, [pc, #204]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff fb49 	bl	8001098 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff fb45 	bl	8001098 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e06d      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a30:	d108      	bne.n	8001a44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4921      	ldr	r1, [pc, #132]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a19      	ldr	r1, [r3, #32]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	430b      	orrs	r3, r1
 8001a56:	491b      	ldr	r1, [pc, #108]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff fb19 	bl	8001098 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff fb15 	bl	8001098 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e03d      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x46a>
 8001a88:	e035      	b.n	8001af6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fb02 	bl	8001098 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff fafe 	bl	8001098 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e026      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x498>
 8001ab6:	e01e      	b.n	8001af6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e019      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_OscConfig+0x500>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0d0      	b.n	8001cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b6a      	ldr	r3, [pc, #424]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d910      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b67      	ldr	r3, [pc, #412]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 0207 	bic.w	r2, r3, #7
 8001b2e:	4965      	ldr	r1, [pc, #404]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0b8      	b.n	8001cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d020      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b78:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b84:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	494d      	ldr	r1, [pc, #308]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d040      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d115      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e07f      	b.n	8001cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e073      	b.n	8001cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e06b      	b.n	8001cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f023 0203 	bic.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4936      	ldr	r1, [pc, #216]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf4:	f7ff fa50 	bl	8001098 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff fa4c 	bl	8001098 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e053      	b.n	8001cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 020c 	and.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1eb      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d210      	bcs.n	8001c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 0207 	bic.w	r2, r3, #7
 8001c3a:	4922      	ldr	r1, [pc, #136]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e032      	b.n	8001cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4916      	ldr	r1, [pc, #88]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	490e      	ldr	r1, [pc, #56]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c92:	f000 f821 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	490a      	ldr	r1, [pc, #40]	; (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001ca4:	5ccb      	ldrb	r3, [r1, r3]
 8001ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f9c0 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08002634 	.word	0x08002634
 8001cd0:	2000004c 	.word	0x2000004c
 8001cd4:	20000050 	.word	0x20000050

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d002      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x30>
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d003      	beq.n	8001d0e <HAL_RCC_GetSysClockFreq+0x36>
 8001d06:	e027      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d0a:	613b      	str	r3, [r7, #16]
      break;
 8001d0c:	e027      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	0c9b      	lsrs	r3, r3, #18
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d18:	5cd3      	ldrb	r3, [r2, r3]
 8001d1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d010      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	0c5b      	lsrs	r3, r3, #17
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	4a11      	ldr	r2, [pc, #68]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d3a:	fb03 f202 	mul.w	r2, r3, r2
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e004      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	613b      	str	r3, [r7, #16]
      break;
 8001d56:	e002      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d5a:	613b      	str	r3, [r7, #16]
      break;
 8001d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5e:	693b      	ldr	r3, [r7, #16]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	007a1200 	.word	0x007a1200
 8001d74:	08002644 	.word	0x08002644
 8001d78:	08002654 	.word	0x08002654
 8001d7c:	003d0900 	.word	0x003d0900

08001d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <RCC_Delay+0x34>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <RCC_Delay+0x38>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	0a5b      	lsrs	r3, r3, #9
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d9c:	bf00      	nop
  }
  while (Delay --);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1e5a      	subs	r2, r3, #1
 8001da2:	60fa      	str	r2, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f9      	bne.n	8001d9c <RCC_Delay+0x1c>
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	2000004c 	.word	0x2000004c
 8001db8:	10624dd3 	.word	0x10624dd3

08001dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e041      	b.n	8001e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff f88e 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f000 fa74 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d001      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e03a      	b.n	8001eea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_TIM_Base_Start_IT+0x98>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00e      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x58>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9e:	d009      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x58>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x58>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <HAL_TIM_Base_Start_IT+0xa0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d010      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed6:	e007      	b.n	8001ee8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	40012c00 	.word	0x40012c00
 8001ef8:	40000400 	.word	0x40000400
 8001efc:	40000800 	.word	0x40000800

08001f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0202 	mvn.w	r2, #2
 8001f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f9b4 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f9a7 	bl	800229e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f9b6 	bl	80022c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0204 	mvn.w	r2, #4
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f98a 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f97d 	bl	800229e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f98c 	bl	80022c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d122      	bne.n	8002004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d11b      	bne.n	8002004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0208 	mvn.w	r2, #8
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f960 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f953 	bl	800229e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f962 	bl	80022c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b10      	cmp	r3, #16
 8002010:	d122      	bne.n	8002058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b10      	cmp	r3, #16
 800201e:	d11b      	bne.n	8002058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0210 	mvn.w	r2, #16
 8002028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2208      	movs	r2, #8
 800202e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f936 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f929 	bl	800229e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f938 	bl	80022c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0201 	mvn.w	r2, #1
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fef8 	bl	8000e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b80      	cmp	r3, #128	; 0x80
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209c:	2b80      	cmp	r3, #128	; 0x80
 800209e:	d107      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fa7b 	bl	80025a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c8:	2b40      	cmp	r3, #64	; 0x40
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8fc 	bl	80022d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0220 	mvn.w	r2, #32
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa46 	bl	8002594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_TIM_ConfigClockSource+0x1c>
 8002128:	2302      	movs	r3, #2
 800212a:	e0b4      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x186>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800214a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002164:	d03e      	beq.n	80021e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800216a:	f200 8087 	bhi.w	800227c <HAL_TIM_ConfigClockSource+0x16c>
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002172:	f000 8086 	beq.w	8002282 <HAL_TIM_ConfigClockSource+0x172>
 8002176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217a:	d87f      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 800217c:	2b70      	cmp	r3, #112	; 0x70
 800217e:	d01a      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002180:	2b70      	cmp	r3, #112	; 0x70
 8002182:	d87b      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 8002184:	2b60      	cmp	r3, #96	; 0x60
 8002186:	d050      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x11a>
 8002188:	2b60      	cmp	r3, #96	; 0x60
 800218a:	d877      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 800218c:	2b50      	cmp	r3, #80	; 0x50
 800218e:	d03c      	beq.n	800220a <HAL_TIM_ConfigClockSource+0xfa>
 8002190:	2b50      	cmp	r3, #80	; 0x50
 8002192:	d873      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d058      	beq.n	800224a <HAL_TIM_ConfigClockSource+0x13a>
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d86f      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 800219c:	2b30      	cmp	r3, #48	; 0x30
 800219e:	d064      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x15a>
 80021a0:	2b30      	cmp	r3, #48	; 0x30
 80021a2:	d86b      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d060      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x15a>
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d867      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05c      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x15a>
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d05a      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x15a>
 80021b4:	e062      	b.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021c6:	f000 f968 	bl	800249a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	609a      	str	r2, [r3, #8]
      break;
 80021e2:	e04f      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021f4:	f000 f951 	bl	800249a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002206:	609a      	str	r2, [r3, #8]
      break;
 8002208:	e03c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002216:	461a      	mov	r2, r3
 8002218:	f000 f8c8 	bl	80023ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2150      	movs	r1, #80	; 0x50
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f91f 	bl	8002466 <TIM_ITRx_SetConfig>
      break;
 8002228:	e02c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002236:	461a      	mov	r2, r3
 8002238:	f000 f8e6 	bl	8002408 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2160      	movs	r1, #96	; 0x60
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f90f 	bl	8002466 <TIM_ITRx_SetConfig>
      break;
 8002248:	e01c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002256:	461a      	mov	r2, r3
 8002258:	f000 f8a8 	bl	80023ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2140      	movs	r1, #64	; 0x40
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f8ff 	bl	8002466 <TIM_ITRx_SetConfig>
      break;
 8002268:	e00c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f000 f8f6 	bl	8002466 <TIM_ITRx_SetConfig>
      break;
 800227a:	e003      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      break;
 8002280:	e000      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
	...

080022e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <TIM_Base_SetConfig+0xb8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00b      	beq.n	8002318 <TIM_Base_SetConfig+0x30>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002306:	d007      	beq.n	8002318 <TIM_Base_SetConfig+0x30>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a26      	ldr	r2, [pc, #152]	; (80023a4 <TIM_Base_SetConfig+0xbc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_Base_SetConfig+0x30>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <TIM_Base_SetConfig+0xc0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d108      	bne.n	800232a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <TIM_Base_SetConfig+0xb8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00b      	beq.n	800234a <TIM_Base_SetConfig+0x62>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002338:	d007      	beq.n	800234a <TIM_Base_SetConfig+0x62>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <TIM_Base_SetConfig+0xbc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d003      	beq.n	800234a <TIM_Base_SetConfig+0x62>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <TIM_Base_SetConfig+0xc0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d108      	bne.n	800235c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <TIM_Base_SetConfig+0xb8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d103      	bne.n	8002390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	615a      	str	r2, [r3, #20]
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40000400 	.word	0x40000400
 80023a8:	40000800 	.word	0x40000800

080023ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	f023 0201 	bic.w	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f023 030a 	bic.w	r3, r3, #10
 80023e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f023 0210 	bic.w	r2, r3, #16
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	031b      	lsls	r3, r3, #12
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002444:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	621a      	str	r2, [r3, #32]
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	f043 0307 	orr.w	r3, r3, #7
 8002488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800249a:	b480      	push	{r7}
 800249c:	b087      	sub	sp, #28
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	021a      	lsls	r2, r3, #8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	431a      	orrs	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	609a      	str	r2, [r3, #8]
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e046      	b.n	800257e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00e      	beq.n	8002552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253c:	d009      	beq.n	8002552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d004      	beq.n	8002552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a10      	ldr	r2, [pc, #64]	; (8002590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10c      	bne.n	800256c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4313      	orrs	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	40012c00 	.word	0x40012c00
 800258c:	40000400 	.word	0x40000400
 8002590:	40000800 	.word	0x40000800

08002594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <memset>:
 80025b8:	4603      	mov	r3, r0
 80025ba:	4402      	add	r2, r0
 80025bc:	4293      	cmp	r3, r2
 80025be:	d100      	bne.n	80025c2 <memset+0xa>
 80025c0:	4770      	bx	lr
 80025c2:	f803 1b01 	strb.w	r1, [r3], #1
 80025c6:	e7f9      	b.n	80025bc <memset+0x4>

080025c8 <__libc_init_array>:
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	2600      	movs	r6, #0
 80025cc:	4d0c      	ldr	r5, [pc, #48]	; (8002600 <__libc_init_array+0x38>)
 80025ce:	4c0d      	ldr	r4, [pc, #52]	; (8002604 <__libc_init_array+0x3c>)
 80025d0:	1b64      	subs	r4, r4, r5
 80025d2:	10a4      	asrs	r4, r4, #2
 80025d4:	42a6      	cmp	r6, r4
 80025d6:	d109      	bne.n	80025ec <__libc_init_array+0x24>
 80025d8:	f000 f81a 	bl	8002610 <_init>
 80025dc:	2600      	movs	r6, #0
 80025de:	4d0a      	ldr	r5, [pc, #40]	; (8002608 <__libc_init_array+0x40>)
 80025e0:	4c0a      	ldr	r4, [pc, #40]	; (800260c <__libc_init_array+0x44>)
 80025e2:	1b64      	subs	r4, r4, r5
 80025e4:	10a4      	asrs	r4, r4, #2
 80025e6:	42a6      	cmp	r6, r4
 80025e8:	d105      	bne.n	80025f6 <__libc_init_array+0x2e>
 80025ea:	bd70      	pop	{r4, r5, r6, pc}
 80025ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f0:	4798      	blx	r3
 80025f2:	3601      	adds	r6, #1
 80025f4:	e7ee      	b.n	80025d4 <__libc_init_array+0xc>
 80025f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fa:	4798      	blx	r3
 80025fc:	3601      	adds	r6, #1
 80025fe:	e7f2      	b.n	80025e6 <__libc_init_array+0x1e>
 8002600:	08002658 	.word	0x08002658
 8002604:	08002658 	.word	0x08002658
 8002608:	08002658 	.word	0x08002658
 800260c:	0800265c 	.word	0x0800265c

08002610 <_init>:
 8002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002612:	bf00      	nop
 8002614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002616:	bc08      	pop	{r3}
 8002618:	469e      	mov	lr, r3
 800261a:	4770      	bx	lr

0800261c <_fini>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr
