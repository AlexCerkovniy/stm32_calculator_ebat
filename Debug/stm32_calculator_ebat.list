
stm32_calculator_ebat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f4  080034f4  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  080034f4  080034f4  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034f4  080034f4  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  080034fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200000e0  080035dc  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080035dc  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009064  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e5c  00000000  00000000  000291b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  0002b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000841  00000000  00000000  0002bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e14  00000000  00000000  0002c321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c1d9  00000000  00000000  00043135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084e85  00000000  00000000  0004f30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cf4  00000000  00000000  000d4194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d6e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080034ac 	.word	0x080034ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	080034ac 	.word	0x080034ac

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <seven_segment_init>:
	uint8_t symbol;
} digit[DIGITS_COUNT] = {0};

uint8_t digit_current_index = 0;

void seven_segment_init(void){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < DIGITS_COUNT; i++){
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	e00d      	b.n	800075c <seven_segment_init+0x28>
		digit[i].enabled = false;
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <seven_segment_init+0x3c>)
 8000744:	2100      	movs	r1, #0
 8000746:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		digit[i].symbol = 0;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	4a08      	ldr	r2, [pc, #32]	; (8000770 <seven_segment_init+0x3c>)
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	4413      	add	r3, r2
 8000752:	2200      	movs	r2, #0
 8000754:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 0; i < DIGITS_COUNT; i++){
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	3301      	adds	r3, #1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9ee      	bls.n	8000740 <seven_segment_init+0xc>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	200000fc 	.word	0x200000fc

08000774 <seven_segment_tick>:

void seven_segment_tick(void){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	/* Disable current digit */
	HAL_GPIO_WritePin(digit_hw[digit_current_index].GPIOx, digit_hw[digit_current_index].GPIO_Pin, RESET);
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <seven_segment_tick+0x94>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <seven_segment_tick+0x98>)
 8000780:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <seven_segment_tick+0x94>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <seven_segment_tick+0x98>)
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	4413      	add	r3, r2
 800078e:	889b      	ldrh	r3, [r3, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	f001 fe6a 	bl	800246c <HAL_GPIO_WritePin>
	digit_current_index++;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <seven_segment_tick+0x94>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <seven_segment_tick+0x94>)
 80007a2:	701a      	strb	r2, [r3, #0]
	if(digit_current_index >= DIGITS_COUNT){
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <seven_segment_tick+0x94>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	d902      	bls.n	80007b2 <seven_segment_tick+0x3e>
		digit_current_index = 0;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <seven_segment_tick+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
	}

	/* Clear segments pins */
	GPIOA->ODR |= A_Pin|B_Pin|C_Pin|D_Pin|E_Pin|F_Pin|G_Pin|DP_Pin;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <seven_segment_tick+0x9c>)
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	4a16      	ldr	r2, [pc, #88]	; (8000810 <seven_segment_tick+0x9c>)
 80007b8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80007bc:	60d3      	str	r3, [r2, #12]

	/* Set code for next digit on segments port */
	if(digit[digit_current_index].enabled){
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <seven_segment_tick+0x94>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <seven_segment_tick+0xa0>)
 80007c6:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <seven_segment_tick+0x70>
		GPIOA->ODR ^= digit[digit_current_index].symbol & (A_Pin|B_Pin|C_Pin|D_Pin|E_Pin|F_Pin|G_Pin|DP_Pin);
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <seven_segment_tick+0x9c>)
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <seven_segment_tick+0x94>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	490f      	ldr	r1, [pc, #60]	; (8000814 <seven_segment_tick+0xa0>)
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	440b      	add	r3, r1
 80007dc:	785b      	ldrb	r3, [r3, #1]
 80007de:	490c      	ldr	r1, [pc, #48]	; (8000810 <seven_segment_tick+0x9c>)
 80007e0:	4053      	eors	r3, r2
 80007e2:	60cb      	str	r3, [r1, #12]
	}

	/* Enable current digit */
	HAL_GPIO_WritePin(digit_hw[digit_current_index].GPIOx, digit_hw[digit_current_index].GPIO_Pin, SET);
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <seven_segment_tick+0x94>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <seven_segment_tick+0x98>)
 80007ec:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <seven_segment_tick+0x94>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4a05      	ldr	r2, [pc, #20]	; (800080c <seven_segment_tick+0x98>)
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4413      	add	r3, r2
 80007fa:	889b      	ldrh	r3, [r3, #4]
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	f001 fe34 	bl	800246c <HAL_GPIO_WritePin>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000010c 	.word	0x2000010c
 800080c:	20000000 	.word	0x20000000
 8000810:	40010800 	.word	0x40010800
 8000814:	200000fc 	.word	0x200000fc

08000818 <seven_segment_enable>:

void seven_segment_enable(uint8_t index, bool state){
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]
	digit[index].enabled = state;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4904      	ldr	r1, [pc, #16]	; (800083c <seven_segment_enable+0x24>)
 800082c:	79ba      	ldrb	r2, [r7, #6]
 800082e:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	200000fc 	.word	0x200000fc

08000840 <seven_segment_set_symbol>:

bool seven_segment_is_enabled(uint8_t index){
	return digit[index].enabled;
}

void seven_segment_set_symbol(uint8_t index, uint8_t symbol){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	460a      	mov	r2, r1
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	4613      	mov	r3, r2
 800084e:	71bb      	strb	r3, [r7, #6]
	digit[index].symbol &= ~0x7F;
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <seven_segment_set_symbol+0x54>)
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	785a      	ldrb	r2, [r3, #1]
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000860:	b2d1      	uxtb	r1, r2
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <seven_segment_set_symbol+0x54>)
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	4413      	add	r3, r2
 8000868:	460a      	mov	r2, r1
 800086a:	705a      	strb	r2, [r3, #1]
	digit[index].symbol |= symbol;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <seven_segment_set_symbol+0x54>)
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	7859      	ldrb	r1, [r3, #1]
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	430a      	orrs	r2, r1
 800087c:	b2d1      	uxtb	r1, r2
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <seven_segment_set_symbol+0x54>)
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	460a      	mov	r2, r1
 8000886:	705a      	strb	r2, [r3, #1]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200000fc 	.word	0x200000fc

08000898 <seven_segment_set_dot>:

uint8_t seven_segment_get_symbol(uint8_t index){
	return digit[index].symbol;
}

void seven_segment_set_dot(uint8_t index, bool state){
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	460a      	mov	r2, r1
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71bb      	strb	r3, [r7, #6]
	if(state){
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00e      	beq.n	80008cc <seven_segment_set_dot+0x34>
		digit[index].symbol |= 0x80;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <seven_segment_set_dot+0x5c>)
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	785a      	ldrb	r2, [r3, #1]
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80008be:	b2d1      	uxtb	r1, r2
 80008c0:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <seven_segment_set_dot+0x5c>)
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	460a      	mov	r2, r1
 80008c8:	705a      	strb	r2, [r3, #1]
	}
	else{
		digit[index].symbol &= ~0x80;
	}
}
 80008ca:	e00d      	b.n	80008e8 <seven_segment_set_dot+0x50>
		digit[index].symbol &= ~0x80;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <seven_segment_set_dot+0x5c>)
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	785a      	ldrb	r2, [r3, #1]
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80008dc:	b2d1      	uxtb	r1, r2
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <seven_segment_set_dot+0x5c>)
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	460a      	mov	r2, r1
 80008e6:	705a      	strb	r2, [r3, #1]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	200000fc 	.word	0x200000fc

080008f8 <seven_segment_set_number>:

bool seven_segment_get_dot(uint8_t index){
	return (digit[index].symbol & 0x80)?(true):(false);
}

void seven_segment_set_number(uint8_t index, uint8_t number){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
	if(number > 9){
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b09      	cmp	r3, #9
 800090c:	d901      	bls.n	8000912 <seven_segment_set_number+0x1a>
		number = 9;
 800090e:	2309      	movs	r3, #9
 8000910:	71bb      	strb	r3, [r7, #6]
	}

	seven_segment_set_symbol(index, digits[number]);
 8000912:	79bb      	ldrb	r3, [r7, #6]
 8000914:	4a05      	ldr	r2, [pc, #20]	; (800092c <seven_segment_set_number+0x34>)
 8000916:	5cd2      	ldrb	r2, [r2, r3]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff8f 	bl	8000840 <seven_segment_set_symbol>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	080034c4 	.word	0x080034c4

08000930 <BTN_Init>:
#include "button.h"
#include "button_port.h"

void BTN_Init(button_t *button, uint16_t id, uint16_t debounce_ms, uint16_t long_press_ms){
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	4608      	mov	r0, r1
 800093a:	4611      	mov	r1, r2
 800093c:	461a      	mov	r2, r3
 800093e:	4603      	mov	r3, r0
 8000940:	817b      	strh	r3, [r7, #10]
 8000942:	460b      	mov	r3, r1
 8000944:	813b      	strh	r3, [r7, #8]
 8000946:	4613      	mov	r3, r2
 8000948:	80fb      	strh	r3, [r7, #6]
    button->id = id;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	897a      	ldrh	r2, [r7, #10]
 800094e:	801a      	strh	r2, [r3, #0]
    button->long_press_ms = long_press_ms;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	80da      	strh	r2, [r3, #6]
    button->debounce_ms = debounce_ms;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	893a      	ldrh	r2, [r7, #8]
 800095a:	809a      	strh	r2, [r3, #4]
    button->status = BTN_IDLE;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2200      	movs	r2, #0
 8000960:	70da      	strb	r2, [r3, #3]
    button->timer = 0;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]

    /* Set initial button state */
    button->pressed = BTN_PL_Read(button->id);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f8e1 	bl	8000b34 <BTN_PL_Read>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	709a      	strb	r2, [r3, #2]
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <BTN_Main>:

void BTN_Main(button_t *button){
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
    bool state;

    switch(button->status){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	78db      	ldrb	r3, [r3, #3]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d05f      	beq.n	8000a52 <BTN_Main+0xd0>
 8000992:	2b02      	cmp	r3, #2
 8000994:	f300 8096 	bgt.w	8000ac4 <BTN_Main+0x142>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <BTN_Main+0x20>
 800099c:	2b01      	cmp	r3, #1
 800099e:	d01b      	beq.n	80009d8 <BTN_Main+0x56>
 80009a0:	e090      	b.n	8000ac4 <BTN_Main+0x142>
        case BTN_IDLE:
            if(button->timer){
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <BTN_Main+0x14a>
                return;
            }

            state = BTN_PL_Read(button->id);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f8bf 	bl	8000b34 <BTN_PL_Read>
 80009b6:	4603      	mov	r3, r0
 80009b8:	73fb      	strb	r3, [r7, #15]
            if(state != button->pressed){
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	789b      	ldrb	r3, [r3, #2]
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	f000 8085 	beq.w	8000ad0 <BTN_Main+0x14e>
                button->status = BTN_DEBOUNCE;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	70da      	strb	r2, [r3, #3]
                button->timer = button->debounce_ms;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	889b      	ldrh	r3, [r3, #4]
 80009d0:	461a      	mov	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	609a      	str	r2, [r3, #8]
            }
            break;
 80009d6:	e07b      	b.n	8000ad0 <BTN_Main+0x14e>

        case BTN_DEBOUNCE:
            if(button->timer){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d179      	bne.n	8000ad4 <BTN_Main+0x152>
                return;
            }

            state = BTN_PL_Read(button->id);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 f8a5 	bl	8000b34 <BTN_PL_Read>
 80009ea:	4603      	mov	r3, r0
 80009ec:	73fb      	strb	r3, [r7, #15]
            if(state != button->pressed){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	789b      	ldrb	r3, [r3, #2]
 80009f2:	7bfa      	ldrb	r2, [r7, #15]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d023      	beq.n	8000a40 <BTN_Main+0xbe>
                button->pressed = state;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7bfa      	ldrb	r2, [r7, #15]
 80009fc:	709a      	strb	r2, [r3, #2]

                if(state){
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d008      	beq.n	8000a16 <BTN_Main+0x94>
                    button->status = BTN_WAIT_LONG_PRESS;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2202      	movs	r2, #2
 8000a08:	70da      	strb	r2, [r3, #3]
                    button->timer = button->long_press_ms;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	88db      	ldrh	r3, [r3, #6]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	e007      	b.n	8000a26 <BTN_Main+0xa4>
                }
                else{
                    button->status = BTN_IDLE;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	70da      	strb	r2, [r3, #3]
                    button->timer = button->debounce_ms;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	889b      	ldrh	r3, [r3, #4]
 8000a20:	461a      	mov	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	609a      	str	r2, [r3, #8]
                }

                if(button->callback){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d054      	beq.n	8000ad8 <BTN_Main+0x156>
                    button->callback(button->id, BTN_STATE_UPDATED);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	8812      	ldrh	r2, [r2, #0]
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4798      	blx	r3
            }
            else{
                button->status = BTN_IDLE;
                button->timer = button->debounce_ms;
            }
            break;
 8000a3e:	e04b      	b.n	8000ad8 <BTN_Main+0x156>
                button->status = BTN_IDLE;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	70da      	strb	r2, [r3, #3]
                button->timer = button->debounce_ms;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	889b      	ldrh	r3, [r3, #4]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
            break;
 8000a50:	e042      	b.n	8000ad8 <BTN_Main+0x156>

        case BTN_WAIT_LONG_PRESS:
            state = BTN_PL_Read(button->id);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f86c 	bl	8000b34 <BTN_PL_Read>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73fb      	strb	r3, [r7, #15]

            /* Check if button is still pressed */
            if(state != button->pressed){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	789b      	ldrb	r3, [r3, #2]
 8000a64:	7bfa      	ldrb	r2, [r7, #15]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d014      	beq.n	8000a94 <BTN_Main+0x112>
                button->status = BTN_DEBOUNCE;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	70da      	strb	r2, [r3, #3]
                button->timer = button->debounce_ms;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	889b      	ldrh	r3, [r3, #4]
 8000a74:	461a      	mov	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	609a      	str	r2, [r3, #8]

                if(button->callback){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d02c      	beq.n	8000adc <BTN_Main+0x15a>
                    button->callback(button->id, BTN_SHORT_PRESS);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	8812      	ldrh	r2, [r2, #0]
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4798      	blx	r3
                }
                break;
 8000a92:	e023      	b.n	8000adc <BTN_Main+0x15a>
            }

            if((button->timer == 0) && (button->long_press_ms > 0)){
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d121      	bne.n	8000ae0 <BTN_Main+0x15e>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	88db      	ldrh	r3, [r3, #6]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d01d      	beq.n	8000ae0 <BTN_Main+0x15e>
                button->status = BTN_IDLE;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	70da      	strb	r2, [r3, #3]

                if(button->callback){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d016      	beq.n	8000ae0 <BTN_Main+0x15e>
                    button->callback(button->id, BTN_LONG_PRESS);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	8812      	ldrh	r2, [r2, #0]
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	2102      	movs	r1, #2
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4798      	blx	r3
                }
            }
            break;
 8000ac2:	e00d      	b.n	8000ae0 <BTN_Main+0x15e>

        default:
            button->status = BTN_IDLE;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	70da      	strb	r2, [r3, #3]
            break;
 8000aca:	e00a      	b.n	8000ae2 <BTN_Main+0x160>
                return;
 8000acc:	bf00      	nop
 8000ace:	e008      	b.n	8000ae2 <BTN_Main+0x160>
            break;
 8000ad0:	bf00      	nop
 8000ad2:	e006      	b.n	8000ae2 <BTN_Main+0x160>
                return;
 8000ad4:	bf00      	nop
 8000ad6:	e004      	b.n	8000ae2 <BTN_Main+0x160>
            break;
 8000ad8:	bf00      	nop
 8000ada:	e002      	b.n	8000ae2 <BTN_Main+0x160>
                break;
 8000adc:	bf00      	nop
 8000ade:	e000      	b.n	8000ae2 <BTN_Main+0x160>
            break;
 8000ae0:	bf00      	nop
    }
}
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <BTN_Tick>:

void BTN_Tick(button_t *button, uint32_t period){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
    if(button->timer > period){
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d206      	bcs.n	8000b0a <BTN_Tick+0x22>
        button->timer -= period;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	1ad2      	subs	r2, r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	609a      	str	r2, [r3, #8]
    }
    else{
        button->timer = 0;
    }
}
 8000b08:	e002      	b.n	8000b10 <BTN_Tick+0x28>
        button->timer = 0;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <BTN_RegisterCallback>:
bool BTN_IsPressed(button_t *button){
    return button->pressed;
}

/* Callback register */
void BTN_RegisterCallback(button_t *button, void (*callback)(uint8_t button_id, button_callback_event_t event)){
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
    button->callback = callback;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	60da      	str	r2, [r3, #12]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <BTN_PL_Read>:

void BTN_PL_Init(uint16_t id){
	buttons_state = 0;	/* All buttons is not pressed */
}

bool BTN_PL_Read(uint16_t id){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
    switch(id){
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	f200 80d4 	bhi.w	8000cee <BTN_PL_Read+0x1ba>
 8000b46:	a201      	add	r2, pc, #4	; (adr r2, 8000b4c <BTN_PL_Read+0x18>)
 8000b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4c:	08000b8d 	.word	0x08000b8d
 8000b50:	08000ba1 	.word	0x08000ba1
 8000b54:	08000bb7 	.word	0x08000bb7
 8000b58:	08000bcd 	.word	0x08000bcd
 8000b5c:	08000be3 	.word	0x08000be3
 8000b60:	08000bf9 	.word	0x08000bf9
 8000b64:	08000c0f 	.word	0x08000c0f
 8000b68:	08000c25 	.word	0x08000c25
 8000b6c:	08000c3b 	.word	0x08000c3b
 8000b70:	08000c51 	.word	0x08000c51
 8000b74:	08000c67 	.word	0x08000c67
 8000b78:	08000c7d 	.word	0x08000c7d
 8000b7c:	08000c93 	.word	0x08000c93
 8000b80:	08000ca9 	.word	0x08000ca9
 8000b84:	08000cbf 	.word	0x08000cbf
 8000b88:	08000cd5 	.word	0x08000cd5
        case BTN_0_ID: return (buttons_state & BTN_0_MASK)?(true):(false);
 8000b8c:	4b5b      	ldr	r3, [pc, #364]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf14      	ite	ne
 8000b98:	2301      	movne	r3, #1
 8000b9a:	2300      	moveq	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	e0a7      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_1_ID: return (buttons_state & BTN_1_MASK)?(true):(false);
 8000ba0:	4b56      	ldr	r3, [pc, #344]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	105b      	asrs	r3, r3, #1
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf14      	ite	ne
 8000bae:	2301      	movne	r3, #1
 8000bb0:	2300      	moveq	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	e09c      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_2_ID: return (buttons_state & BTN_2_MASK)?(true):(false);
 8000bb6:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	115b      	asrs	r3, r3, #5
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf14      	ite	ne
 8000bc4:	2301      	movne	r3, #1
 8000bc6:	2300      	moveq	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	e091      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_3_ID: return (buttons_state & BTN_3_MASK)?(true):(false);
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	125b      	asrs	r3, r3, #9
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bf14      	ite	ne
 8000bda:	2301      	movne	r3, #1
 8000bdc:	2300      	moveq	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	e086      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_4_ID: return (buttons_state & BTN_4_MASK)?(true):(false);
 8000be2:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	109b      	asrs	r3, r3, #2
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	bf14      	ite	ne
 8000bf0:	2301      	movne	r3, #1
 8000bf2:	2300      	moveq	r3, #0
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	e07b      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_5_ID: return (buttons_state & BTN_5_MASK)?(true):(false);
 8000bf8:	4b40      	ldr	r3, [pc, #256]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	119b      	asrs	r3, r3, #6
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	e070      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_6_ID: return (buttons_state & BTN_6_MASK)?(true):(false);
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	129b      	asrs	r3, r3, #10
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bf14      	ite	ne
 8000c1c:	2301      	movne	r3, #1
 8000c1e:	2300      	moveq	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	e065      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_7_ID: return (buttons_state & BTN_7_MASK)?(true):(false);
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	10db      	asrs	r3, r3, #3
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf14      	ite	ne
 8000c32:	2301      	movne	r3, #1
 8000c34:	2300      	moveq	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	e05a      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_8_ID: return (buttons_state & BTN_8_MASK)?(true):(false);
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	11db      	asrs	r3, r3, #7
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf14      	ite	ne
 8000c48:	2301      	movne	r3, #1
 8000c4a:	2300      	moveq	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	e04f      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_9_ID: return (buttons_state & BTN_9_MASK)?(true):(false);
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	12db      	asrs	r3, r3, #11
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	bf14      	ite	ne
 8000c5e:	2301      	movne	r3, #1
 8000c60:	2300      	moveq	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	e044      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_DOT_ID: return (buttons_state & BTN_DOT_MASK)?(true):(false);
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	111b      	asrs	r3, r3, #4
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	bf14      	ite	ne
 8000c74:	2301      	movne	r3, #1
 8000c76:	2300      	moveq	r3, #0
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	e039      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_EQUAL_ID: return (buttons_state & BTN_EQUAL_MASK)?(true):(false);
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	121b      	asrs	r3, r3, #8
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	e02e      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_ADD_ID: return (buttons_state & BTN_ADD_MASK)?(true):(false);
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	131b      	asrs	r3, r3, #12
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bf14      	ite	ne
 8000ca0:	2301      	movne	r3, #1
 8000ca2:	2300      	moveq	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	e023      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_SUBSTRACT_ID: return (buttons_state & BTN_SUBSTRACT_MASK)?(true):(false);
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	135b      	asrs	r3, r3, #13
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf14      	ite	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	2300      	moveq	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	e018      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_MULTIPLY_ID: return (buttons_state & BTN_MULTIPLY_MASK)?(true):(false);
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	139b      	asrs	r3, r3, #14
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf14      	ite	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	2300      	moveq	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	e00d      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        case BTN_DIVIDE_ID: return (buttons_state & BTN_DIVIDE_MASK)?(true):(false);
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <BTN_PL_Read+0x1c8>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	13db      	asrs	r3, r3, #15
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf14      	ite	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	2300      	moveq	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	e000      	b.n	8000cf0 <BTN_PL_Read+0x1bc>
        default:
            return false;
 8000cee:	2300      	movs	r3, #0
    }

    return false;
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000010e 	.word	0x2000010e

08000d00 <keyboard_run_led_effect>:
static void number_set_zero(calc_number_t *number);
static void number_show(calc_number_t *number);
static float number_convert_to_float(calc_number_t *number);
static void number_convert_from_float(float f, calc_number_t *number);

static void keyboard_run_led_effect(uint32_t *effect, uint32_t steps, uint32_t speed){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
		for(uint8_t i = 0; i < steps; i++){
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	75fb      	strb	r3, [r7, #23]
 8000d10:	e011      	b.n	8000d36 <keyboard_run_led_effect+0x36>
			keyboard_clear_led(KEY_LED_ALL_MASK);
 8000d12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d16:	f000 fd7f 	bl	8001818 <keyboard_clear_led>
			keyboard_set_led(effect[i]);
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	4413      	add	r3, r2
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fd63 	bl	80017f0 <keyboard_set_led>
			HAL_Delay(speed);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f001 f8e8 	bl	8001f00 <HAL_Delay>
		for(uint8_t i = 0; i < steps; i++){
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	3301      	adds	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d8e9      	bhi.n	8000d12 <keyboard_run_led_effect+0x12>
		}
		keyboard_clear_led(KEY_LED_ALL_MASK);
 8000d3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d42:	f000 fd69 	bl	8001818 <keyboard_clear_led>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <calculator_greetings>:

void calculator_greetings(void){
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
	/* Disable all segments */
	for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	e00c      	b.n	8000d74 <calculator_greetings+0x26>
		seven_segment_enable(seg, false);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fd5a 	bl	8000818 <seven_segment_enable>
		seven_segment_set_dot(seg, false);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fd95 	bl	8000898 <seven_segment_set_dot>
	for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	3301      	adds	r3, #1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	d9ef      	bls.n	8000d5a <calculator_greetings+0xc>
	}

	/* Set some text: CALC */
	seven_segment_enable(7, true);
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2007      	movs	r0, #7
 8000d7e:	f7ff fd4b 	bl	8000818 <seven_segment_enable>
	seven_segment_set_symbol(7, 0x39);
 8000d82:	2139      	movs	r1, #57	; 0x39
 8000d84:	2007      	movs	r0, #7
 8000d86:	f7ff fd5b 	bl	8000840 <seven_segment_set_symbol>
	seven_segment_enable(6, true);
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	2006      	movs	r0, #6
 8000d8e:	f7ff fd43 	bl	8000818 <seven_segment_enable>
	seven_segment_set_symbol(6, 0x77);
 8000d92:	2177      	movs	r1, #119	; 0x77
 8000d94:	2006      	movs	r0, #6
 8000d96:	f7ff fd53 	bl	8000840 <seven_segment_set_symbol>
	seven_segment_enable(5, true);
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2005      	movs	r0, #5
 8000d9e:	f7ff fd3b 	bl	8000818 <seven_segment_enable>
	seven_segment_set_symbol(5, 0x38);
 8000da2:	2138      	movs	r1, #56	; 0x38
 8000da4:	2005      	movs	r0, #5
 8000da6:	f7ff fd4b 	bl	8000840 <seven_segment_set_symbol>
	seven_segment_enable(4, true);
 8000daa:	2101      	movs	r1, #1
 8000dac:	2004      	movs	r0, #4
 8000dae:	f7ff fd33 	bl	8000818 <seven_segment_enable>
	seven_segment_set_symbol(4, 0x39);
 8000db2:	2139      	movs	r1, #57	; 0x39
 8000db4:	2004      	movs	r0, #4
 8000db6:	f7ff fd43 	bl	8000840 <seven_segment_set_symbol>

	HAL_Delay(1000);
 8000dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dbe:	f001 f89f 	bl	8001f00 <HAL_Delay>

	/* Disable all segments */
	for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71bb      	strb	r3, [r7, #6]
 8000dc6:	e00c      	b.n	8000de2 <calculator_greetings+0x94>
		seven_segment_enable(seg, false);
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fd23 	bl	8000818 <seven_segment_enable>
		seven_segment_set_dot(seg, false);
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fd5e 	bl	8000898 <seven_segment_set_dot>
	for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	3301      	adds	r3, #1
 8000de0:	71bb      	strb	r3, [r7, #6]
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	2b07      	cmp	r3, #7
 8000de6:	d9ef      	bls.n	8000dc8 <calculator_greetings+0x7a>
	}

	/* Set some text: CALC */
	seven_segment_enable(4, true);
 8000de8:	2101      	movs	r1, #1
 8000dea:	2004      	movs	r0, #4
 8000dec:	f7ff fd14 	bl	8000818 <seven_segment_enable>
	seven_segment_set_symbol(4, 0x79);
 8000df0:	2179      	movs	r1, #121	; 0x79
 8000df2:	2004      	movs	r0, #4
 8000df4:	f7ff fd24 	bl	8000840 <seven_segment_set_symbol>
	seven_segment_enable(3, true);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f7ff fd0c 	bl	8000818 <seven_segment_enable>
	seven_segment_set_symbol(3, 0x38);
 8000e00:	2138      	movs	r1, #56	; 0x38
 8000e02:	2003      	movs	r0, #3
 8000e04:	f7ff fd1c 	bl	8000840 <seven_segment_set_symbol>
	seven_segment_enable(2, true);
 8000e08:	2101      	movs	r1, #1
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f7ff fd04 	bl	8000818 <seven_segment_enable>
	seven_segment_set_symbol(2, 0x40);
 8000e10:	2140      	movs	r1, #64	; 0x40
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff fd14 	bl	8000840 <seven_segment_set_symbol>
	seven_segment_enable(1, true);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff fcfc 	bl	8000818 <seven_segment_enable>
	seven_segment_set_number(1, 2);
 8000e20:	2102      	movs	r1, #2
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff fd68 	bl	80008f8 <seven_segment_set_number>
	seven_segment_enable(0, true);
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fcf4 	bl	8000818 <seven_segment_enable>
	seven_segment_set_number(0, 1);
 8000e30:	2101      	movs	r1, #1
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fd60 	bl	80008f8 <seven_segment_set_number>

	HAL_Delay(1000);
 8000e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e3c:	f001 f860 	bl	8001f00 <HAL_Delay>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <calculator_init>:

void calculator_init(void){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	calculator_greetings();
 8000e4e:	f7ff ff7e 	bl	8000d4e <calculator_greetings>
	keyboard_run_led_effect(leds_effects_startup, sizeof(leds_effects_startup)/sizeof(leds_effects_startup[0]), 75);
 8000e52:	224b      	movs	r2, #75	; 0x4b
 8000e54:	211e      	movs	r1, #30
 8000e56:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <calculator_init+0x5c>)
 8000e58:	f7ff ff52 	bl	8000d00 <keyboard_run_led_effect>

	/* Disable all segments */
	for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	e00c      	b.n	8000e7c <calculator_init+0x34>
		seven_segment_enable(seg, false);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fcd6 	bl	8000818 <seven_segment_enable>
		seven_segment_set_dot(seg, false);
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fd11 	bl	8000898 <seven_segment_set_dot>
	for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	d9ef      	bls.n	8000e62 <calculator_init+0x1a>
	}

	number_set_zero(&display);
 8000e82:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <calculator_init+0x60>)
 8000e84:	f000 fa3c 	bl	8001300 <number_set_zero>
	result_float = 0;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <calculator_init+0x64>)
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
	operation = CALC_OP_NONE;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <calculator_init+0x68>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
	update = true;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <calculator_init+0x6c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000040 	.word	0x20000040
 8000ea8:	20000110 	.word	0x20000110
 8000eac:	20000120 	.word	0x20000120
 8000eb0:	20000124 	.word	0x20000124
 8000eb4:	20000126 	.word	0x20000126

08000eb8 <calculator_main>:

void calculator_main(void){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	if(update){
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <calculator_main+0xb0>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d04c      	beq.n	8000f60 <calculator_main+0xa8>
		update = false;
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <calculator_main+0xb0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]

		/* Disable all segments */
		for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 8000ecc:	2300      	movs	r3, #0
 8000ece:	71fb      	strb	r3, [r7, #7]
 8000ed0:	e00c      	b.n	8000eec <calculator_main+0x34>
			seven_segment_enable(seg, false);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fc9e 	bl	8000818 <seven_segment_enable>
			seven_segment_set_dot(seg, false);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fcd9 	bl	8000898 <seven_segment_set_dot>
		for(uint8_t seg = 0; seg < DIGITS_COUNT; seg++){
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b07      	cmp	r3, #7
 8000ef0:	d9ef      	bls.n	8000ed2 <calculator_main+0x1a>
		}

		if(error_timer){
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <calculator_main+0xb4>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d02f      	beq.n	8000f5a <calculator_main+0xa2>
			seven_segment_enable(2, true);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2002      	movs	r0, #2
 8000efe:	f7ff fc8b 	bl	8000818 <seven_segment_enable>
			seven_segment_set_symbol(2, error_msg[0]);
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <calculator_main+0xb8>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f7ff fc99 	bl	8000840 <seven_segment_set_symbol>
			seven_segment_enable(1, true);
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fc81 	bl	8000818 <seven_segment_enable>
			seven_segment_set_symbol(1, error_msg[1]);
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <calculator_main+0xb8>)
 8000f18:	785b      	ldrb	r3, [r3, #1]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f7ff fc8f 	bl	8000840 <seven_segment_set_symbol>
			seven_segment_enable(0, true);
 8000f22:	2101      	movs	r1, #1
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fc77 	bl	8000818 <seven_segment_enable>
			seven_segment_set_symbol(0, error_msg[2]);
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <calculator_main+0xb8>)
 8000f2c:	789b      	ldrb	r3, [r3, #2]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff fc85 	bl	8000840 <seven_segment_set_symbol>

			/* Clear result & display */
			result_float = 0;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <calculator_main+0xbc>)
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
			next_argument = false;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <calculator_main+0xc0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
			number_set_zero(&display);
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <calculator_main+0xc4>)
 8000f46:	f000 f9db 	bl	8001300 <number_set_zero>
			operation = CALC_OP_NONE;
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <calculator_main+0xc8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
			keyboard_clear_led(KEY_ADD_LED_MASK|KEY_SUBSTRACT_LED_MASK|KEY_MULTIPLY_LED_MASK|KEY_DIVIDE_LED_MASK);
 8000f50:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8000f54:	f000 fc60 	bl	8001818 <keyboard_clear_led>
			return;
 8000f58:	e002      	b.n	8000f60 <calculator_main+0xa8>
		}

		/* Display data on screen */
		number_show(&display);
 8000f5a:	4808      	ldr	r0, [pc, #32]	; (8000f7c <calculator_main+0xc4>)
 8000f5c:	f000 f9e8 	bl	8001330 <number_show>
	}
}
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000126 	.word	0x20000126
 8000f6c:	20000128 	.word	0x20000128
 8000f70:	200000c8 	.word	0x200000c8
 8000f74:	20000120 	.word	0x20000120
 8000f78:	20000125 	.word	0x20000125
 8000f7c:	20000110 	.word	0x20000110
 8000f80:	20000124 	.word	0x20000124

08000f84 <calculator_tick>:

void calculator_tick(uint16_t period){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
	if(error_timer){
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <calculator_tick+0x44>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d012      	beq.n	8000fbc <calculator_tick+0x38>
		if(error_timer > period){
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <calculator_tick+0x44>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <calculator_tick+0x2c>
			error_timer -= period;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <calculator_tick+0x44>)
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <calculator_tick+0x44>)
 8000fac:	801a      	strh	r2, [r3, #0]
		else{
			error_timer = 0;
			update = true;
		}
	}
}
 8000fae:	e005      	b.n	8000fbc <calculator_tick+0x38>
			error_timer = 0;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <calculator_tick+0x44>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	801a      	strh	r2, [r3, #0]
			update = true;
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <calculator_tick+0x48>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000128 	.word	0x20000128
 8000fcc:	20000126 	.word	0x20000126

08000fd0 <keyboard_callback>:

void keyboard_callback(keyboard_key_id key, keyboard_event_id event){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	71bb      	strb	r3, [r7, #6]
	uint8_t digits_limit;

	if(event == KEY_SHORT_PRESS){
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	f040 80ca 	bne.w	800117c <keyboard_callback+0x1ac>
		switch(key){
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	3b0a      	subs	r3, #10
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d862      	bhi.n	80010b6 <keyboard_callback+0xe6>
 8000ff0:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <keyboard_callback+0x28>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001011 	.word	0x08001011
 8000ffc:	08001033 	.word	0x08001033
 8001000:	08001047 	.word	0x08001047
 8001004:	08001063 	.word	0x08001063
 8001008:	0800107f 	.word	0x0800107f
 800100c:	0800109b 	.word	0x0800109b
			case KEY_DOT_ID:
				if(!next_argument && display.fraction_digits == 0){
 8001010:	4b73      	ldr	r3, [pc, #460]	; (80011e0 <keyboard_callback+0x210>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f083 0301 	eor.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 80d2 	beq.w	80011c4 <keyboard_callback+0x1f4>
 8001020:	4b70      	ldr	r3, [pc, #448]	; (80011e4 <keyboard_callback+0x214>)
 8001022:	7b1b      	ldrb	r3, [r3, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	f040 80cd 	bne.w	80011c4 <keyboard_callback+0x1f4>
					display.fraction_digits = 1;
 800102a:	4b6e      	ldr	r3, [pc, #440]	; (80011e4 <keyboard_callback+0x214>)
 800102c:	2201      	movs	r2, #1
 800102e:	731a      	strb	r2, [r3, #12]
				}
				break;
 8001030:	e0c8      	b.n	80011c4 <keyboard_callback+0x1f4>

			case KEY_EQUAL_ID:
				calculator_calc();
 8001032:	f000 f8e1 	bl	80011f8 <calculator_calc>
				operation = CALC_OP_NONE;
 8001036:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <keyboard_callback+0x218>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
				keyboard_clear_led(KEY_ADD_LED_MASK|KEY_SUBSTRACT_LED_MASK|KEY_MULTIPLY_LED_MASK|KEY_DIVIDE_LED_MASK);
 800103c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001040:	f000 fbea 	bl	8001818 <keyboard_clear_led>
				break;
 8001044:	e0c3      	b.n	80011ce <keyboard_callback+0x1fe>

			case KEY_ADD_ID:
				calculator_calc();
 8001046:	f000 f8d7 	bl	80011f8 <calculator_calc>
				operation = CALC_OP_ADD;
 800104a:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <keyboard_callback+0x218>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
				keyboard_clear_led(KEY_ADD_LED_MASK|KEY_SUBSTRACT_LED_MASK|KEY_MULTIPLY_LED_MASK|KEY_DIVIDE_LED_MASK);
 8001050:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001054:	f000 fbe0 	bl	8001818 <keyboard_clear_led>
				keyboard_set_led(KEY_ADD_LED_MASK);
 8001058:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800105c:	f000 fbc8 	bl	80017f0 <keyboard_set_led>
				break;
 8001060:	e0b5      	b.n	80011ce <keyboard_callback+0x1fe>

			case KEY_SUBSTRACT_ID:
				calculator_calc();
 8001062:	f000 f8c9 	bl	80011f8 <calculator_calc>
				operation = CALC_OP_SUBSTRACT;
 8001066:	4b60      	ldr	r3, [pc, #384]	; (80011e8 <keyboard_callback+0x218>)
 8001068:	2202      	movs	r2, #2
 800106a:	701a      	strb	r2, [r3, #0]
				keyboard_clear_led(KEY_ADD_LED_MASK|KEY_SUBSTRACT_LED_MASK|KEY_MULTIPLY_LED_MASK|KEY_DIVIDE_LED_MASK);
 800106c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001070:	f000 fbd2 	bl	8001818 <keyboard_clear_led>
				keyboard_set_led(KEY_SUBSTRACT_LED_MASK);
 8001074:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001078:	f000 fbba 	bl	80017f0 <keyboard_set_led>
				break;
 800107c:	e0a7      	b.n	80011ce <keyboard_callback+0x1fe>

			case KEY_MULTIPLY_ID:
				calculator_calc();
 800107e:	f000 f8bb 	bl	80011f8 <calculator_calc>
				operation = CALC_OP_MULTIPLY;
 8001082:	4b59      	ldr	r3, [pc, #356]	; (80011e8 <keyboard_callback+0x218>)
 8001084:	2203      	movs	r2, #3
 8001086:	701a      	strb	r2, [r3, #0]
				keyboard_clear_led(KEY_ADD_LED_MASK|KEY_SUBSTRACT_LED_MASK|KEY_MULTIPLY_LED_MASK|KEY_DIVIDE_LED_MASK);
 8001088:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800108c:	f000 fbc4 	bl	8001818 <keyboard_clear_led>
				keyboard_set_led(KEY_MULTIPLY_LED_MASK);
 8001090:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001094:	f000 fbac 	bl	80017f0 <keyboard_set_led>
				break;
 8001098:	e099      	b.n	80011ce <keyboard_callback+0x1fe>

			case KEY_DIVIDE_ID:
				calculator_calc();
 800109a:	f000 f8ad 	bl	80011f8 <calculator_calc>
				operation = CALC_OP_DIVIDE;
 800109e:	4b52      	ldr	r3, [pc, #328]	; (80011e8 <keyboard_callback+0x218>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	701a      	strb	r2, [r3, #0]
				keyboard_clear_led(KEY_ADD_LED_MASK|KEY_SUBSTRACT_LED_MASK|KEY_MULTIPLY_LED_MASK|KEY_DIVIDE_LED_MASK);
 80010a4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80010a8:	f000 fbb6 	bl	8001818 <keyboard_clear_led>
				keyboard_set_led(KEY_DIVIDE_LED_MASK);
 80010ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010b0:	f000 fb9e 	bl	80017f0 <keyboard_set_led>
				break;
 80010b4:	e08b      	b.n	80011ce <keyboard_callback+0x1fe>

			default:
				if(next_argument){
 80010b6:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <keyboard_callback+0x210>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <keyboard_callback+0xfa>
					next_argument = false;
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <keyboard_callback+0x210>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
					number_set_zero(&display);
 80010c4:	4847      	ldr	r0, [pc, #284]	; (80011e4 <keyboard_callback+0x214>)
 80010c6:	f000 f91b 	bl	8001300 <number_set_zero>
				}

				digits_limit = DIGITS_COUNT;
 80010ca:	2308      	movs	r3, #8
 80010cc:	73fb      	strb	r3, [r7, #15]
				if(display.negative){
 80010ce:	4b45      	ldr	r3, [pc, #276]	; (80011e4 <keyboard_callback+0x214>)
 80010d0:	7b5b      	ldrb	r3, [r3, #13]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <keyboard_callback+0x10c>
					digits_limit -= 1;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	3b01      	subs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
				}

				if(display.fraction_digits){
 80010dc:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <keyboard_callback+0x214>)
 80010de:	7b1b      	ldrb	r3, [r3, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d025      	beq.n	8001130 <keyboard_callback+0x160>
					if(display.fraction){
 80010e4:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <keyboard_callback+0x214>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d01a      	beq.n	8001122 <keyboard_callback+0x152>
						if(display.fraction_digits < digits_limit){
 80010ec:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <keyboard_callback+0x214>)
 80010ee:	7b1b      	ldrb	r3, [r3, #12]
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d968      	bls.n	80011c8 <keyboard_callback+0x1f8>
							display.fraction *= 10;
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <keyboard_callback+0x214>)
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	461a      	mov	r2, r3
 8001104:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <keyboard_callback+0x214>)
 8001106:	609a      	str	r2, [r3, #8]
							display.fraction += key;
 8001108:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <keyboard_callback+0x214>)
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4413      	add	r3, r2
 8001110:	4a34      	ldr	r2, [pc, #208]	; (80011e4 <keyboard_callback+0x214>)
 8001112:	6093      	str	r3, [r2, #8]
							display.fraction_digits++;
 8001114:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <keyboard_callback+0x214>)
 8001116:	7b1b      	ldrb	r3, [r3, #12]
 8001118:	3301      	adds	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <keyboard_callback+0x214>)
 800111e:	731a      	strb	r2, [r3, #12]
						display.absolute *= 10;
					}

					display.absolute += key;
				}
				break;
 8001120:	e052      	b.n	80011c8 <keyboard_callback+0x1f8>
						display.fraction += key;
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <keyboard_callback+0x214>)
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4413      	add	r3, r2
 800112a:	4a2e      	ldr	r2, [pc, #184]	; (80011e4 <keyboard_callback+0x214>)
 800112c:	6093      	str	r3, [r2, #8]
				break;
 800112e:	e04b      	b.n	80011c8 <keyboard_callback+0x1f8>
				else if(display.absolute_digits < digits_limit){
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <keyboard_callback+0x214>)
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	429a      	cmp	r2, r3
 8001138:	d946      	bls.n	80011c8 <keyboard_callback+0x1f8>
					if(display.absolute == 0 && key == KEY_0_ID){
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <keyboard_callback+0x214>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <keyboard_callback+0x178>
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d041      	beq.n	80011cc <keyboard_callback+0x1fc>
					if(display.absolute){
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <keyboard_callback+0x214>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00e      	beq.n	800116e <keyboard_callback+0x19e>
						display.absolute_digits++;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <keyboard_callback+0x214>)
 8001152:	791b      	ldrb	r3, [r3, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <keyboard_callback+0x214>)
 800115a:	711a      	strb	r2, [r3, #4]
						display.absolute *= 10;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <keyboard_callback+0x214>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	461a      	mov	r2, r3
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <keyboard_callback+0x214>)
 800116c:	601a      	str	r2, [r3, #0]
					display.absolute += key;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <keyboard_callback+0x214>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4413      	add	r3, r2
 8001176:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <keyboard_callback+0x214>)
 8001178:	6013      	str	r3, [r2, #0]
				break;
 800117a:	e025      	b.n	80011c8 <keyboard_callback+0x1f8>
		}
	}
	else if(event == KEY_LONG_PRESS){
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	2b08      	cmp	r3, #8
 8001180:	d129      	bne.n	80011d6 <keyboard_callback+0x206>
		switch(key){
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b0b      	cmp	r3, #11
 8001186:	d002      	beq.n	800118e <keyboard_callback+0x1be>
 8001188:	2b0d      	cmp	r3, #13
 800118a:	d017      	beq.n	80011bc <keyboard_callback+0x1ec>
			case KEY_SUBSTRACT_ID:
				display.negative = true;
				break;

			default:
				return;
 800118c:	e024      	b.n	80011d8 <keyboard_callback+0x208>
				result_float = 0;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <keyboard_callback+0x21c>)
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
				next_argument = false;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <keyboard_callback+0x210>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
				number_set_zero(&display);
 800119c:	4811      	ldr	r0, [pc, #68]	; (80011e4 <keyboard_callback+0x214>)
 800119e:	f000 f8af 	bl	8001300 <number_set_zero>
				keyboard_clear_led(KEY_ADD_LED_MASK|KEY_SUBSTRACT_LED_MASK|KEY_MULTIPLY_LED_MASK|KEY_DIVIDE_LED_MASK);
 80011a2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80011a6:	f000 fb37 	bl	8001818 <keyboard_clear_led>
				keyboard_run_led_effect(leds_effects_clear, sizeof(leds_effects_clear)/sizeof(leds_effects_clear[0]), 30);
 80011aa:	221e      	movs	r2, #30
 80011ac:	2104      	movs	r1, #4
 80011ae:	4810      	ldr	r0, [pc, #64]	; (80011f0 <keyboard_callback+0x220>)
 80011b0:	f7ff fda6 	bl	8000d00 <keyboard_run_led_effect>
				operation = CALC_OP_NONE;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <keyboard_callback+0x218>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
				break;
 80011ba:	e008      	b.n	80011ce <keyboard_callback+0x1fe>
				display.negative = true;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <keyboard_callback+0x214>)
 80011be:	2201      	movs	r2, #1
 80011c0:	735a      	strb	r2, [r3, #13]
				break;
 80011c2:	e004      	b.n	80011ce <keyboard_callback+0x1fe>
				break;
 80011c4:	bf00      	nop
 80011c6:	e002      	b.n	80011ce <keyboard_callback+0x1fe>
				break;
 80011c8:	bf00      	nop
 80011ca:	e000      	b.n	80011ce <keyboard_callback+0x1fe>
						break;
 80011cc:	bf00      	nop
	}
	else{
		return;
	}

	update = true;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <keyboard_callback+0x224>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e000      	b.n	80011d8 <keyboard_callback+0x208>
		return;
 80011d6:	bf00      	nop
}
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000125 	.word	0x20000125
 80011e4:	20000110 	.word	0x20000110
 80011e8:	20000124 	.word	0x20000124
 80011ec:	20000120 	.word	0x20000120
 80011f0:	200000b8 	.word	0x200000b8
 80011f4:	20000126 	.word	0x20000126

080011f8 <calculator_calc>:

static void calculator_calc(void){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	static float tmp;

	if(operation == CALC_OP_NONE){
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <calculator_calc+0xf0>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d109      	bne.n	8001218 <calculator_calc+0x20>
		result_float = number_convert_to_float(&display);
 8001204:	4839      	ldr	r0, [pc, #228]	; (80012ec <calculator_calc+0xf4>)
 8001206:	f000 f985 	bl	8001514 <number_convert_to_float>
 800120a:	4603      	mov	r3, r0
 800120c:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <calculator_calc+0xf8>)
 800120e:	6013      	str	r3, [r2, #0]
		next_argument = true;
 8001210:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <calculator_calc+0xfc>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
		return;
 8001216:	e066      	b.n	80012e6 <calculator_calc+0xee>
	}

	tmp = number_convert_to_float(&display);
 8001218:	4834      	ldr	r0, [pc, #208]	; (80012ec <calculator_calc+0xf4>)
 800121a:	f000 f97b 	bl	8001514 <number_convert_to_float>
 800121e:	4603      	mov	r3, r0
 8001220:	4a35      	ldr	r2, [pc, #212]	; (80012f8 <calculator_calc+0x100>)
 8001222:	6013      	str	r3, [r2, #0]

	switch(operation){
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <calculator_calc+0xf0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	3b01      	subs	r3, #1
 800122a:	2b03      	cmp	r3, #3
 800122c:	d85a      	bhi.n	80012e4 <calculator_calc+0xec>
 800122e:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <calculator_calc+0x3c>)
 8001230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001234:	08001245 	.word	0x08001245
 8001238:	0800125f 	.word	0x0800125f
 800123c:	08001279 	.word	0x08001279
 8001240:	08001293 	.word	0x08001293
		case CALC_OP_ADD: result_float += tmp; break;
 8001244:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <calculator_calc+0xf8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2b      	ldr	r2, [pc, #172]	; (80012f8 <calculator_calc+0x100>)
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe ff82 	bl	8000158 <__addsf3>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <calculator_calc+0xf8>)
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e035      	b.n	80012ca <calculator_calc+0xd2>
		case CALC_OP_SUBSTRACT: result_float -= tmp; break;
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <calculator_calc+0xf8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <calculator_calc+0x100>)
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe ff73 	bl	8000154 <__aeabi_fsub>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <calculator_calc+0xf8>)
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e028      	b.n	80012ca <calculator_calc+0xd2>
		case CALC_OP_MULTIPLY: result_float *= tmp; break;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <calculator_calc+0xf8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <calculator_calc+0x100>)
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f870 	bl	8000368 <__aeabi_fmul>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <calculator_calc+0xf8>)
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e01b      	b.n	80012ca <calculator_calc+0xd2>
		case CALC_OP_DIVIDE:
			if(tmp == 0){
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <calculator_calc+0x100>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f04f 0100 	mov.w	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f9f8 	bl	8000690 <__aeabi_fcmpeq>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <calculator_calc+0xb8>
				error_timer = ERROR_MSG_SHOW_TIME_MS;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <calculator_calc+0x104>)
 80012a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ac:	801a      	strh	r2, [r3, #0]
				break;
 80012ae:	e00c      	b.n	80012ca <calculator_calc+0xd2>
			}

			result_float /= tmp;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <calculator_calc+0xf8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <calculator_calc+0x100>)
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f908 	bl	80004d0 <__aeabi_fdiv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <calculator_calc+0xf8>)
 80012c6:	601a      	str	r2, [r3, #0]
			break;
 80012c8:	bf00      	nop

		default:
			return;
	}

	number_convert_from_float(result_float, &display);
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <calculator_calc+0xf8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4907      	ldr	r1, [pc, #28]	; (80012ec <calculator_calc+0xf4>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f965 	bl	80015a0 <number_convert_from_float>
	operation = CALC_OP_NONE;
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <calculator_calc+0xf0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
	next_argument = true;
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <calculator_calc+0xfc>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	e000      	b.n	80012e6 <calculator_calc+0xee>
			return;
 80012e4:	bf00      	nop
}
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000124 	.word	0x20000124
 80012ec:	20000110 	.word	0x20000110
 80012f0:	20000120 	.word	0x20000120
 80012f4:	20000125 	.word	0x20000125
 80012f8:	2000012c 	.word	0x2000012c
 80012fc:	20000128 	.word	0x20000128

08001300 <number_set_zero>:

static void number_set_zero(calc_number_t *number){
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	number->absolute = 0;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
	number->absolute_digits = 1;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	711a      	strb	r2, [r3, #4]
	number->fraction = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
	number->fraction_digits = 0;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	731a      	strb	r2, [r3, #12]
	number->negative = false;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	735a      	strb	r2, [r3, #13]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <number_show>:

static void number_show(calc_number_t *number){
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint8_t digits_capacity = DIGITS_COUNT;
 8001338:	2308      	movs	r3, #8
 800133a:	75fb      	strb	r3, [r7, #23]
	uint8_t digits_absolute = number->absolute_digits;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	75bb      	strb	r3, [r7, #22]
	uint8_t digits_fraction = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	757b      	strb	r3, [r7, #21]
	uint8_t digit_offset = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	753b      	strb	r3, [r7, #20]
	uint32_t temp;
	uint8_t i;

	/* Calculate digit offset for fraction */
	if(number->fraction_digits){
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7b1b      	ldrb	r3, [r3, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d045      	beq.n	80013de <number_show+0xae>
		if(number->fraction > 0){
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d03c      	beq.n	80013d4 <number_show+0xa4>
			if(number->negative){
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7b5b      	ldrb	r3, [r3, #13]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <number_show+0x38>
				digits_capacity--;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	3b01      	subs	r3, #1
 8001366:	75fb      	strb	r3, [r7, #23]
			}

			if(number->absolute_digits >= digits_capacity){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	7dfa      	ldrb	r2, [r7, #23]
 800136e:	429a      	cmp	r2, r3
 8001370:	d804      	bhi.n	800137c <number_show+0x4c>
				/* Show only dot, we don't have space for fraction show */
				seven_segment_set_dot(0, true);
 8001372:	2101      	movs	r1, #1
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fa8f 	bl	8000898 <seven_segment_set_dot>
 800137a:	e014      	b.n	80013a6 <number_show+0x76>
			}
			else if(DIGITS_COUNT - number->absolute_digits > number->fraction_digits){
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	791b      	ldrb	r3, [r3, #4]
 8001380:	f1c3 0308 	rsb	r3, r3, #8
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	7b12      	ldrb	r2, [r2, #12]
 8001388:	4293      	cmp	r3, r2
 800138a:	dd05      	ble.n	8001398 <number_show+0x68>
				digits_fraction = number->fraction_digits;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7b1b      	ldrb	r3, [r3, #12]
 8001390:	757b      	strb	r3, [r7, #21]
				digit_offset = digits_fraction;
 8001392:	7d7b      	ldrb	r3, [r7, #21]
 8001394:	753b      	strb	r3, [r7, #20]
 8001396:	e006      	b.n	80013a6 <number_show+0x76>
			}
			else{
				digits_fraction = digits_capacity - number->absolute_digits;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	7dfa      	ldrb	r2, [r7, #23]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	757b      	strb	r3, [r7, #21]
				digit_offset = digits_fraction;
 80013a2:	7d7b      	ldrb	r3, [r7, #21]
 80013a4:	753b      	strb	r3, [r7, #20]
			}

			if(number->negative){
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7b5b      	ldrb	r3, [r3, #13]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d034      	beq.n	8001418 <number_show+0xe8>
				seven_segment_enable(digits_fraction + number->absolute_digits, true);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	791a      	ldrb	r2, [r3, #4]
 80013b2:	7d7b      	ldrb	r3, [r7, #21]
 80013b4:	4413      	add	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2101      	movs	r1, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fa2c 	bl	8000818 <seven_segment_enable>
				seven_segment_set_symbol(digits_fraction + number->absolute_digits, 0x40);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	791a      	ldrb	r2, [r3, #4]
 80013c4:	7d7b      	ldrb	r3, [r7, #21]
 80013c6:	4413      	add	r3, r2
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2140      	movs	r1, #64	; 0x40
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fa37 	bl	8000840 <seven_segment_set_symbol>
 80013d2:	e021      	b.n	8001418 <number_show+0xe8>
			}
		}
		else{
			/* Show only dot */
			seven_segment_set_dot(0, true);
 80013d4:	2101      	movs	r1, #1
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff fa5e 	bl	8000898 <seven_segment_set_dot>
 80013dc:	e01c      	b.n	8001418 <number_show+0xe8>
		}
	}
	else{
		/* If number is negative - check if number digits fit on screen */
		if(number->negative){
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7b5b      	ldrb	r3, [r3, #13]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d018      	beq.n	8001418 <number_show+0xe8>
			if(digits_absolute >= digits_capacity){
 80013e6:	7dba      	ldrb	r2, [r7, #22]
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d30a      	bcc.n	8001404 <number_show+0xd4>
				digits_absolute--;
 80013ee:	7dbb      	ldrb	r3, [r7, #22]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	75bb      	strb	r3, [r7, #22]

				if(number->absolute >= 10000000){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a43      	ldr	r2, [pc, #268]	; (8001508 <number_show+0x1d8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d302      	bcc.n	8001404 <number_show+0xd4>
					number->absolute = 9999999;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a42      	ldr	r2, [pc, #264]	; (800150c <number_show+0x1dc>)
 8001402:	601a      	str	r2, [r3, #0]
				}
			}

			seven_segment_enable(digits_absolute, true);
 8001404:	7dbb      	ldrb	r3, [r7, #22]
 8001406:	2101      	movs	r1, #1
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fa05 	bl	8000818 <seven_segment_enable>
			seven_segment_set_symbol(digits_absolute, 0x40);
 800140e:	7dbb      	ldrb	r3, [r7, #22]
 8001410:	2140      	movs	r1, #64	; 0x40
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fa14 	bl	8000840 <seven_segment_set_symbol>
		}
	}

	/* Show absolute part */
	temp = number->absolute;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	613b      	str	r3, [r7, #16]
	for(i = 0; i < digits_absolute; i++){
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e022      	b.n	800146a <number_show+0x13a>
		seven_segment_enable(i + digit_offset, true);
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	7d3b      	ldrb	r3, [r7, #20]
 8001428:	4413      	add	r3, r2
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2101      	movs	r1, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f9f2 	bl	8000818 <seven_segment_enable>
		seven_segment_set_number(i + digit_offset, temp % 10);
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	7d3b      	ldrb	r3, [r7, #20]
 8001438:	4413      	add	r3, r2
 800143a:	b2d8      	uxtb	r0, r3
 800143c:	6939      	ldr	r1, [r7, #16]
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <number_show+0x1e0>)
 8001440:	fba3 2301 	umull	r2, r3, r3, r1
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	1aca      	subs	r2, r1, r3
 8001450:	b2d3      	uxtb	r3, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fa50 	bl	80008f8 <seven_segment_set_number>
		temp /= 10;
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4a2d      	ldr	r2, [pc, #180]	; (8001510 <number_show+0x1e0>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	613b      	str	r3, [r7, #16]
	for(i = 0; i < digits_absolute; i++){
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	429a      	cmp	r2, r3
 8001470:	d3d8      	bcc.n	8001424 <number_show+0xf4>
	}

	/* Show fraction part */
	if(digits_fraction){
 8001472:	7d7b      	ldrb	r3, [r7, #21]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d043      	beq.n	8001500 <number_show+0x1d0>
		temp = number->fraction;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
		if(digits_fraction < number->fraction_digits){
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7b1b      	ldrb	r3, [r3, #12]
 8001482:	7d7a      	ldrb	r2, [r7, #21]
 8001484:	429a      	cmp	r2, r3
 8001486:	d211      	bcs.n	80014ac <number_show+0x17c>
			i = number->fraction_digits - digits_fraction;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7b1a      	ldrb	r2, [r3, #12]
 800148c:	7d7b      	ldrb	r3, [r7, #21]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	73fb      	strb	r3, [r7, #15]
			while(i){
 8001492:	e008      	b.n	80014a6 <number_show+0x176>
				temp /= 10;
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <number_show+0x1e0>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	08db      	lsrs	r3, r3, #3
 800149e:	613b      	str	r3, [r7, #16]
				i--;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
			while(i){
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f3      	bne.n	8001494 <number_show+0x164>
			}
		}

		seven_segment_set_dot(digit_offset, true);
 80014ac:	7d3b      	ldrb	r3, [r7, #20]
 80014ae:	2101      	movs	r1, #1
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f9f1 	bl	8000898 <seven_segment_set_dot>
		for(i = 0; i < digits_fraction; i++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e01d      	b.n	80014f8 <number_show+0x1c8>
			seven_segment_enable(i, true);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2101      	movs	r1, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f9a9 	bl	8000818 <seven_segment_enable>
			seven_segment_set_number(i, temp % 10);
 80014c6:	6939      	ldr	r1, [r7, #16]
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <number_show+0x1e0>)
 80014ca:	fba3 2301 	umull	r2, r3, r3, r1
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	1aca      	subs	r2, r1, r3
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fa09 	bl	80008f8 <seven_segment_set_number>
			temp /= 10;
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4a09      	ldr	r2, [pc, #36]	; (8001510 <number_show+0x1e0>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	08db      	lsrs	r3, r3, #3
 80014f0:	613b      	str	r3, [r7, #16]
		for(i = 0; i < digits_fraction; i++){
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	3301      	adds	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	7d7b      	ldrb	r3, [r7, #21]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d3dd      	bcc.n	80014bc <number_show+0x18c>
		}
	}
}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	00989680 	.word	0x00989680
 800150c:	0098967f 	.word	0x0098967f
 8001510:	cccccccd 	.word	0xcccccccd

08001514 <number_convert_to_float>:

static float number_convert_to_float(calc_number_t *number){
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	float tmp = 0;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]

	/* Fraction part */
	if(number->fraction_digits){
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7b1b      	ldrb	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d01e      	beq.n	8001568 <number_convert_to_float+0x54>
		uint32_t i = number->fraction_digits;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7b1b      	ldrb	r3, [r3, #12]
 800152e:	60bb      	str	r3, [r7, #8]
		tmp = 1;
 8001530:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001534:	60fb      	str	r3, [r7, #12]
		while(i){
 8001536:	e008      	b.n	800154a <number_convert_to_float+0x36>
			tmp *= 10;
 8001538:	4918      	ldr	r1, [pc, #96]	; (800159c <number_convert_to_float+0x88>)
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7fe ff14 	bl	8000368 <__aeabi_fmul>
 8001540:	4603      	mov	r3, r0
 8001542:	60fb      	str	r3, [r7, #12]
			i--;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	3b01      	subs	r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
		while(i){
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f3      	bne.n	8001538 <number_convert_to_float+0x24>
		}

		tmp = (float)number->fraction / tmp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe feaf 	bl	80002b8 <__aeabi_ui2f>
 800155a:	4603      	mov	r3, r0
 800155c:	68f9      	ldr	r1, [r7, #12]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ffb6 	bl	80004d0 <__aeabi_fdiv>
 8001564:	4603      	mov	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
	}

	tmp += (float)number->absolute;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe fea3 	bl	80002b8 <__aeabi_ui2f>
 8001572:	4603      	mov	r3, r0
 8001574:	4619      	mov	r1, r3
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7fe fdee 	bl	8000158 <__addsf3>
 800157c:	4603      	mov	r3, r0
 800157e:	60fb      	str	r3, [r7, #12]

	if(number->negative){
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7b5b      	ldrb	r3, [r3, #13]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <number_convert_to_float+0x7c>
		tmp = -tmp;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800158e:	60fb      	str	r3, [r7, #12]
	}

	return tmp;
 8001590:	68fb      	ldr	r3, [r7, #12]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	41200000 	.word	0x41200000

080015a0 <number_convert_from_float>:

static void number_convert_from_float(float f, calc_number_t *number){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	float ftemp;

	number_set_zero(number);
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	f7ff fea8 	bl	8001300 <number_set_zero>

	/* Set sign */
	if(f < 0){
 80015b0:	f04f 0100 	mov.w	r1, #0
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff f875 	bl	80006a4 <__aeabi_fcmplt>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <number_convert_from_float+0x26>
		number->negative = true;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	735a      	strb	r2, [r3, #13]
	}

	/* Check range for 8-digit display */
	if(f > 99999999){
 80015c6:	494f      	ldr	r1, [pc, #316]	; (8001704 <number_convert_from_float+0x164>)
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff f889 	bl	80006e0 <__aeabi_fcmpgt>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <number_convert_from_float+0x3c>
		number->absolute = 99999999;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <number_convert_from_float+0x168>)
 80015d8:	601a      	str	r2, [r3, #0]
		return;
 80015da:	e090      	b.n	80016fe <number_convert_from_float+0x15e>
	}
	else if(f < -9999999){
 80015dc:	494b      	ldr	r1, [pc, #300]	; (800170c <number_convert_from_float+0x16c>)
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff f860 	bl	80006a4 <__aeabi_fcmplt>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <number_convert_from_float+0x52>
		number->absolute = 9999999;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	4a48      	ldr	r2, [pc, #288]	; (8001710 <number_convert_from_float+0x170>)
 80015ee:	601a      	str	r2, [r3, #0]
		return;
 80015f0:	e085      	b.n	80016fe <number_convert_from_float+0x15e>
	}

	/* Invert number, for negative sign clear */
	if(number->negative){
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	7b5b      	ldrb	r3, [r3, #13]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <number_convert_from_float+0x62>
		f = -f;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001600:	607b      	str	r3, [r7, #4]
	}

	/* Convert absolute part */
	number->absolute = (uint32_t)f;
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff f876 	bl	80006f4 <__aeabi_f2uiz>
 8001608:	4602      	mov	r2, r0
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	601a      	str	r2, [r3, #0]
	tmp = number->absolute;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	60fb      	str	r3, [r7, #12]
	if(tmp){
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d015      	beq.n	8001646 <number_convert_from_float+0xa6>
		while(tmp){
 800161a:	e00b      	b.n	8001634 <number_convert_from_float+0x94>
			number->absolute_digits++;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	791b      	ldrb	r3, [r3, #4]
 8001620:	3301      	adds	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	711a      	strb	r2, [r3, #4]
			tmp /= 10;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a3a      	ldr	r2, [pc, #232]	; (8001714 <number_convert_from_float+0x174>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	60fb      	str	r3, [r7, #12]
		while(tmp){
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <number_convert_from_float+0x7c>
		}

		number->absolute_digits -= 1;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	b2da      	uxtb	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	711a      	strb	r2, [r3, #4]
	}

	/* Convert fraction part */
	tmp = DIGITS_COUNT - number->absolute_digits;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	791b      	ldrb	r3, [r3, #4]
 800164a:	f1c3 0308 	rsb	r3, r3, #8
 800164e:	60fb      	str	r3, [r7, #12]
	f = f - (float)number->absolute;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fe2f 	bl	80002b8 <__aeabi_ui2f>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7fe fd78 	bl	8000154 <__aeabi_fsub>
 8001664:	4603      	mov	r3, r0
 8001666:	607b      	str	r3, [r7, #4]

	if(tmp && (f > 0)){
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d047      	beq.n	80016fe <number_convert_from_float+0x15e>
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff f834 	bl	80006e0 <__aeabi_fcmpgt>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d03f      	beq.n	80016fe <number_convert_from_float+0x15e>
		ftemp = 1;
 800167e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001682:	60bb      	str	r3, [r7, #8]
		while(tmp){
 8001684:	e00e      	b.n	80016a4 <number_convert_from_float+0x104>
			number->fraction_digits++;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	7b1b      	ldrb	r3, [r3, #12]
 800168a:	3301      	adds	r3, #1
 800168c:	b2da      	uxtb	r2, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	731a      	strb	r2, [r3, #12]
			ftemp *= 10;
 8001692:	4921      	ldr	r1, [pc, #132]	; (8001718 <number_convert_from_float+0x178>)
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f7fe fe67 	bl	8000368 <__aeabi_fmul>
 800169a:	4603      	mov	r3, r0
 800169c:	60bb      	str	r3, [r7, #8]
			tmp--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
		while(tmp){
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1ed      	bne.n	8001686 <number_convert_from_float+0xe6>
		}

		number->fraction = f * ftemp;
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7fe fe5b 	bl	8000368 <__aeabi_fmul>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff f81d 	bl	80006f4 <__aeabi_f2uiz>
 80016ba:	4602      	mov	r2, r0
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	609a      	str	r2, [r3, #8]

		/* Remove trailing zeros */
		tmp = number->fraction;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	60fb      	str	r3, [r7, #12]
		while(tmp % 10 == 0){
 80016c6:	e00b      	b.n	80016e0 <number_convert_from_float+0x140>
			tmp /= 10;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <number_convert_from_float+0x174>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	60fb      	str	r3, [r7, #12]
			number->fraction_digits--;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	7b1b      	ldrb	r3, [r3, #12]
 80016d8:	3b01      	subs	r3, #1
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	731a      	strb	r2, [r3, #12]
		while(tmp % 10 == 0){
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <number_convert_from_float+0x174>)
 80016e4:	fba3 2301 	umull	r2, r3, r3, r1
 80016e8:	08da      	lsrs	r2, r3, #3
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	1aca      	subs	r2, r1, r3
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	d0e7      	beq.n	80016c8 <number_convert_from_float+0x128>
		}

		number->fraction = tmp;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	609a      	str	r2, [r3, #8]
	}
}
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	4cbebc20 	.word	0x4cbebc20
 8001708:	05f5e0ff 	.word	0x05f5e0ff
 800170c:	cb18967f 	.word	0xcb18967f
 8001710:	0098967f 	.word	0x0098967f
 8001714:	cccccccd 	.word	0xcccccccd
 8001718:	41200000 	.word	0x41200000

0800171c <keyboard_init>:

static void button_callback(uint8_t button_id, button_callback_event_t event);
static void scan_buttons(void);
static void led_show(void);

void keyboard_init(void){
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	e014      	b.n	8001752 <keyboard_init+0x36>
		BTN_Init(&keyboard.button[btn], KEY_0_ID + btn, 50, 0 /* Disabled */);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	4a11      	ldr	r2, [pc, #68]	; (8001774 <keyboard_init+0x58>)
 800172e:	1898      	adds	r0, r3, r2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	b299      	uxth	r1, r3
 8001734:	2300      	movs	r3, #0
 8001736:	2232      	movs	r2, #50	; 0x32
 8001738:	f7ff f8fa 	bl	8000930 <BTN_Init>
		BTN_RegisterCallback(&keyboard.button[btn], button_callback);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <keyboard_init+0x58>)
 8001742:	4413      	add	r3, r2
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <keyboard_init+0x5c>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f9e7 	bl	8000b1a <BTN_RegisterCallback>
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3301      	adds	r3, #1
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d9e7      	bls.n	8001728 <keyboard_init+0xc>
	}

	/* Set long-press time for * and OK buttons */
	keyboard.button[KEY_EQUAL_ID].long_press_ms = 500;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <keyboard_init+0x58>)
 800175a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800175e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	keyboard.button[KEY_SUBSTRACT_ID].long_press_ms = 500;
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <keyboard_init+0x58>)
 8001764:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001768:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000130 	.word	0x20000130
 8001778:	08001841 	.word	0x08001841

0800177c <keyboard_main>:

void keyboard_main(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e009      	b.n	800179c <keyboard_main+0x20>
		BTN_Main(&keyboard.button[btn]);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <keyboard_main+0x30>)
 800178e:	4413      	add	r3, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff f8f6 	bl	8000982 <BTN_Main>
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3301      	adds	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b0f      	cmp	r3, #15
 80017a0:	d9f2      	bls.n	8001788 <keyboard_main+0xc>
	}
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000130 	.word	0x20000130

080017b0 <keyboard_tick>:

void keyboard_tick(uint16_t period){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
	/* Scan keyboard buttons */
	scan_buttons();
 80017ba:	f000 f875 	bl	80018a8 <scan_buttons>

	/* Update timings for buttons library */
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e00b      	b.n	80017dc <keyboard_tick+0x2c>
		BTN_Tick(&keyboard.button[btn], period);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <keyboard_tick+0x3c>)
 80017ca:	4413      	add	r3, r2
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff f989 	bl	8000ae8 <BTN_Tick>
	for(uint32_t btn = 0; btn < KEY_COUNT; btn++){
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	d9f0      	bls.n	80017c4 <keyboard_tick+0x14>
	}
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000130 	.word	0x20000130

080017f0 <keyboard_set_led>:

void keyboard_set_led(uint32_t mask){
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	keyboard.led_states |= mask;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <keyboard_set_led+0x24>)
 80017fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <keyboard_set_led+0x24>)
 8001804:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000130 	.word	0x20000130

08001818 <keyboard_clear_led>:

void keyboard_clear_led(uint32_t mask){
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	keyboard.led_states &= ~mask;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <keyboard_clear_led+0x24>)
 8001822:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	43db      	mvns	r3, r3
 800182a:	4013      	ands	r3, r2
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <keyboard_clear_led+0x24>)
 800182e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	20000130 	.word	0x20000130

08001840 <button_callback>:

static void button_callback(uint8_t button_id, button_callback_event_t event){
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	460a      	mov	r2, r1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	4613      	mov	r3, r2
 800184e:	71bb      	strb	r3, [r7, #6]
	keyboard_event_id kbd_event = KEY_RELEASED;
 8001850:	2302      	movs	r3, #2
 8001852:	73fb      	strb	r3, [r7, #15]

	switch(event){
 8001854:	79bb      	ldrb	r3, [r7, #6]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d014      	beq.n	8001884 <button_callback+0x44>
 800185a:	2b02      	cmp	r3, #2
 800185c:	dc15      	bgt.n	800188a <button_callback+0x4a>
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <button_callback+0x28>
 8001862:	2b01      	cmp	r3, #1
 8001864:	d00b      	beq.n	800187e <button_callback+0x3e>

		case BTN_SHORT_PRESS: kbd_event = KEY_SHORT_PRESS; break;
		case BTN_LONG_PRESS: kbd_event = KEY_LONG_PRESS; break;

		default:
			break;
 8001866:	e010      	b.n	800188a <button_callback+0x4a>
			if(keyboard.button[button_id].pressed){
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <button_callback+0x64>)
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	4413      	add	r3, r2
 8001870:	3302      	adds	r3, #2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00a      	beq.n	800188e <button_callback+0x4e>
				kbd_event = KEY_PRESSED;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
			break;
 800187c:	e007      	b.n	800188e <button_callback+0x4e>
		case BTN_SHORT_PRESS: kbd_event = KEY_SHORT_PRESS; break;
 800187e:	2304      	movs	r3, #4
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	e005      	b.n	8001890 <button_callback+0x50>
		case BTN_LONG_PRESS: kbd_event = KEY_LONG_PRESS; break;
 8001884:	2308      	movs	r3, #8
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e002      	b.n	8001890 <button_callback+0x50>
			break;
 800188a:	bf00      	nop
 800188c:	e000      	b.n	8001890 <button_callback+0x50>
			break;
 800188e:	bf00      	nop
	}

	keyboard_callback(button_id, kbd_event);
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fb9a 	bl	8000fd0 <keyboard_callback>
}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000130 	.word	0x20000130

080018a8 <scan_buttons>:

/* Weak functions for user realization if needed */
__attribute__((weak)) void keyboard_callback(keyboard_key_id key, keyboard_event_id event){}

static void scan_buttons(void){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
	uint16_t tmp = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	80fb      	strh	r3, [r7, #6]

	/* Read coulumn buttons */
	tmp |= (KEY_R1_GPIO_Port->IDR & KEY_R1_Pin)?(0):(1);
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <scan_buttons+0x128>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf0c      	ite	eq
 80018be:	2301      	moveq	r3, #1
 80018c0:	2300      	movne	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	80fb      	strh	r3, [r7, #6]
	tmp <<= 1;
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	80fb      	strh	r3, [r7, #6]
	tmp |= (KEY_R2_GPIO_Port->IDR & KEY_R2_Pin)?(0):(1);
 80018d6:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <scan_buttons+0x128>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bf0c      	ite	eq
 80018e2:	2301      	moveq	r3, #1
 80018e4:	2300      	movne	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	80fb      	strh	r3, [r7, #6]
	tmp <<= 1;
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	80fb      	strh	r3, [r7, #6]
	tmp |= (KEY_R3_GPIO_Port->IDR & KEY_R3_Pin)?(0):(1);
 80018fa:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <scan_buttons+0x128>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	b21a      	sxth	r2, r3
 800190e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001912:	4313      	orrs	r3, r2
 8001914:	b21b      	sxth	r3, r3
 8001916:	80fb      	strh	r3, [r7, #6]
	tmp <<= 1;
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	80fb      	strh	r3, [r7, #6]
	tmp |= (KEY_R4_GPIO_Port->IDR & KEY_R4_Pin)?(0):(1);
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <scan_buttons+0x128>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	bf0c      	ite	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	2300      	movne	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	b21a      	sxth	r2, r3
 8001932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001936:	4313      	orrs	r3, r2
 8001938:	b21b      	sxth	r3, r3
 800193a:	80fb      	strh	r3, [r7, #6]

	/* Clear last buttons states */
	buttons_state &= ~(0x0F << (column_index * 4));
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <scan_buttons+0x12c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	b21b      	sxth	r3, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <scan_buttons+0x130>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b21b      	sxth	r3, r3
 8001954:	4013      	ands	r3, r2
 8001956:	b21b      	sxth	r3, r3
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <scan_buttons+0x130>)
 800195c:	801a      	strh	r2, [r3, #0]

	/* Set new buttons states */
	buttons_state |= tmp << (column_index * 4);
 800195e:	88fa      	ldrh	r2, [r7, #6]
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <scan_buttons+0x12c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <scan_buttons+0x130>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21b      	sxth	r3, r3
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <scan_buttons+0x130>)
 800197a:	801a      	strh	r2, [r3, #0]

	/* Select column row */
	HAL_GPIO_WritePin(GPIOB, column_pin[column_index], SET);
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <scan_buttons+0x12c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <scan_buttons+0x134>)
 8001984:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001988:	2201      	movs	r2, #1
 800198a:	4619      	mov	r1, r3
 800198c:	4810      	ldr	r0, [pc, #64]	; (80019d0 <scan_buttons+0x128>)
 800198e:	f000 fd6d 	bl	800246c <HAL_GPIO_WritePin>
	column_index++;
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <scan_buttons+0x12c>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <scan_buttons+0x12c>)
 800199c:	701a      	strb	r2, [r3, #0]
	if(column_index >= 4){
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <scan_buttons+0x12c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d902      	bls.n	80019ac <scan_buttons+0x104>
		column_index = 0;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <scan_buttons+0x12c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
	}

	/* Show next buttons LED's column */
	led_show();
 80019ac:	f000 f818 	bl	80019e0 <led_show>

	HAL_GPIO_WritePin(GPIOB, column_pin[column_index], RESET);
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <scan_buttons+0x12c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <scan_buttons+0x134>)
 80019b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019bc:	2200      	movs	r2, #0
 80019be:	4619      	mov	r1, r3
 80019c0:	4803      	ldr	r0, [pc, #12]	; (80019d0 <scan_buttons+0x128>)
 80019c2:	f000 fd53 	bl	800246c <HAL_GPIO_WritePin>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40010c00 	.word	0x40010c00
 80019d4:	20000234 	.word	0x20000234
 80019d8:	2000010e 	.word	0x2000010e
 80019dc:	200000cc 	.word	0x200000cc

080019e0 <led_show>:

static void led_show(void){
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
	/* Clear led rows output */
	GPIOA->ODR &= ~(KEY_LED_R4_Pin|KEY_LED_R3_Pin|KEY_LED_R2_Pin|KEY_LED_R1_Pin);
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <led_show+0x40>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <led_show+0x40>)
 80019ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019f0:	60d3      	str	r3, [r2, #12]

	/* Set new led rows output */
	uint32_t tmp = (keyboard.led_states >> (column_index * 4)) & 0x0F;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <led_show+0x44>)
 80019f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <led_show+0x48>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	607b      	str	r3, [r7, #4]
	GPIOA->ODR |= (tmp << 8);
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <led_show+0x40>)
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	4903      	ldr	r1, [pc, #12]	; (8001a20 <led_show+0x40>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60cb      	str	r3, [r1, #12]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40010800 	.word	0x40010800
 8001a24:	20000130 	.word	0x20000130
 8001a28:	20000234 	.word	0x20000234

08001a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a30:	f000 fa16 	bl	8001e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a34:	f000 f817 	bl	8001a66 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a38:	f000 f8ac 	bl	8001b94 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001a3c:	f000 f858 	bl	8001af0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  seven_segment_init();
 8001a40:	f7fe fe78 	bl	8000734 <seven_segment_init>
  seven_segment_enable(0, true);
 8001a44:	2101      	movs	r1, #1
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7fe fee6 	bl	8000818 <seven_segment_enable>
  seven_segment_set_number(0, 0);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7fe ff52 	bl	80008f8 <seven_segment_set_number>
  keyboard_init();
 8001a54:	f7ff fe62 	bl	800171c <keyboard_init>
  calculator_init();
 8001a58:	f7ff f9f6 	bl	8000e48 <calculator_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  keyboard_main();
 8001a5c:	f7ff fe8e 	bl	800177c <keyboard_main>
	  calculator_main();
 8001a60:	f7ff fa2a 	bl	8000eb8 <calculator_main>
	  keyboard_main();
 8001a64:	e7fa      	b.n	8001a5c <main+0x30>

08001a66 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b090      	sub	sp, #64	; 0x40
 8001a6a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	2228      	movs	r2, #40	; 0x28
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 fced 	bl	8003454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a90:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a96:	2301      	movs	r3, #1
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001aa4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aaa:	f107 0318 	add.w	r3, r7, #24
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fcf4 	bl	800249c <HAL_RCC_OscConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001aba:	f000 f915 	bl	8001ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001abe:	230f      	movs	r3, #15
 8001ac0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 ff61 	bl	80029a0 <HAL_RCC_ClockConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ae4:	f000 f900 	bl	8001ce8 <Error_Handler>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3740      	adds	r7, #64	; 0x40
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	463b      	mov	r3, r7
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <MX_TIM4_Init+0x9c>)
 8001b0e:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <MX_TIM4_Init+0xa0>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <MX_TIM4_Init+0x9c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MX_TIM4_Init+0x9c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <MX_TIM4_Init+0x9c>)
 8001b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <MX_TIM4_Init+0x9c>)
 8001b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_TIM4_Init+0x9c>)
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b34:	4815      	ldr	r0, [pc, #84]	; (8001b8c <MX_TIM4_Init+0x9c>)
 8001b36:	f001 f88f 	bl	8002c58 <HAL_TIM_Base_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b40:	f000 f8d2 	bl	8001ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480e      	ldr	r0, [pc, #56]	; (8001b8c <MX_TIM4_Init+0x9c>)
 8001b52:	f001 fa2b 	bl	8002fac <HAL_TIM_ConfigClockSource>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b5c:	f000 f8c4 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4807      	ldr	r0, [pc, #28]	; (8001b8c <MX_TIM4_Init+0x9c>)
 8001b6e:	f001 fc01 	bl	8003374 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b78:	f000 f8b6 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <MX_TIM4_Init+0x9c>)
 8001b7e:	f001 f8bb 	bl	8002cf8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000238 	.word	0x20000238
 8001b90:	40000800 	.word	0x40000800

08001b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <MX_GPIO_Init+0xfc>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a38      	ldr	r2, [pc, #224]	; (8001c90 <MX_GPIO_Init+0xfc>)
 8001bae:	f043 0320 	orr.w	r3, r3, #32
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <MX_GPIO_Init+0xfc>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <MX_GPIO_Init+0xfc>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a32      	ldr	r2, [pc, #200]	; (8001c90 <MX_GPIO_Init+0xfc>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <MX_GPIO_Init+0xfc>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <MX_GPIO_Init+0xfc>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a2c      	ldr	r2, [pc, #176]	; (8001c90 <MX_GPIO_Init+0xfc>)
 8001bde:	f043 0308 	orr.w	r3, r3, #8
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <MX_GPIO_Init+0xfc>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f649 71ff 	movw	r1, #40959	; 0x9fff
 8001bf6:	4827      	ldr	r0, [pc, #156]	; (8001c94 <MX_GPIO_Init+0x100>)
 8001bf8:	f000 fc38 	bl	800246c <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin|DP_Pin
                          |KEY_LED_R4_Pin|KEY_LED_R3_Pin|KEY_LED_R2_Pin|KEY_LED_R1_Pin
                          |D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEY_C1_Pin|KEY_C2_Pin|KEY_C3_Pin|KEY_C4_Pin, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001c02:	4825      	ldr	r0, [pc, #148]	; (8001c98 <MX_GPIO_Init+0x104>)
 8001c04:	f000 fc32 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001c0e:	4822      	ldr	r0, [pc, #136]	; (8001c98 <MX_GPIO_Init+0x104>)
 8001c10:	f000 fc2c 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin DP_Pin
                           KEY_LED_R4_Pin KEY_LED_R3_Pin KEY_LED_R2_Pin KEY_LED_R1_Pin
                           D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 8001c14:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8001c18:	613b      	str	r3, [r7, #16]
                          |E_Pin|F_Pin|G_Pin|DP_Pin
                          |KEY_LED_R4_Pin|KEY_LED_R3_Pin|KEY_LED_R2_Pin|KEY_LED_R1_Pin
                          |D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4819      	ldr	r0, [pc, #100]	; (8001c94 <MX_GPIO_Init+0x100>)
 8001c2e:	f000 fa99 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_R4_Pin KEY_R3_Pin KEY_R2_Pin KEY_R1_Pin */
  GPIO_InitStruct.Pin = KEY_R4_Pin|KEY_R3_Pin|KEY_R2_Pin|KEY_R1_Pin;
 8001c32:	f640 4303 	movw	r3, #3075	; 0xc03
 8001c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	4814      	ldr	r0, [pc, #80]	; (8001c98 <MX_GPIO_Init+0x104>)
 8001c48:	f000 fa8c 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_C1_Pin KEY_C2_Pin KEY_C3_Pin KEY_C4_Pin */
  GPIO_InitStruct.Pin = KEY_C1_Pin|KEY_C2_Pin|KEY_C3_Pin|KEY_C4_Pin;
 8001c4c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c52:	2311      	movs	r3, #17
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4619      	mov	r1, r3
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <MX_GPIO_Init+0x104>)
 8001c66:	f000 fa7d 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8001c6a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001c6e:	613b      	str	r3, [r7, #16]
                          |D7_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_GPIO_Init+0x104>)
 8001c84:	f000 fa6e 	bl	8002164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c88:	bf00      	nop
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010800 	.word	0x40010800
 8001c98:	40010c00 	.word	0x40010c00

08001c9c <HAL_IncTick>:

/* USER CODE BEGIN 4 */
void HAL_IncTick(void){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <HAL_IncTick+0x24>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_IncTick+0x28>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <HAL_IncTick+0x28>)
 8001cae:	6013      	str	r3, [r2, #0]

  keyboard_tick(1);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f7ff fd7d 	bl	80017b0 <keyboard_tick>
  calculator_tick(1);
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f7ff f964 	bl	8000f84 <calculator_tick>
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200000dc 	.word	0x200000dc
 8001cc4:	20000280 	.word	0x20000280

08001cc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_TIM_PeriodElapsedCallback+0x14>
		seven_segment_tick();
 8001cd8:	f7fe fd4c 	bl	8000774 <seven_segment_tick>
	}
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000238 	.word	0x20000238

08001ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cec:	b672      	cpsid	i
}
 8001cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <Error_Handler+0x8>
	...

08001cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_MspInit+0x5c>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_MspInit+0x5c>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6193      	str	r3, [r2, #24]
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_MspInit+0x5c>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_MspInit+0x5c>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_MspInit+0x5c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	61d3      	str	r3, [r2, #28]
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_MspInit+0x5c>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_MspInit+0x60>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_MspInit+0x60>)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010000 	.word	0x40010000

08001d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <HAL_TIM_Base_MspInit+0x44>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d113      	bne.n	8001d92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_TIM_Base_MspInit+0x48>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_TIM_Base_MspInit+0x48>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_TIM_Base_MspInit+0x48>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	201e      	movs	r0, #30
 8001d88:	f000 f9b5 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d8c:	201e      	movs	r0, #30
 8001d8e:	f000 f9ce 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40000800 	.word	0x40000800
 8001da0:	40021000 	.word	0x40021000

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler+0x4>

08001daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <MemManage_Handler+0x4>

08001db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dea:	f7ff ff57 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <TIM4_IRQHandler+0x10>)
 8001dfa:	f000 ffcf 	bl	8002d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000238 	.word	0x20000238

08001e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e14:	f7ff fff8 	bl	8001e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e18:	480b      	ldr	r0, [pc, #44]	; (8001e48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e1a:	490c      	ldr	r1, [pc, #48]	; (8001e4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e1c:	4a0c      	ldr	r2, [pc, #48]	; (8001e50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e30:	4c09      	ldr	r4, [pc, #36]	; (8001e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e3e:	f001 fb11 	bl	8003464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e42:	f7ff fdf3 	bl	8001a2c <main>
  bx lr
 8001e46:	4770      	bx	lr
  ldr r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e4c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001e50:	080034fc 	.word	0x080034fc
  ldr r2, =_sbss
 8001e54:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001e58:	20000284 	.word	0x20000284

08001e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC1_2_IRQHandler>
	...

08001e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_Init+0x28>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_Init+0x28>)
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 f935 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f000 f808 	bl	8001e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7c:	f7ff ff3a 	bl	8001cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40022000 	.word	0x40022000

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_InitTick+0x54>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x58>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f94d 	bl	800214a <HAL_SYSTICK_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00e      	b.n	8001ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d80a      	bhi.n	8001ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f000 f915 	bl	80020f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <HAL_InitTick+0x5c>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200000d4 	.word	0x200000d4
 8001ee4:	200000dc 	.word	0x200000dc
 8001ee8:	200000d8 	.word	0x200000d8

08001eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef0:	4b02      	ldr	r3, [pc, #8]	; (8001efc <HAL_GetTick+0x10>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000280 	.word	0x20000280

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff fff0 	bl	8001eec <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffe0 	bl	8001eec <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200000dc 	.word	0x200000dc

08001f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f64:	4013      	ands	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f003 0307 	and.w	r3, r3, #7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db0b      	blt.n	8001fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4906      	ldr	r1, [pc, #24]	; (8001fe0 <__NVIC_EnableIRQ+0x34>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2001      	movs	r0, #1
 8001fce:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff90 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff2d 	bl	8001f48 <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff42 	bl	8001f90 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff90 	bl	8002038 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5f 	bl	8001fe4 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff35 	bl	8001fac <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa2 	bl	800209c <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b08b      	sub	sp, #44	; 0x2c
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002176:	e169      	b.n	800244c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002178:	2201      	movs	r2, #1
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 8158 	bne.w	8002446 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a9a      	ldr	r2, [pc, #616]	; (8002404 <HAL_GPIO_Init+0x2a0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d05e      	beq.n	800225e <HAL_GPIO_Init+0xfa>
 80021a0:	4a98      	ldr	r2, [pc, #608]	; (8002404 <HAL_GPIO_Init+0x2a0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d875      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021a6:	4a98      	ldr	r2, [pc, #608]	; (8002408 <HAL_GPIO_Init+0x2a4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d058      	beq.n	800225e <HAL_GPIO_Init+0xfa>
 80021ac:	4a96      	ldr	r2, [pc, #600]	; (8002408 <HAL_GPIO_Init+0x2a4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d86f      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021b2:	4a96      	ldr	r2, [pc, #600]	; (800240c <HAL_GPIO_Init+0x2a8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d052      	beq.n	800225e <HAL_GPIO_Init+0xfa>
 80021b8:	4a94      	ldr	r2, [pc, #592]	; (800240c <HAL_GPIO_Init+0x2a8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d869      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021be:	4a94      	ldr	r2, [pc, #592]	; (8002410 <HAL_GPIO_Init+0x2ac>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d04c      	beq.n	800225e <HAL_GPIO_Init+0xfa>
 80021c4:	4a92      	ldr	r2, [pc, #584]	; (8002410 <HAL_GPIO_Init+0x2ac>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d863      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021ca:	4a92      	ldr	r2, [pc, #584]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d046      	beq.n	800225e <HAL_GPIO_Init+0xfa>
 80021d0:	4a90      	ldr	r2, [pc, #576]	; (8002414 <HAL_GPIO_Init+0x2b0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d85d      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021d6:	2b12      	cmp	r3, #18
 80021d8:	d82a      	bhi.n	8002230 <HAL_GPIO_Init+0xcc>
 80021da:	2b12      	cmp	r3, #18
 80021dc:	d859      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <HAL_GPIO_Init+0x80>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	0800225f 	.word	0x0800225f
 80021e8:	08002239 	.word	0x08002239
 80021ec:	0800224b 	.word	0x0800224b
 80021f0:	0800228d 	.word	0x0800228d
 80021f4:	08002293 	.word	0x08002293
 80021f8:	08002293 	.word	0x08002293
 80021fc:	08002293 	.word	0x08002293
 8002200:	08002293 	.word	0x08002293
 8002204:	08002293 	.word	0x08002293
 8002208:	08002293 	.word	0x08002293
 800220c:	08002293 	.word	0x08002293
 8002210:	08002293 	.word	0x08002293
 8002214:	08002293 	.word	0x08002293
 8002218:	08002293 	.word	0x08002293
 800221c:	08002293 	.word	0x08002293
 8002220:	08002293 	.word	0x08002293
 8002224:	08002293 	.word	0x08002293
 8002228:	08002241 	.word	0x08002241
 800222c:	08002255 	.word	0x08002255
 8002230:	4a79      	ldr	r2, [pc, #484]	; (8002418 <HAL_GPIO_Init+0x2b4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002236:	e02c      	b.n	8002292 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	623b      	str	r3, [r7, #32]
          break;
 800223e:	e029      	b.n	8002294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	3304      	adds	r3, #4
 8002246:	623b      	str	r3, [r7, #32]
          break;
 8002248:	e024      	b.n	8002294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	3308      	adds	r3, #8
 8002250:	623b      	str	r3, [r7, #32]
          break;
 8002252:	e01f      	b.n	8002294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	330c      	adds	r3, #12
 800225a:	623b      	str	r3, [r7, #32]
          break;
 800225c:	e01a      	b.n	8002294 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002266:	2304      	movs	r3, #4
 8002268:	623b      	str	r3, [r7, #32]
          break;
 800226a:	e013      	b.n	8002294 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002274:	2308      	movs	r3, #8
 8002276:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	611a      	str	r2, [r3, #16]
          break;
 800227e:	e009      	b.n	8002294 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002280:	2308      	movs	r3, #8
 8002282:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	615a      	str	r2, [r3, #20]
          break;
 800228a:	e003      	b.n	8002294 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x130>
          break;
 8002292:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2bff      	cmp	r3, #255	; 0xff
 8002298:	d801      	bhi.n	800229e <HAL_GPIO_Init+0x13a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	e001      	b.n	80022a2 <HAL_GPIO_Init+0x13e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2bff      	cmp	r3, #255	; 0xff
 80022a8:	d802      	bhi.n	80022b0 <HAL_GPIO_Init+0x14c>
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	e002      	b.n	80022b6 <HAL_GPIO_Init+0x152>
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	3b08      	subs	r3, #8
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	210f      	movs	r1, #15
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	401a      	ands	r2, r3
 80022c8:	6a39      	ldr	r1, [r7, #32]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	431a      	orrs	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 80b1 	beq.w	8002446 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022e4:	4b4d      	ldr	r3, [pc, #308]	; (800241c <HAL_GPIO_Init+0x2b8>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a4c      	ldr	r2, [pc, #304]	; (800241c <HAL_GPIO_Init+0x2b8>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_GPIO_Init+0x2b8>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022fc:	4a48      	ldr	r2, [pc, #288]	; (8002420 <HAL_GPIO_Init+0x2bc>)
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002308:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	220f      	movs	r2, #15
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a40      	ldr	r2, [pc, #256]	; (8002424 <HAL_GPIO_Init+0x2c0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d013      	beq.n	8002350 <HAL_GPIO_Init+0x1ec>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a3f      	ldr	r2, [pc, #252]	; (8002428 <HAL_GPIO_Init+0x2c4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00d      	beq.n	800234c <HAL_GPIO_Init+0x1e8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a3e      	ldr	r2, [pc, #248]	; (800242c <HAL_GPIO_Init+0x2c8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d007      	beq.n	8002348 <HAL_GPIO_Init+0x1e4>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3d      	ldr	r2, [pc, #244]	; (8002430 <HAL_GPIO_Init+0x2cc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d101      	bne.n	8002344 <HAL_GPIO_Init+0x1e0>
 8002340:	2303      	movs	r3, #3
 8002342:	e006      	b.n	8002352 <HAL_GPIO_Init+0x1ee>
 8002344:	2304      	movs	r3, #4
 8002346:	e004      	b.n	8002352 <HAL_GPIO_Init+0x1ee>
 8002348:	2302      	movs	r3, #2
 800234a:	e002      	b.n	8002352 <HAL_GPIO_Init+0x1ee>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_GPIO_Init+0x1ee>
 8002350:	2300      	movs	r3, #0
 8002352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002354:	f002 0203 	and.w	r2, r2, #3
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	4093      	lsls	r3, r2
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002362:	492f      	ldr	r1, [pc, #188]	; (8002420 <HAL_GPIO_Init+0x2bc>)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800237c:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	492c      	ldr	r1, [pc, #176]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	43db      	mvns	r3, r3
 8002392:	4928      	ldr	r1, [pc, #160]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 8002394:	4013      	ands	r3, r2
 8002396:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023a4:	4b23      	ldr	r3, [pc, #140]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	4922      	ldr	r1, [pc, #136]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60cb      	str	r3, [r1, #12]
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	491e      	ldr	r1, [pc, #120]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023bc:	4013      	ands	r3, r2
 80023be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4918      	ldr	r1, [pc, #96]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	4914      	ldr	r1, [pc, #80]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d021      	beq.n	8002438 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	490e      	ldr	r1, [pc, #56]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
 8002400:	e021      	b.n	8002446 <HAL_GPIO_Init+0x2e2>
 8002402:	bf00      	nop
 8002404:	10320000 	.word	0x10320000
 8002408:	10310000 	.word	0x10310000
 800240c:	10220000 	.word	0x10220000
 8002410:	10210000 	.word	0x10210000
 8002414:	10120000 	.word	0x10120000
 8002418:	10110000 	.word	0x10110000
 800241c:	40021000 	.word	0x40021000
 8002420:	40010000 	.word	0x40010000
 8002424:	40010800 	.word	0x40010800
 8002428:	40010c00 	.word	0x40010c00
 800242c:	40011000 	.word	0x40011000
 8002430:	40011400 	.word	0x40011400
 8002434:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_GPIO_Init+0x304>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	43db      	mvns	r3, r3
 8002440:	4909      	ldr	r1, [pc, #36]	; (8002468 <HAL_GPIO_Init+0x304>)
 8002442:	4013      	ands	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	3301      	adds	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	f47f ae8e 	bne.w	8002178 <HAL_GPIO_Init+0x14>
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	372c      	adds	r7, #44	; 0x2c
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	40010400 	.word	0x40010400

0800246c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002488:	e003      	b.n	8002492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	041a      	lsls	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	611a      	str	r2, [r3, #16]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e272      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8087 	beq.w	80025ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024bc:	4b92      	ldr	r3, [pc, #584]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d00c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c8:	4b8f      	ldr	r3, [pc, #572]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d112      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
 80024d4:	4b8c      	ldr	r3, [pc, #560]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b89      	ldr	r3, [pc, #548]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x12c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d168      	bne.n	80025c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e24c      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x76>
 8002504:	4b80      	ldr	r3, [pc, #512]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a7f      	ldr	r2, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e02e      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7a      	ldr	r2, [pc, #488]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b78      	ldr	r3, [pc, #480]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a77      	ldr	r2, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e01d      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0xbc>
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a71      	ldr	r2, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a6e      	ldr	r2, [pc, #440]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e00b      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002558:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6a      	ldr	r2, [pc, #424]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a67      	ldr	r2, [pc, #412]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fcb8 	bl	8001eec <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff fcb4 	bl	8001eec <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e200      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0xe4>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff fca4 	bl	8001eec <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff fca0 	bl	8001eec <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1ec      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x10c>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d063      	beq.n	800269e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d6:	4b4c      	ldr	r3, [pc, #304]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025e2:	4b49      	ldr	r3, [pc, #292]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d11c      	bne.n	8002628 <HAL_RCC_OscConfig+0x18c>
 80025ee:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x176>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1c0      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4939      	ldr	r1, [pc, #228]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	e03a      	b.n	800269e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff fc59 	bl	8001eec <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263e:	f7ff fc55 	bl	8001eec <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1a1      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4927      	ldr	r1, [pc, #156]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002672:	4b26      	ldr	r3, [pc, #152]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff fc38 	bl	8001eec <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002680:	f7ff fc34 	bl	8001eec <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e180      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03a      	beq.n	8002720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d019      	beq.n	80026e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_RCC_OscConfig+0x274>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7ff fc18 	bl	8001eec <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c0:	f7ff fc14 	bl	8001eec <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e160      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026de:	2001      	movs	r0, #1
 80026e0:	f000 fa9c 	bl	8002c1c <RCC_Delay>
 80026e4:	e01c      	b.n	8002720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_RCC_OscConfig+0x274>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7ff fbfe 	bl	8001eec <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f2:	e00f      	b.n	8002714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7ff fbfa 	bl	8001eec <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d908      	bls.n	8002714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e146      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	42420000 	.word	0x42420000
 8002710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b92      	ldr	r3, [pc, #584]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e9      	bne.n	80026f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80a6 	beq.w	800287a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b8b      	ldr	r3, [pc, #556]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10d      	bne.n	800275a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	4b88      	ldr	r3, [pc, #544]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4a87      	ldr	r2, [pc, #540]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002748:	61d3      	str	r3, [r2, #28]
 800274a:	4b85      	ldr	r3, [pc, #532]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b82      	ldr	r3, [pc, #520]	; (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002766:	4b7f      	ldr	r3, [pc, #508]	; (8002964 <HAL_RCC_OscConfig+0x4c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7e      	ldr	r2, [pc, #504]	; (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002772:	f7ff fbbb 	bl	8001eec <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277a:	f7ff fbb7 	bl	8001eec <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b64      	cmp	r3, #100	; 0x64
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e103      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	4b75      	ldr	r3, [pc, #468]	; (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x312>
 80027a0:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4a6e      	ldr	r2, [pc, #440]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6213      	str	r3, [r2, #32]
 80027ac:	e02d      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x334>
 80027b6:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a69      	ldr	r2, [pc, #420]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6213      	str	r3, [r2, #32]
 80027c2:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4a66      	ldr	r2, [pc, #408]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	6213      	str	r3, [r2, #32]
 80027ce:	e01c      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x356>
 80027d8:	4b61      	ldr	r3, [pc, #388]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a5d      	ldr	r2, [pc, #372]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e00b      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027f2:	4b5b      	ldr	r3, [pc, #364]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a5a      	ldr	r2, [pc, #360]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4b58      	ldr	r3, [pc, #352]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a57      	ldr	r2, [pc, #348]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7ff fb6b 	bl	8001eec <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7ff fb67 	bl	8001eec <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0b1      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	4b4b      	ldr	r3, [pc, #300]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ee      	beq.n	800281a <HAL_RCC_OscConfig+0x37e>
 800283c:	e014      	b.n	8002868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7ff fb55 	bl	8001eec <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7ff fb51 	bl	8001eec <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e09b      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	4b40      	ldr	r3, [pc, #256]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d105      	bne.n	800287a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286e:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a3b      	ldr	r2, [pc, #236]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8087 	beq.w	8002992 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002884:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d061      	beq.n	8002954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d146      	bne.n	8002926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b33      	ldr	r3, [pc, #204]	; (8002968 <HAL_RCC_OscConfig+0x4cc>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7ff fb25 	bl	8001eec <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff fb21 	bl	8001eec <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e06d      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028cc:	d108      	bne.n	80028e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4921      	ldr	r1, [pc, #132]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e0:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a19      	ldr	r1, [r3, #32]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	430b      	orrs	r3, r1
 80028f2:	491b      	ldr	r1, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_RCC_OscConfig+0x4cc>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7ff faf5 	bl	8001eec <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7ff faf1 	bl	8001eec <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e03d      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x46a>
 8002924:	e035      	b.n	8002992 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_OscConfig+0x4cc>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fade 	bl	8001eec <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff fada 	bl	8001eec <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e026      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x498>
 8002952:	e01e      	b.n	8002992 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e019      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x500>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	429a      	cmp	r2, r3
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0d0      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b4:	4b6a      	ldr	r3, [pc, #424]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d910      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 0207 	bic.w	r2, r3, #7
 80029ca:	4965      	ldr	r1, [pc, #404]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b63      	ldr	r3, [pc, #396]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0b8      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a58      	ldr	r2, [pc, #352]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a14:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	494d      	ldr	r1, [pc, #308]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d040      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d115      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e073      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06b      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4936      	ldr	r1, [pc, #216]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a90:	f7ff fa2c 	bl	8001eec <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7ff fa28 	bl	8001eec <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e053      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 020c 	and.w	r2, r3, #12
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1eb      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d210      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4922      	ldr	r1, [pc, #136]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e032      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4916      	ldr	r1, [pc, #88]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	490e      	ldr	r1, [pc, #56]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b2e:	f000 f821 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	490a      	ldr	r1, [pc, #40]	; (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	5ccb      	ldrb	r3, [r1, r3]
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1cc>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_ClockConfig+0x1d0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f99c 	bl	8001e8c <HAL_InitTick>

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	080034d0 	.word	0x080034d0
 8002b6c:	200000d4 	.word	0x200000d4
 8002b70:	200000d8 	.word	0x200000d8

08002b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x36>
 8002ba2:	e027      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ba6:	613b      	str	r3, [r7, #16]
      break;
 8002ba8:	e027      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	0c9b      	lsrs	r3, r3, #18
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d010      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0c5b      	lsrs	r3, r3, #17
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd6:	fb03 f202 	mul.w	r2, r3, r2
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e004      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	613b      	str	r3, [r7, #16]
      break;
 8002bf2:	e002      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf6:	613b      	str	r3, [r7, #16]
      break;
 8002bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfa:	693b      	ldr	r3, [r7, #16]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	007a1200 	.word	0x007a1200
 8002c10:	080034e0 	.word	0x080034e0
 8002c14:	080034f0 	.word	0x080034f0
 8002c18:	003d0900 	.word	0x003d0900

08002c1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <RCC_Delay+0x34>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <RCC_Delay+0x38>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c38:	bf00      	nop
  }
  while (Delay --);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	60fa      	str	r2, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f9      	bne.n	8002c38 <RCC_Delay+0x1c>
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	200000d4 	.word	0x200000d4
 8002c54:	10624dd3 	.word	0x10624dd3

08002c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e041      	b.n	8002cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff f86a 	bl	8001d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f000 fa74 	bl	8003184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d001      	beq.n	8002d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e03a      	b.n	8002d86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_TIM_Base_Start_IT+0x98>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00e      	beq.n	8002d50 <HAL_TIM_Base_Start_IT+0x58>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3a:	d009      	beq.n	8002d50 <HAL_TIM_Base_Start_IT+0x58>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_TIM_Base_Start_IT+0x58>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d111      	bne.n	8002d74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d010      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d72:	e007      	b.n	8002d84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800

08002d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d122      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d11b      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0202 	mvn.w	r2, #2
 8002dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f9b4 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f9a7 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f9b6 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d122      	bne.n	8002e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d11b      	bne.n	8002e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0204 	mvn.w	r2, #4
 8002e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f98a 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f97d 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f98c 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d122      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d11b      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0208 	mvn.w	r2, #8
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2204      	movs	r2, #4
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f960 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f953 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f962 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0210 	mvn.w	r2, #16
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f936 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f929 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f938 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10e      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d107      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0201 	mvn.w	r2, #1
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe fed4 	bl	8001cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d10e      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f38:	2b80      	cmp	r3, #128	; 0x80
 8002f3a:	d107      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa7b 	bl	8003442 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b40      	cmp	r3, #64	; 0x40
 8002f58:	d10e      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d107      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8fc 	bl	8003170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d10e      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d107      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0220 	mvn.w	r2, #32
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa46 	bl	8003430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0b4      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x186>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003000:	d03e      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0xd4>
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003006:	f200 8087 	bhi.w	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300e:	f000 8086 	beq.w	800311e <HAL_TIM_ConfigClockSource+0x172>
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	d87f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b70      	cmp	r3, #112	; 0x70
 800301a:	d01a      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0xa6>
 800301c:	2b70      	cmp	r3, #112	; 0x70
 800301e:	d87b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b60      	cmp	r3, #96	; 0x60
 8003022:	d050      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003024:	2b60      	cmp	r3, #96	; 0x60
 8003026:	d877      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b50      	cmp	r3, #80	; 0x50
 800302a:	d03c      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0xfa>
 800302c:	2b50      	cmp	r3, #80	; 0x50
 800302e:	d873      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d058      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d86f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b30      	cmp	r3, #48	; 0x30
 800303a:	d064      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 800303c:	2b30      	cmp	r3, #48	; 0x30
 800303e:	d86b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d060      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d867      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d05c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d05a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 8003050:	e062      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	f000 f968 	bl	8003336 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	609a      	str	r2, [r3, #8]
      break;
 800307e:	e04f      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003090:	f000 f951 	bl	8003336 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a2:	609a      	str	r2, [r3, #8]
      break;
 80030a4:	e03c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	461a      	mov	r2, r3
 80030b4:	f000 f8c8 	bl	8003248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2150      	movs	r1, #80	; 0x50
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f91f 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 80030c4:	e02c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d2:	461a      	mov	r2, r3
 80030d4:	f000 f8e6 	bl	80032a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2160      	movs	r1, #96	; 0x60
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f90f 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 80030e4:	e01c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f2:	461a      	mov	r2, r3
 80030f4:	f000 f8a8 	bl	8003248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2140      	movs	r1, #64	; 0x40
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f8ff 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 8003104:	e00c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f000 f8f6 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 8003116:	e003      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e000      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800311e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
	...

08003184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a29      	ldr	r2, [pc, #164]	; (800323c <TIM_Base_SetConfig+0xb8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00b      	beq.n	80031b4 <TIM_Base_SetConfig+0x30>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a2:	d007      	beq.n	80031b4 <TIM_Base_SetConfig+0x30>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a26      	ldr	r2, [pc, #152]	; (8003240 <TIM_Base_SetConfig+0xbc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_Base_SetConfig+0x30>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a25      	ldr	r2, [pc, #148]	; (8003244 <TIM_Base_SetConfig+0xc0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1c      	ldr	r2, [pc, #112]	; (800323c <TIM_Base_SetConfig+0xb8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_Base_SetConfig+0x62>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d007      	beq.n	80031e6 <TIM_Base_SetConfig+0x62>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a19      	ldr	r2, [pc, #100]	; (8003240 <TIM_Base_SetConfig+0xbc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0x62>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a18      	ldr	r2, [pc, #96]	; (8003244 <TIM_Base_SetConfig+0xc0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d108      	bne.n	80031f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a07      	ldr	r2, [pc, #28]	; (800323c <TIM_Base_SetConfig+0xb8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	615a      	str	r2, [r3, #20]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800

08003248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0201 	bic.w	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f023 030a 	bic.w	r3, r3, #10
 8003284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	621a      	str	r2, [r3, #32]
}
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f023 0210 	bic.w	r2, r3, #16
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	031b      	lsls	r3, r3, #12
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	621a      	str	r2, [r3, #32]
}
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	f043 0307 	orr.w	r3, r3, #7
 8003324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	609a      	str	r2, [r3, #8]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003336:	b480      	push	{r7}
 8003338:	b087      	sub	sp, #28
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003350:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	021a      	lsls	r2, r3, #8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	431a      	orrs	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4313      	orrs	r3, r2
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	609a      	str	r2, [r3, #8]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003388:	2302      	movs	r3, #2
 800338a:	e046      	b.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a16      	ldr	r2, [pc, #88]	; (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00e      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d8:	d009      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a12      	ldr	r2, [pc, #72]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a10      	ldr	r2, [pc, #64]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10c      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800

08003430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <memset>:
 8003454:	4603      	mov	r3, r0
 8003456:	4402      	add	r2, r0
 8003458:	4293      	cmp	r3, r2
 800345a:	d100      	bne.n	800345e <memset+0xa>
 800345c:	4770      	bx	lr
 800345e:	f803 1b01 	strb.w	r1, [r3], #1
 8003462:	e7f9      	b.n	8003458 <memset+0x4>

08003464 <__libc_init_array>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	2600      	movs	r6, #0
 8003468:	4d0c      	ldr	r5, [pc, #48]	; (800349c <__libc_init_array+0x38>)
 800346a:	4c0d      	ldr	r4, [pc, #52]	; (80034a0 <__libc_init_array+0x3c>)
 800346c:	1b64      	subs	r4, r4, r5
 800346e:	10a4      	asrs	r4, r4, #2
 8003470:	42a6      	cmp	r6, r4
 8003472:	d109      	bne.n	8003488 <__libc_init_array+0x24>
 8003474:	f000 f81a 	bl	80034ac <_init>
 8003478:	2600      	movs	r6, #0
 800347a:	4d0a      	ldr	r5, [pc, #40]	; (80034a4 <__libc_init_array+0x40>)
 800347c:	4c0a      	ldr	r4, [pc, #40]	; (80034a8 <__libc_init_array+0x44>)
 800347e:	1b64      	subs	r4, r4, r5
 8003480:	10a4      	asrs	r4, r4, #2
 8003482:	42a6      	cmp	r6, r4
 8003484:	d105      	bne.n	8003492 <__libc_init_array+0x2e>
 8003486:	bd70      	pop	{r4, r5, r6, pc}
 8003488:	f855 3b04 	ldr.w	r3, [r5], #4
 800348c:	4798      	blx	r3
 800348e:	3601      	adds	r6, #1
 8003490:	e7ee      	b.n	8003470 <__libc_init_array+0xc>
 8003492:	f855 3b04 	ldr.w	r3, [r5], #4
 8003496:	4798      	blx	r3
 8003498:	3601      	adds	r6, #1
 800349a:	e7f2      	b.n	8003482 <__libc_init_array+0x1e>
 800349c:	080034f4 	.word	0x080034f4
 80034a0:	080034f4 	.word	0x080034f4
 80034a4:	080034f4 	.word	0x080034f4
 80034a8:	080034f8 	.word	0x080034f8

080034ac <_init>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	bf00      	nop
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr

080034b8 <_fini>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	bf00      	nop
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr
